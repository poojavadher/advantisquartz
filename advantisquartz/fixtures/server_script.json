[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-12-18 15:00:26.484210",
  "module": "Advantisquartz",
  "name": "stock qty",
  "reference_doctype": "Delivery Note",
  "script": "for item in doc.items:\n    rounded_stock_qty = round(item.stock_qty)\n    # frappe.msgprint(str(rounded_stock_qty))\n    \n#     # Assuming 'Delivery Note Item' is the child table name\n    frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'stock_qty', rounded_stock_qty)\n\n    serials = frappe.db.get_list('Serial No',\n        filters={\n            'item_code': item.item_code,\n            'status': 'Hold',\n            'packing_list':doc.packing_scanner\n        },\n        fields=['name'],\n        as_list=True\n    )\n\n    # Filter serial numbers based on the rounded_stock_qty\n    filtered_serials = serials[:rounded_stock_qty]\n\n    serial_names = [serial[0] for serial in filtered_serials]\n\n    serial_id = '\\n'.join(serial_names)\n    \n    frappe.msgprint(serial_id)\n    \n    # Set the serial_id with line breaks in the 'Delivery Note Item'\n    frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'serial_no', serial_id)\n# total = 0\n# for item in doc.items:\n#     result = 1 / item.uom_conversion_value;\n#     amount = item.saleable_measurement * item.rate\n#     frappe.msgprint(str(amount))\n#     frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'conversion_factor', result)\n    \n#     finalResult = float(item.qty*result);\n#     frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'stock_qty', finalResult)\n#     frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'amount', amount)\n#     frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'base_amount', amount)\n#     frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'net_amount', amount)\n#     frappe.db.set_value('Delivery Note Item', {'parent': doc.name, 'item_code': item.item_code}, 'base_net_amount', amount)\n    \n#     total = total + amount\n#     frappe.db.set_value('Delivery Note',{'name':doc.name},'total', amount)\n#     frappe.msgprint(str(total))\n# taxe_amount = doc.total \n# for index, item in enumerate(doc.taxes):\n#     if item.charge_type == \"On Net Total\":\n#         taxe = (doc.total * item.rate) / 100 \n#         taxe_amount = taxe_amount + taxe\n#         # Fetch the existing row from the child table by its index \n#         tax_row = frappe.get_doc('Sales Taxes and Charges', {'parent': doc.name, 'idx': index + 1}) \n#         # Adding 1 to the index to match the child table index \n#         # Update fields in the existing row with the new tax amount \n        \n#         # Update the 'total' field with the new tax amount \n#         frappe.msgprint(f'Tax Amount: {taxe}') \n#         tax_row.save() \n#         # Save the updated row \n#         # Optional: Display tax amount for each item \n     \n#     doc.reload()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-11-22 11:01:31.227938",
  "module": "Advantisquartz",
  "name": "GRN Obtain Average Rating",
  "reference_doctype": "Purchase Receipt",
  "script": "# total_rating = 0\n\n# for entry in doc.items:\n#     if entry.item_rating:\n#         total_rating += entry.item_rating\n\n# doc.average_rating = float(total_rating / len(doc.items)) if len(doc.items) else 0\n\ntotal_rating = sum(entry.item_rating for entry in doc.items if entry.item_rating is not None)\ndoc.average_rating = float(total_rating / len(doc.items)) if len(doc.items) else 0\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-11-22 15:32:39.152832",
  "module": "Advantisquartz",
  "name": "booked qty",
  "reference_doctype": "Packing list",
  "script": "if doc.sales_order:\n    item_counts = {}\n    \n    for item in doc.items:\n        item_code = item.item_code\n        if item_code in item_counts:\n            item_counts[item_code] = item_counts[item_code] + 1\n        else:\n            item_counts[item_code] = 1\n        \n    for item_code, count in item_counts.items():\n        qty_sum = frappe.db.get_value('Sales Order Item', filters={'parent': doc.sales_order, \"item_code\": item_code}, fieldname=\"stock_qty\")\n        if qty_sum:\n            produce_qty = round(qty_sum) - count  \n        \n            \n            field_values = {\n            'picked_qty': count,\n            'production_quantity': produce_qty\n            }\n        \n        \n            frappe.db.set_value('Sales Order Item', {\n            'parent': doc.sales_order,\n            'item_code': item_code\n            }, field_values)\n        \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-01-10 11:30:59.471134",
  "module": "Advantisquartz",
  "name": "Get shift time",
  "reference_doctype": "Employee Checkin",
  "script": "Name = doc.name\nemp = doc.employee\ncheckin_time = doc.time\ndayShift_1 = doc.shift\nlog_type = doc.log_type\n\nTime = frappe.utils.get_datetime(checkin_time)\n\ntoday_time = frappe.utils.get_time(checkin_time)\n\ntoday_date = frappe.utils.get_date_str(checkin_time)\ntoday_date_notstr = Time.date()\ntoday = str(today_date_notstr)\n\ndoc.date = today_date_notstr\n\nyesterday_Date = frappe.utils.add_days(today_date, -1)\nyesterday_Date_str = str(yesterday_Date)\n\ntomorrow_date = frappe.utils.add_days(today_date, 1)\ntomorrow_date_str = str(tomorrow_date)\n\ndayData = frappe.db.get_value('Shift Type', dayShift_1, ['start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time','type'])\ndayStart = dayData[0] \ndayEnd = dayData[1]\n\nbefore_start = dayData[2]\nafter_end = dayData[3]\nshift_type = dayData[4]\n\nif shift_type == \"Day\":\n    day_start = today+\" \"+str(dayStart)\n    day_start_formated = frappe.utils.format_datetime(day_start,\"YYYY-MM-dd HH:mm:ss\")\n    day_before = frappe.utils.add_to_date(day_start_formated, minutes=-before_start)\n    Day_Actual_Start = frappe.utils.get_datetime(day_before)\n    # Day_Actual_Start = frappe.utils.format_datetime(day_before,\"YYYY-MM-dd HH:mm:ss\")\n    # Day_Actual_Start = frappe.utils.get_time(day_new_before)\n            \n    day_end = today+\" \"+str(dayEnd)\n    day_end_formatted = frappe.utils.format_datetime(day_end,\"YYYY-MM-dd HH:mm:ss\")\n    day_after = frappe.utils.add_to_date(day_end_formatted, minutes=after_end)\n    Day_Actual_End = frappe.utils.get_datetime(day_after)\n                \n    doc.shift_start = day_start_formated\n    doc.shift_end = day_end_formatted\n    doc.shift_actual_start = Day_Actual_Start\n    doc.shift_actual_end = Day_Actual_End\n                \n    # frappe.msgprint(str(day_start_formated))\n    # frappe.msgprint(str(day_end_formatted))\n    # frappe.msgprint(str(Day_Actual_Start))\n    # frappe.msgprint(str(Day_Actual_End))\n    \nif shift_type == \"Night\":\n    \n    if log_type == \"IN\":\n    \n        day_start = today+\" \"+str(dayStart)\n        day_start_formated = frappe.utils.format_datetime(day_start,\"YYYY-MM-dd HH:mm:ss\")\n        day_before = frappe.utils.add_to_date(day_start_formated, minutes=-before_start)\n        Day_Actual_Start = frappe.utils.get_datetime(day_before)\n        # frappe.msgprint(\"Night\")\n        \n        day_end = tomorrow_date_str+\" \"+str(dayEnd)\n        day_end_formatted = frappe.utils.format_datetime(day_end,\"YYYY-MM-dd HH:mm:ss\")\n        day_after = frappe.utils.add_to_date(day_end_formatted, minutes=after_end)\n        Day_Actual_End = frappe.utils.get_datetime(day_after)\n    \n        doc.shift_start = day_start_formated\n        doc.shift_end = day_end_formatted\n        doc.shift_actual_start = Day_Actual_Start\n        doc.shift_actual_end = Day_Actual_End\n    \n        # frappe.msgprint(str(day_start_formated))\n        # frappe.msgprint(str(day_end_formatted))\n        # frappe.msgprint(str(Day_Actual_Start))\n        # frappe.msgprint(str(Day_Actual_End))\n        \n    elif log_type == \"OUT\":\n        \n        night_record_yesterday_in = frappe.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\":yesterday_Date, \"shift\":dayShift_1, 'log_type':\"IN\"}, fields=['name','shift_start','shift_end','shift_actual_start','shift_actual_end'])\n        \n        \n        if night_record_yesterday_in:\n            doc.shift_start = night_record_yesterday_in[0].shift_start\n            doc.shift_end = night_record_yesterday_in[0].shift_end\n            doc.shift_actual_start = night_record_yesterday_in[0].shift_actual_start\n            doc.shift_actual_end = night_record_yesterday_in[0].shift_actual_end\n    \n\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-09-23 13:30:22.641215",
  "module": "Advantisquartz",
  "name": "Item Naming for finish goods",
  "reference_doctype": "Item",
  "script": "if doc is not None and doc.finish_good_:\n    trimmed_url = \"\"\n    driver=\"\"\n    new_item = \"S-\"+str(doc.finish_good_id)+\"-\"+str(doc.thickness)\n    frappe.rename_doc(\"Item\", doc.name , new_item, merge=False)\n  \n    frappe.response['type'] = 'redirect'\n    frappe.response['location'] = \"/app/item\"\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "tax",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-07-26 10:37:27.704443",
  "module": "Advantisquartz",
  "name": "tax",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"no\"]\n\nresult = frappe.db.sql(\"\"\"\n    SELECT tr.tax_rate\n    FROM `tabItem Tax Template` it\n    JOIN `tabItem Tax Template Detail` tr ON tr.parent = it.name\n    WHERE it.name = %s\n\"\"\", a)\n\n# Extract the tax rates from the result set\ntax_rates = [row[0] for row in result]\n\n# Compute the sum of tax rates\ntotal = sum(tax_rates)\ntotal_2 = str(total)\nfrappe.response[\"total\"]=total_2\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "packing",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-21 17:18:01.261341",
  "module": "Advantisquartz",
  "name": "packing",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"packing_list\"]\n\n# Fetch serial numbers and item codes from the database\nitems = frappe.db.sql(\"\"\"SELECT item_code, serial_no FROM `tabPacking List Item` WHERE parent=%s \"\"\", a)\ncontainer = frappe.db.sql(\"\"\"SELECT item_code, container_no FROM `tabPacking List Item` WHERE parent=%s \"\"\", a)\nitems_serial = frappe.db.sql(\"\"\"SELECT item_code, COUNT(serial_no) AS serial_count  FROM `tabPacking List Item` WHERE parent=%s GROUP BY item_code\"\"\", a)\nsales_order = frappe.db.sql(\"\"\"SELECT sales_order FROM `tabPacking list` WHERE name=%s \"\"\", a)\nsales_length = frappe.db.sql(\"\"\"SELECT pl.item_code AS item_code,pl.sales_length from `tabPacking list` pa join `tabPacking List Item` pl on pa.name = pl.parent where pa.name = %s  \"\"\",a)\nsales_weight = frappe.db.sql(\"\"\"SELECT pl.item_code AS item_code,pl.sales_weight from `tabPacking list` pa join `tabPacking List Item` pl on pa.name = pl.parent where pa.name = %s  \"\"\",a)\nsales_grade = frappe.db.sql(\"\"\"SELECT pl.item_code AS item_code,pl.sales_grade from `tabPacking list` pa join `tabPacking List Item` pl on pa.name = pl.parent where pa.name = %s  \"\"\",a)\nsales_mes_list = frappe.db.sql(\"\"\"\n    SELECT pl.item_code AS item_code, SUM(pl.saleable_measurement) AS total_saleable_measurement\n    FROM `tabPacking list` pa\n    JOIN `tabPacking List Item` pl ON pa.name = pl.parent\n    WHERE pa.name = %s\n    GROUP BY pl.item_code\n\"\"\", a)\n\n\n\n\n# Create a list to store items and their serial numbers\nitem_serial_list = [{\"item_code\": item[0], \"serial_no\": item[1]} for item in items]\nitem_container_list = [{\"item_code\": item[0], \"container_no\": item[1]} for item in container]\nitem_count_list = [{\"item_code\": item[0], \"serial_count\": item[1]} for item in items_serial]\nsales_length_list = [{\"item_code\": item[0], \"sales_length\": item[1]} for item in sales_length]\nsales_weight_list = [{\"item_code\": item[0], \"sales_weight\": item[1]} for item in sales_weight]\nsales_grade_list = [{\"item_code\": item[0], \"sales_grade\": item[1]} for item in sales_grade]\n\n\n# Process item_code and serial_no\nitem_codes = []\nserial_numbers = []\nfor item_serial in item_serial_list:\n    item_code = item_serial[\"item_code\"]\n    serial_no = item_serial[\"serial_no\"]\n\n    if item_code not in item_codes:\n        item_codes.append(item_code)\n        serial_numbers.append([serial_no])\n    else:\n        index = item_codes.index(item_code)\n        serial_numbers[index].append(serial_no)\n\nitem_code_container = []\nitem_code_container_list = []\nfor item_serial in item_container_list:\n    item_code = item_serial[\"item_code\"]\n    container_no = item_serial[\"container_no\"]\n\n    if item_code not in item_code_container:\n        item_code_container.append(item_code)\n        item_code_container_list.append([container_no])\n    else:\n        index = item_code_container.index(item_code)\n        item_code_container_list[index].append(container_no)\n\nserial_length = []\nserial_length_s = []\nfor sales_lenghs in sales_length_list:\n    item_code = sales_lenghs[\"item_code\"]\n    sales_length = sales_lenghs[\"sales_length\"]\n\n    if item_code not in serial_length:\n        serial_length.append(item_code)\n        serial_length_s.append([sales_length])\n    else:\n        index = serial_length.index(item_code)\n        serial_length_s[index].append(sales_length)\n\n# Process item_code and serial_count\nitem_codes_count = []\nserial_numbers_count = []\nfor item_serial in item_count_list:\n    item_code = item_serial[\"item_code\"]\n    serial_count = item_serial[\"serial_count\"]\n\n    if item_code not in item_codes_count:\n        item_codes_count.append(item_code)\n        serial_numbers_count.append([str(serial_count)])  # Convert serial_count to string\n    else:\n        index = item_codes_count.index(item_code)\n        serial_numbers_count[index].append(str(serial_count))  # Convert serial_count to string\n\nserial_weight = []\nserial_weight_s = []\nfor sales_weights in sales_weight_list:\n    item_code = sales_weights[\"item_code\"]\n    sales_weight = sales_weights[\"sales_weight\"]\n\n    if item_code not in serial_weight:\n        serial_weight.append(item_code)\n        serial_weight_s.append([sales_weight])\n    else:\n        index = serial_weight.index(item_code)\n        serial_weight_s[index].append(sales_weight)\n        \nserial_grade = []\nserial_grade_s = []\nfor sales_grades in sales_grade_list:\n    item_code = sales_grades[\"item_code\"]\n    sales_grade = sales_grades[\"sales_grade\"]\n\n    if item_code not in serial_grade:\n        serial_grade.append(item_code)\n        serial_grade_s.append([sales_grade])\n    else:\n        index = serial_grade.index(item_code)\n        serial_grade_s[index].append(sales_grade)\n        \n\nitem1 = \",\".join(str(item) for item in item_codes)\nitem_serial_combined = \",\".join([\"\\n\".join(str(serial) for serial in serials) for serials in serial_numbers])\nitem2 = \",\".join(str(item) for item in item_codes_count)\nitem_serial_combined_count = \",\".join([\",\".join(str(serial) for serial in serials) for serials in serial_numbers_count])\nitem_sales_combined = \",\".join([\"\\n\".join(str(serial) for serial in serials) for serials in serial_length_s])\nitem3 = \",\".join(str(item) for item in serial_length)\nitem_weight_combined = \",\".join([\"\\n\".join(str(serial) for serial in serials) for serials in serial_weight_s])\nitem4 = \",\".join(str(item) for item in serial_weight)\nitem_grade_combined = \",\".join([\"\\n\".join(str(serial) for serial in serials) for serials in serial_grade_s])\nitem5 = \",\".join(str(item) for item in serial_grade)\nitem_container_combined = \",\".join([\"\\n\".join(str(serial) for serial in serials) for serials in item_code_container_list])\nitem6 = \",\".join(str(item) for item in item_code_container)\n# frappe.msgprint(item_container_combined)\n\n\n\n\nsales_order1 = \"\"\nfor sale in sales_order:\n    for order in sale:\n        if sales_order1 == \"\":\n            sales_order1 = order\n\nfrappe.response[\"item_code\"] = item1\nfrappe.response[\"serial_no\"] = item_serial_combined\nfrappe.response[\"sales_order\"] = sales_order1\nfrappe.response[\"item_code1\"] = item2\nfrappe.response[\"serial_count\"] = item_serial_combined_count\nfrappe.response[\"sales_length\"]=item_sales_combined\nfrappe.response[\"item_code2\"] = item3\nfrappe.response[\"item_code3\"]= item4\nfrappe.response[\"sales_weight\"]=item_weight_combined\nfrappe.response[\"item_code4\"] = item5\nfrappe.response[\"sales_grade\"]= item_grade_combined\nfrappe.response[\"item_code5\"] = item6\nfrappe.response[\"container\"] = item_container_combined\nfrappe.response[\"sales_mes_list\"]= sales_mes_list\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-07-21 16:46:16.738716",
  "module": "Advantisquartz",
  "name": "Update GRN status in QC",
  "reference_doctype": "Purchase Receipt",
  "script": "if doc.gate_entry:\n    frappe.db.set_value(\"Gate Entry\",doc.gate_entry,'grn',1);\n    frappe.db.commit",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-07-26 10:40:58.134241",
  "module": "Advantisquartz",
  "name": "Add Purchase receipt item to gate entry",
  "reference_doctype": "Purchase Receipt",
  "script": "if doc.gate_entry: \n    gate_entry = doc.gate_entry\n    gate_doc = frappe.get_doc('Gate Entry', gate_entry)\n    for item in doc.items:\n        if item.linked_to_gate_entry == 0:\n            gate_doc.append(\"stock_item_tab\", {\n                        'item': item.item_code,\n                        'qty': item.qty + item.rejected_qty,\n                        'uom' : item.uom\n                    })\n            item.linked_to_gate_entry = 1\n    doc.save()\n    gate_doc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "receive_qty",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-09-18 18:36:36.948147",
  "module": "Advantisquartz",
  "name": "receive_qty",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"item_code\"]\nb = frappe.form_dict[\"purchase\"]\n\nif b:\n    receive = frappe.db.sql(\"\"\"\n        SELECT tr.received_qty\n        FROM `tabPurchase Order` it\n        JOIN `tabPurchase Order Item` tr ON tr.parent = it.name\n        WHERE it.name = %s AND tr.item_code = %s\n    \"\"\", (b, a))  # Pass parameters as a tuple (b, a) to fill the placeholders\n\nreceive1 = \"\"\n\n\nfor a in receive:\n    for b in a:\n        if receive1 == \"\":\n            receive1 = b\n        else:\n            receive1 = f'{receive1}{\",\"}{b}'\nreceive2 = str(receive1)\n            \nfrappe.response[\"receive\"] = receive2\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "serial",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-02 12:04:43.461331",
  "module": "Advantisquartz",
  "name": "serial",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"serial_name\"]\n\nitem_code = frappe.db.sql('SELECT item_code FROM `tabSerial No` where name=%s', a,as_dict=True)\nitem_name = frappe.db.sql('SELECT item_name FROM `tabSerial No` where name=%s', a,as_dict=True)\ngross_weight = frappe.db.sql('SELECT gross_weight FROM `tabSerial No` where name=%s', a,as_dict=True)\nlength = frappe.db.sql('SELECT length FROM `tabSerial No` where name=%s', a,as_dict=True)\nwidth = frappe.db.sql('SELECT width FROM `tabSerial No` where name=%s', a,as_dict=True)\nquality =frappe.db.sql('SELECT quality FROM `tabSerial No` where name=%s ', a,as_dict=True)\ncustom_batch_no = frappe.db.sql('SELECT custom_batch_no FROM `tabSerial No` where name=%s ', a,as_dict=True)\nfrappe.response['name'] = a\nfrappe.response['item_code'] = item_code[0]['item_code']\nfrappe.response['item_name'] = item_name[0]['item_name']\nfrappe.response['gross_weight'] = gross_weight[0]['gross_weight']\nfrappe.response['length'] = length[0]['length']\nfrappe.response['width'] = width[0]['width']\nfrappe.response['quality'] = quality[0]['quality']\nfrappe.response['custom_batch_no']=custom_batch_no[0]['custom_batch_no']",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "serial_batch",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-02 18:26:55.521983",
  "module": "Advantisquartz",
  "name": "serial_batch",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"serial\"]\n\nlot_no = frappe.db.sql(\"\"\"SELECT custom_batch_no FROM `tabSerial No` WHERE name=%s \"\"\", a)\nlot_no1 = \"\"\n\nfor lot in lot_no:\n    for no_lot in lot:\n        if lot_no1 == \"\":\n            lot_no1 = no_lot\n    \nfrappe.msgprint(a)\nfrappe.msgprint(lot_no1)\nfrappe.response[\"lot_no\"] = lot_no1\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "purchase",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-02 19:30:36.008511",
  "module": "Advantisquartz",
  "name": "purchase",
  "reference_doctype": null,
  "script": "a =  frappe.form_dict[\"supplier_quotation\"]\nif(a):\n    request = frappe.db.sql(\"select sqi.request_for_quotation from `tabSupplier Quotation` sq join `tabSupplier Quotation Item` sqi on sq.name = sqi.parent where sq.name = %s\",a, as_dict=True)\n    frappe.response[\"request\"]=request[0]['request_for_quotation']",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-08-16 13:15:45.160789",
  "module": "Advantisquartz",
  "name": "Leave Allocation",
  "reference_doctype": null,
  "script": "'advantisquartz.advantisquartz.doctype.api.generate_leave_allocation'\n\n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-09-23 11:19:28.554184",
  "module": "Advantisquartz",
  "name": "QC Link To gate Entry",
  "reference_doctype": "Quality Inspection",
  "script": "if doc.reference_type == \"Purchase Receipt\":\n    gate_entry = frappe.db.get_value(\"Purchase Receipt\",doc.reference_name,'gate_entry')\n    if gate_entry:\n        parent = frappe.get_doc('Gate Entry', gate_entry)\n        parent.append(\"qc_details\", {\n                'qc': doc.name,\n                'item_name': doc.item_name,\n                'qc_status' : doc.status,\n                'qc_date' : doc.report_date,\n                'qc_time': '',\n                'inspected_by': doc.inspected_by,\n                'qc_remarks' : doc.remarks,\n                'sample_size': str(doc.sample_size) +\" \"+ str(doc.sample_uom),\n        }) \n        if (parent.lock_quality_inspection == 0 ):\n            parent.lock_quality_inspection = 1 \n        parent.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-09-18 18:59:25.549257",
  "module": "Advantisquartz",
  "name": "purchase qty",
  "reference_doctype": "Purchase Receipt",
  "script": "for item in doc.items:\n    # Get the qty field value from the Purchase Order's child table\n    qty = frappe.db.get_value('Purchase Order Item', filters={'parent': item.purchase_order, 'item_code': item.item_code}, fieldname='received_qty')\n    \n    # Do something with the 'qty' value\n    item.po_received_qty = qty",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "get_mm_child",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-09-25 19:02:12.893323",
  "module": "Advantisquartz",
  "name": "Get Machine Maintenance child",
  "reference_doctype": null,
  "script": "mach =  str(frappe.form_dict['mach'])\n\nquery = f\"SELECT * FROM `tabMachine Maintenance Item` WHERE parent = %s and status = %s \"\nresult = frappe.db.sql(query, (mach,'Returnable',), as_dict=True)\n    # frappe.msgprint(result[0].item_name)\nfrappe.response['result'] = result ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-10-12 18:08:51.469730",
  "module": "Advantisquartz",
  "name": "gatepass",
  "reference_doctype": "GatePass",
  "script": "if doc.select_type == \"Visitor\":\n    owner_name = frappe.frappe.session.user\n    doc.approved_by = owner_name\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-01-08 15:23:40.274703",
  "module": "Advantisquartz",
  "name": "Batch Create Auto",
  "reference_doctype": "Stock Entry",
  "script": "for item in doc.items:\n    if item.is_finished_item == 1:\n        frappe.get_doc(dict(\n                doctype = 'Batch',\n       \t        batch_id = item.batch_no,\n                item = item.item_code    )).insert()\n\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-01-09 17:30:09.243145",
  "module": "Advantisquartz",
  "name": "Get Overtime",
  "reference_doctype": "Attendance",
  "script": "in_time = str(doc.in_time)\nout_time = str(doc.out_time)\nshift_name = doc.shift\nattendance_name = doc.name\n# frappe.msgprint(in_time)\n# frappe.msgprint(out_time)\n# frappe.msgprint(shift_name)\n# frappe.msgprint(attendance_name)\n\n# For splitting time from in_time and out_time\ntry:\n    new_in_time=in_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_in_time = ''\n    \n    \ntry:\n    new_out_time=out_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_out_time = ''\n    \n    \n# For getting shift hours\nshift_Hour = frappe.db.get_value('Shift Type', shift_name, ['custom_shift_hours'])\nshift_Hour_Str = str(shift_Hour)\n# frappe.msgprint(shift_Hour_Str)\n\n#For calculation of Overtime\nif new_in_time and new_out_time:\n    \n    \n    WorkHours = frappe.utils.time_diff(new_out_time, new_in_time)\n    WorkHours_Str = str(WorkHours)\n    # frappe.msgprint(WorkHours_Str)\n    final_wh_new = frappe.utils.format_time(WorkHours_Str,'H.m')\n    # frappe.msgprint(str(final_wh_new))\n    frappe.db.set_value('Attendance', attendance_name, 'custom_work_hours', final_wh_new)\n    \n    if WorkHours > shift_Hour:\n        diff = frappe.utils.time_diff(WorkHours_Str, shift_Hour_Str)\n        final_OT = frappe.utils.format_time(diff,'H.m')\n        # frappe.msgprint(str(diff))\n        # frappe.msgprint(str(final_OT))\n        frappe.db.set_value('Attendance', attendance_name, 'custom_overtime', final_OT)\n        \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-01-10 13:56:29.311518",
  "module": "Advantisquartz",
  "name": "batch no. auto create",
  "reference_doctype": "Stock Entry",
  "script": "if doc.is_new():\n    for item in doc.items:\n        if item.is_finished_item == 1:\n            batch_list = frappe.db.get_list('Batch', filters={'item': item.item_code}, fields=['batch_id'], as_list=True)\n            frappe.msgprint(\"Batch List: \" + str(batch_list))\n            batch = frappe.db.get_value(\"Work Order\", doc.work_order, fieldname='lot_no')\n            \n\n            if batch not in [i[0] for i in batch_list]:\n                \n                new_batch = frappe.get_doc({\n                    'doctype': 'Batch',\n                    'batch_id': batch,\n                    'item': item.item_code\n                })\n                new_batch.insert()\n            item.batch_no = batch\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-01-12 11:26:14.700220",
  "module": "Advantisquartz",
  "name": "Change Status",
  "reference_doctype": "Delivery Note",
  "script": "if doc.docstatus == 2:\n        packing_list_name = doc.packing_scanner\n        if packing_list_name:\n            packing_list_doc = frappe.get_doc('Packing list', packing_list_name)\n            \n            for item in packing_list_doc.items:\n                serial_nos = item.get('serial_no', '').split('\\n')\n                for serial_no in serial_nos:\n                    if serial_no:\n                        frappe.db.set_value('Serial No', serial_no, 'status', 'Hold')\n            \n            frappe.db.set_value('Packing list', packing_list_name, 'delivered', 0)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Delete",
  "event_frequency": "All",
  "modified": "2024-01-12 11:26:03.157914",
  "module": "Advantisquartz",
  "name": "Change status serial no after delete item",
  "reference_doctype": "Packing list",
  "script": "if doc.docstatus == 0:\n    for item in doc.items:\n        serial_no = item.serial_no  # Get serial number from the item\n        if serial_no:\n            # Fetch the status of the serial number from 'Serial No' doctype\n            serial_doc = frappe.get_doc('Serial No', serial_no)\n            # frappe.msgprint(message)\n            for item in serial_doc.name:\n                status = serial_doc.packing_list\n    \n                # Display the serial number and its status using msgprint\n                message = f\"Serial No: {serial_no}, Status: {status}\"\n                # frappe.db.set_value('Serial No', serial_no, 'packing_list' ,doc.name)\n                frappe.db.set_value('Serial No', serial_no, {'status': 'Active', 'packing_list': ''})\n\n                \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "set_submit",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-01-19 10:54:19.170775",
  "module": "Advantisquartz",
  "name": "Submit Machine Maintenance Log",
  "reference_doctype": "Machine Maintenance Log",
  "script": "reference_name = frappe.form_dict[\"reference_name\"]\n\nmachine_maintenance_logs = frappe.get_list(\n    'Machine Maintenance Log',\n    filters={\n        'machine_maintenance_schedule': reference_name,\n        'maintenance_status': 'Planned'\n    },\n    fields=['name']\n)\n\nfor log in machine_maintenance_logs:\n    machine_maintenance_log = frappe.get_doc('Machine Maintenance Log', log['name'])\n\n    machine_maintenance_log.completion_date = frappe.utils.today()\n    machine_maintenance_log.maintenance_status = 'Completed'\n\n    machine_maintenance_log.submit()\n\nfrappe.response[\"reference_name\"] = reference_name\n",
  "script_type": "API"
 }
]