[
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-08-09 12:55:59.871068",
  "module": "Advantisquartz",
  "name": "Link QC to Gate entry On submit Purchase Receipt Enabled",
  "reference_doctype": "Purchase Receipt",
  "script": "# qc_list = frappe.db.get_list('Purchase Receipt Item',filters={'parent': f'{name}'}, fields=['quality_inspection'])\nif doc.gate_entry:  \n    gate_entry = doc.gate_entry\n    parent = frappe.get_doc('Gate Entry', gate_entry)\n    for l in doc.items:\n        if l.qc_done == 0:\n            qc_data = frappe.db.get_value('Quality Inspection', l.quality_inspection,['item_name', 'status','report_date','sample_size','sample_uom','inspected_by','remarks'], as_dict=1)\n            parent.append(\"qc_details\", {\n                'qc': l.quality_inspection,\n                'item_name': qc_data.item_name,\n                'qc_status' : qc_data.status,\n                'qc_date' : qc_data.report_date,\n                'qc_time': '',\n                'inspected_by': qc_data.inspected_by,\n                'qc_remarks' : qc_data.remarks,\n                'sample_size': str(qc_data.sample_size) +\" \"+ str(qc_data.sample_uom),\n            })\n    if (parent.lock_quality_inspection == 0 ):\n        parent.lock_quality_inspection = 1        \n    parent.save()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "tax",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-07-26 10:37:27.704443",
  "module": "Advantisquartz",
  "name": "tax",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"no\"]\n\nresult = frappe.db.sql(\"\"\"\n    SELECT tr.tax_rate\n    FROM `tabItem Tax Template` it\n    JOIN `tabItem Tax Template Detail` tr ON tr.parent = it.name\n    WHERE it.name = %s\n\"\"\", a)\n\n# Extract the tax rates from the result set\ntax_rates = [row[0] for row in result]\n\n# Compute the sum of tax rates\ntotal = sum(tax_rates)\ntotal_2 = str(total)\nfrappe.response[\"total\"]=total_2\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "packing",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-31 16:33:42.539857",
  "module": "Advantisquartz",
  "name": "packing",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"packing_list\"]\n\n# Fetch serial numbers and item codes from the database\nitems = frappe.db.sql(\"\"\"SELECT item_code, serial_no FROM `tabPacking List Item` WHERE parent=%s \"\"\", a)\ncontainer = frappe.db.sql(\"\"\"SELECT item_code, container_no FROM `tabPacking List Item` WHERE parent=%s \"\"\", a)\nitems_serial = frappe.db.sql(\"\"\"SELECT item_code, COUNT(serial_no) AS serial_count  FROM `tabPacking List Item` WHERE parent=%s GROUP BY item_code\"\"\", a)\nsales_order = frappe.db.sql(\"\"\"SELECT sales_order FROM `tabPacking list` WHERE name=%s \"\"\", a)\nsales_length = frappe.db.sql(\"\"\"SELECT pl.item_code AS item_code,pl.sales_length from `tabPacking list` pa join `tabPacking List Item` pl on pa.name = pl.parent where pa.name = %s  \"\"\",a)\nsales_weight = frappe.db.sql(\"\"\"SELECT pl.item_code AS item_code,pl.sales_weight from `tabPacking list` pa join `tabPacking List Item` pl on pa.name = pl.parent where pa.name = %s  \"\"\",a)\nsales_grade = frappe.db.sql(\"\"\"SELECT pl.item_code AS item_code,pl.sales_grade from `tabPacking list` pa join `tabPacking List Item` pl on pa.name = pl.parent where pa.name = %s  \"\"\",a)\n\n# Create a list to store items and their serial numbers\nitem_serial_list = [{\"item_code\": item[0], \"serial_no\": item[1]} for item in items]\nitem_container_list = [{\"item_code\": item[0], \"container_no\": item[1]} for item in container]\nitem_count_list = [{\"item_code\": item[0], \"serial_count\": item[1]} for item in items_serial]\nsales_length_list = [{\"item_code\": item[0], \"sales_length\": item[1]} for item in sales_length]\nsales_weight_list = [{\"item_code\": item[0], \"sales_weight\": item[1]} for item in sales_weight]\nsales_grade_list = [{\"item_code\": item[0], \"sales_grade\": item[1]} for item in sales_grade]\n\n# Process item_code and serial_no\nitem_codes = []\nserial_numbers = []\nfor item_serial in item_serial_list:\n    item_code = item_serial[\"item_code\"]\n    serial_no = item_serial[\"serial_no\"]\n\n    if item_code not in item_codes:\n        item_codes.append(item_code)\n        serial_numbers.append([serial_no])\n    else:\n        index = item_codes.index(item_code)\n        serial_numbers[index].append(serial_no)\n\nitem_code_container = []\nitem_code_container_list = []\nfor item_serial in item_container_list:\n    item_code = item_serial[\"item_code\"]\n    container_no = item_serial[\"container_no\"]\n\n    if item_code not in item_code_container:\n        item_code_container.append(item_code)\n        item_code_container_list.append([container_no])\n    else:\n        index = item_code_container.index(item_code)\n        item_code_container_list[index].append(container_no)\n\nserial_length = []\nserial_length_s = []\nfor sales_lenghs in sales_length_list:\n    item_code = sales_lenghs[\"item_code\"]\n    sales_length = sales_lenghs[\"sales_length\"]\n\n    if item_code not in serial_length:\n        serial_length.append(item_code)\n        serial_length_s.append([sales_length])\n    else:\n        index = serial_length.index(item_code)\n        serial_length_s[index].append(sales_length)\n\n# Process item_code and serial_count\nitem_codes_count = []\nserial_numbers_count = []\nfor item_serial in item_count_list:\n    item_code = item_serial[\"item_code\"]\n    serial_count = item_serial[\"serial_count\"]\n\n    if item_code not in item_codes_count:\n        item_codes_count.append(item_code)\n        serial_numbers_count.append([str(serial_count)])  # Convert serial_count to string\n    else:\n        index = item_codes_count.index(item_code)\n        serial_numbers_count[index].append(str(serial_count))  # Convert serial_count to string\n\nserial_weight = []\nserial_weight_s = []\nfor sales_weights in sales_weight_list:\n    item_code = sales_weights[\"item_code\"]\n    sales_weight = sales_weights[\"sales_weight\"]\n\n    if item_code not in serial_weight:\n        serial_weight.append(item_code)\n        serial_weight_s.append([sales_weight])\n    else:\n        index = serial_weight.index(item_code)\n        serial_weight_s[index].append(sales_weight)\n        \nserial_grade = []\nserial_grade_s = []\nfor sales_grades in sales_grade_list:\n    item_code = sales_grades[\"item_code\"]\n    sales_grade = sales_grades[\"sales_grade\"]\n\n    if item_code not in serial_grade:\n        serial_grade.append(item_code)\n        serial_grade_s.append([sales_grade])\n    else:\n        index = serial_grade.index(item_code)\n        serial_grade_s[index].append(sales_grade)\n\n\nitem1 = \",\".join(item_codes)\nitem_serial_combined = \",\".join([\"\\n\".join( serials) for serials in serial_numbers])\n\nitem2 = \",\".join(item_codes_count)\nitem_serial_combined_count = \",\".join([\",\".join(serials) for serials in serial_numbers_count])\n\nitem_sales_combined = \",\".join([\"\\n\".join( serials) for serials in serial_length_s])\nitem3 = \",\".join(serial_length)\n\nitem_weight_combined = \",\".join([\"\\n\".join( serials) for serials in serial_weight_s])\nitem4 = \",\".join(serial_weight)\n\nitem_grade_combined = \",\".join([\"\\n\".join( serials) for serials in serial_grade_s])\nitem5 = \",\".join(serial_grade)\n\nitem_container_combined = \",\".join([\"\\n\".join(serials) for serials in item_code_container_list])\nitem6 = \",\".join(item_code_container)\nfrappe.msgprint(item_container_combined)\n\n\n\n\nsales_order1 = \"\"\nfor sale in sales_order:\n    for order in sale:\n        if sales_order1 == \"\":\n            sales_order1 = order\n\nfrappe.response[\"item_code\"] = item1\nfrappe.response[\"serial_no\"] = item_serial_combined\nfrappe.response[\"sales_order\"] = sales_order1\nfrappe.response[\"item_code1\"] = item2\nfrappe.response[\"serial_count\"] = item_serial_combined_count\nfrappe.response[\"sales_length\"]=item_sales_combined\nfrappe.response[\"item_code2\"] = item3\nfrappe.response[\"item_code3\"]= item4\nfrappe.response[\"sales_weight\"]=item_weight_combined\nfrappe.response[\"item_code4\"] = item5\nfrappe.response[\"sales_grade\"]= item_grade_combined\nfrappe.response[\"item_code5\"] = item6\nfrappe.response[\"container\"] = item_container_combined\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-07-21 16:46:16.738716",
  "module": "Advantisquartz",
  "name": "Update GRN status in QC",
  "reference_doctype": "Purchase Receipt",
  "script": "if doc.gate_entry:\n    frappe.db.set_value(\"Gate Entry\",doc.gate_entry,'grn',1);\n    frappe.db.commit",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-07-26 10:40:58.134241",
  "module": "Advantisquartz",
  "name": "Add Purchase receipt item to gate entry",
  "reference_doctype": "Purchase Receipt",
  "script": "if doc.gate_entry: \n    gate_entry = doc.gate_entry\n    gate_doc = frappe.get_doc('Gate Entry', gate_entry)\n    for item in doc.items:\n        if item.linked_to_gate_entry == 0:\n            gate_doc.append(\"stock_item_tab\", {\n                        'item': item.item_code,\n                        'qty': item.qty + item.rejected_qty,\n                        'uom' : item.uom\n                    })\n            item.linked_to_gate_entry = 1\n    doc.save()\n    gate_doc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "receive_qty",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-07-31 11:51:01.325817",
  "module": "Advantisquartz",
  "name": "receive_qty",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"item_code\"]\nb = frappe.form_dict[\"purchase\"]\nfrappe.msgprint(a)\nfrappe.msgprint(b)\nif b:\n    receive = frappe.db.sql(\"\"\"\n        SELECT tr.received_qty\n        FROM `tabPurchase Order` it\n        JOIN `tabPurchase Order Item` tr ON tr.parent = it.name\n        WHERE it.name = %s AND tr.item_code = %s\n    \"\"\", (b, a))  # Pass parameters as a tuple (b, a) to fill the placeholders\n\nreceive1 = \"\"\nfor row in receive:  # Iterate through rows of the result\n    for val in row:  # Iterate through columns of each row\n        if receive1 == \"\":\n            receive1 = str(val)\n        else:\n            receive1 = f\"{receive1},{val}\"\n\nfrappe.response[\"receive\"] = receive1\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "serial",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-02 12:04:43.461331",
  "module": "Advantisquartz",
  "name": "serial",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"serial_name\"]\n\nitem_code = frappe.db.sql('SELECT item_code FROM `tabSerial No` where name=%s', a,as_dict=True)\nitem_name = frappe.db.sql('SELECT item_name FROM `tabSerial No` where name=%s', a,as_dict=True)\ngross_weight = frappe.db.sql('SELECT gross_weight FROM `tabSerial No` where name=%s', a,as_dict=True)\nlength = frappe.db.sql('SELECT length FROM `tabSerial No` where name=%s', a,as_dict=True)\nwidth = frappe.db.sql('SELECT width FROM `tabSerial No` where name=%s', a,as_dict=True)\nquality =frappe.db.sql('SELECT quality FROM `tabSerial No` where name=%s ', a,as_dict=True)\ncustom_batch_no = frappe.db.sql('SELECT custom_batch_no FROM `tabSerial No` where name=%s ', a,as_dict=True)\nfrappe.response['name'] = a\nfrappe.response['item_code'] = item_code[0]['item_code']\nfrappe.response['item_name'] = item_name[0]['item_name']\nfrappe.response['gross_weight'] = gross_weight[0]['gross_weight']\nfrappe.response['length'] = length[0]['length']\nfrappe.response['width'] = width[0]['width']\nfrappe.response['quality'] = quality[0]['quality']\nfrappe.response['custom_batch_no']=custom_batch_no[0]['custom_batch_no']",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "serial_batch",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-02 18:26:55.521983",
  "module": "Advantisquartz",
  "name": "serial_batch",
  "reference_doctype": null,
  "script": "a = frappe.form_dict[\"serial\"]\n\nlot_no = frappe.db.sql(\"\"\"SELECT custom_batch_no FROM `tabSerial No` WHERE name=%s \"\"\", a)\nlot_no1 = \"\"\n\nfor lot in lot_no:\n    for no_lot in lot:\n        if lot_no1 == \"\":\n            lot_no1 = no_lot\n    \nfrappe.msgprint(a)\nfrappe.msgprint(lot_no1)\nfrappe.response[\"lot_no\"] = lot_no1\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "purchase",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-02 19:30:36.008511",
  "module": "Advantisquartz",
  "name": "purchase",
  "reference_doctype": null,
  "script": "a =  frappe.form_dict[\"supplier_quotation\"]\nif(a):\n    request = frappe.db.sql(\"select sqi.request_for_quotation from `tabSupplier Quotation` sq join `tabSupplier Quotation Item` sqi on sq.name = sqi.parent where sq.name = %s\",a, as_dict=True)\n    frappe.response[\"request\"]=request[0]['request_for_quotation']",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-08-16 13:15:45.160789",
  "module": "Advantisquartz",
  "name": "Leave Allocation",
  "reference_doctype": null,
  "script": "'advantisquartz.advantisquartz.doctype.api.generate_leave_allocation'\n\n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-08-10 10:44:56.222609",
  "module": "Advantisquartz",
  "name": "QC Link To gate Entry",
  "reference_doctype": "Quality Inspection",
  "script": "if doc.reference_type == \"Purchase Receipt\":\n    ref_doc = doc.reference_name\n    gate_entry = frappe.db.get_value(\"Purchase Receipt\",ref_doc,'gate_entry')\n    parent = frappe.get_doc('Gate Entry', gate_entry)\n    parent.append(\"qc_details\", {\n            'qc': doc.name,\n            'item_name': doc.item_name,\n            'qc_status' : doc.status,\n            'qc_date' : doc.report_date,\n            'qc_time': '',\n            'inspected_by': doc.inspected_by,\n            'qc_remarks' : doc.remarks,\n            'sample_size': str(doc.sample_size) +\" \"+ str(doc.sample_uom),\n    }) \n    if (parent.lock_quality_inspection == 0 ):\n        parent.lock_quality_inspection = 1 \n    parent.save()",
  "script_type": "DocType Event"
 }
]