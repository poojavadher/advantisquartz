[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No Update",
  "enabled": 1,
  "modified": "2023-07-19 12:32:01.620181",
  "module": "Advantisquartz",
  "name": "Serial No Update",
  "script": "frappe.ui.form.on('Serial No Update', {\n\ton_submit:function(frm) {\n\t\n\t        $.each(frm.doc.press_item || [], function(i, d) {\n            var serial = d.serial_no;\n            console.log(serial);\n            var batch_no = d.batch_no;\n            console.log(batch_no);\n            var select_type = d.select_type;\n            console.log(select_type);\n            \n\t\t  frappe.db.set_value('Serial No',serial, {\n                'serial_no_type': select_type,\n                'custom_batch_no':batch_no\n            });\n\t    }); \n\t    \n\t   \n\t  \n\t}\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gate Entry",
  "enabled": 1,
  "modified": "2023-07-24 14:53:15.423614",
  "module": "Advantisquartz",
  "name": "Lock Field",
  "script": "function checkLock(frm) {\n  const allFields = ['naming_series', 'entry_type', 'purpose', 'invoice_no', 'invoice_date', 'stock_item_tab', 'driver_name', 'driver_mobile_no', 'truck_no'];\n\n  const isLocked = frm.doc.lock_fields;\n  for (const field of allFields) {\n    frm.set_df_property(field, 'read_only', isLocked);\n  }\n\n  if (frm.doc.entry_type === 'Inward') {\n    frm.set_df_property('purpose', 'reqd', !isLocked);\n    frm.set_df_property('driver_name', 'reqd', !isLocked);\n    frm.set_df_property('driver_mobile_no', 'reqd', !isLocked);\n    frm.set_df_property('truck_no', 'reqd', !isLocked);\n    frm.set_df_property('invoice_no', 'reqd', !isLocked);\n    frm.set_df_property('invoice_date', 'reqd', !isLocked);\n  } else if (frm.doc.entry_type === 'Outward') {\n    frm.set_df_property('purpose', 'reqd', !isLocked);\n    frm.set_df_property('driver_name', 'reqd', !isLocked);\n    frm.set_df_property('driver_mobile_no', 'reqd', !isLocked);\n    frm.set_df_property('truck_no', 'reqd', !isLocked);\n    frm.set_df_property('invoice_no', 'reqd', false);\n    frm.set_df_property('invoice_date', 'reqd', false);\n  } else {\n    frm.set_df_property('entry_type', 'reqd', !isLocked);\n  }\n}\n\nfunction toggleWeightLock(frm) {\n  const isWeightInChecked = frm.doc.is_weight_in;\n  const isLockWeightChecked = frm.doc.lock_weight;\n\n  if (isWeightInChecked && isLockWeightChecked) {\n    frm.set_df_property('uom', 'read_only', true);\n    frm.set_df_property('weight_in', 'read_only', true);\n     frm.set_df_property('is_weight_in', 'read_only', true);\n  } else if (!isWeightInChecked && isLockWeightChecked) {\n    frm.set_df_property('uom', 'read_only', true);\n    frm.set_df_property('weight_in', 'read_only', false);\n     frm.set_df_property('is_weight_in', 'read_only', true);\n  } else {\n    frm.set_df_property('uom', 'read_only', false);\n    frm.set_df_property('weight_in', 'read_only', isLockWeightChecked);\n    frm.set_df_property('is_weight_in', 'read_only', isLockWeightChecked);\n  }\n}\n\nfunction toggleSamplingLock(frm) {\n  const isSamplingDoneChecked = frm.doc.sampling_done;\n  const isLockSamplingChecked = frm.doc.lock_sampling;\n  const isSamplingPersonNameReadOnly = isSamplingDoneChecked && isLockSamplingChecked;\n  frm.set_df_property('sampling_person_name', 'read_only', isSamplingPersonNameReadOnly);\n  frm.set_df_property('sampling_done', 'read_only', isSamplingPersonNameReadOnly);\n}\n\n\nfunction toggleQualityLock(frm) {\n  const isLockQualityInspectionChecked = frm.doc.lock_quality_inspection;\n  frm.set_df_property('qc_details', 'read_only', isLockQualityInspectionChecked);\n  frm.set_df_property('grn', 'read_only', isLockQualityInspectionChecked);\n}\n\n\nfunction toggleunloadLock(frm) {\n  const isUnloadedChecked = frm.doc.is_unloaded;\n  const isLockUnloadDetailsChecked = frm.doc.lock_unload_details;\n  const isUnloadingPersonReadOnly = isUnloadedChecked && isLockUnloadDetailsChecked;\n  frm.set_df_property('unloading_person', 'read_only', isUnloadingPersonReadOnly);\n  frm.set_df_property('is_unloaded', 'read_only', isUnloadingPersonReadOnly);\n}\n\nfunction toggleWeightOutLock(frm) {\n  const isWeightOutChecked = frm.doc.is_weight_out;\n  const isLockWeightOutDetailsChecked = frm.doc.lock_weight_out_details;\n  const isWeightOutReadOnly = isWeightOutChecked && isLockWeightOutDetailsChecked;\n  frm.set_df_property('weight_out', 'read_only', isWeightOutReadOnly);\n  frm.set_df_property('net_weight', 'read_only', isWeightOutReadOnly);\n  frm.set_df_property('is_weight_out', 'read_only', isWeightOutReadOnly);\n}\n\nfrappe.ui.form.on('Gate Entry', {\n  onload(frm) {\n    checkLock(frm);\n  },\n\n  lock_fields(frm) {\n    checkLock(frm);\n  },\n\n  entry_type(frm) {\n    checkLock(frm);\n  },\n\n  purpose(frm) {\n    checkLock(frm);\n  },\n\n  truck_no(frm) {\n    checkLock(frm);\n  },\n\n  is_weight_in(frm) {\n    toggleWeightLock(frm);\n\n    if (!frm.doc.is_weight_in) {\n      frm.set_value('lock_weight', false);\n    } else {\n      frm.set_value('lock_weight', false);\n    }\n  },\n\n  lock_weight(frm) {\n    toggleWeightLock(frm);\n  },\n  \n   refresh(frm) {\n    checkLock(frm);\n\n    if (!frm.is_new() && (!frappe.user.has_role('System Manager') || !frappe.user.has_role('Accounts Manager'))) {\n      frm.set_df_property('lock_fields', 'read_only', true);\n      frm.set_df_property('is_weight_in', 'read_only', true);\n      frm.set_df_property('lock_weight', 'read_only', true);\n      frm.set_df_property('sampling_done', 'read_only', true);\n      frm.set_df_property('lock_sampling', 'read_only', true);\n      frm.set_df_property('is_unloaded', 'read_only', true);\n      frm.set_df_property('lock_unload_details', 'read_only', true);\n      frm.set_df_property('is_weight_out', 'read_only', true);\n      frm.set_df_property('lock_weight_out_details', 'read_only', true);\n      frm.set_df_property('lock_quality_inspection', 'read_only', true);\n    }\n  },\n  \n  sampling_done(frm) {\n    toggleSamplingLock(frm);\n  },\n\n  lock_sampling(frm) {\n    toggleSamplingLock(frm);\n  },\n\n  is_unloaded(frm) {\n    toggleunloadLock(frm);\n  },\n\n  lock_unload_details(frm) {\n    toggleunloadLock(frm);\n  },\n  \n   lock_weight_out_details(frm) {\n    toggleWeightOutLock(frm);\n  },\n\n  is_unloaded(frm) {\n    toggleWeightOutLock(frm);\n  },\n  \n   lock_quality_inspection(frm) {\n    toggleQualityLock(frm);\n  },\n  \n  after_save(frm) {\n    if (frappe.user.has_role('System Manager') || frappe.user.has_role('Accounts Manager')) {\n     frm.set_df_property('lock_fields', 'read_only', false);\n      frm.set_df_property('lock_weight', 'read_only', false);\n      frm.set_df_property('lock_sampling', 'read_only', false);\n      frm.set_df_property('lock_unload_details', 'read_only', false);\n      frm.set_df_property('lock_weight_out_details', 'read_only', false);\n      frm.set_df_property('lock_quality_inspection', 'read_only', false);\n    } else {\n      frm.set_df_property('lock_fields', 'read_only', true);\n      frm.set_df_property('is_weight_in', 'read_only', true);\n      frm.set_df_property('lock_weight', 'read_only', true);\n      frm.set_df_property('sampling_done', 'read_only', true);\n      frm.set_df_property('lock_sampling', 'read_only', true);\n      frm.set_df_property('is_unloaded', 'read_only', true);\n      frm.set_df_property('lock_unload_details', 'read_only', true);\n      frm.set_df_property('is_weight_out', 'read_only', true);\n      frm.set_df_property('lock_weight_out_details', 'read_only', true);\n      frm.set_df_property('lock_quality_inspection', 'read_only', true);\n    }\n    \n  },\n\n  before_save(frm) {\n    if (frm.fields_dict.lock_fields && frm.fields_dict.lock_fields.$wrapper.is(':visible')) {\n      if (!frm.doc.lock_fields) {\n         if (!frappe.user.has_role('System Manager') || !frappe.user.has_role('Accounts Manager')) {\n        frappe.throw('Cannot save when \"Lock Fields\" is unchecked. Please select the checkbox.');\n          }\n      }\n    }\n    if (!frappe.user.has_role('System Manager') && !frappe.user.has_role('Accounts Manager')) {\n    if (!frm.doc.lock_weight && (frm.doc.uom || frm.doc.weight_in)) {\n      frappe.msgprint('Cannot save when \"Lock Weight\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else if (!frm.doc.lock_sampling && frm.doc.sampling_person_name ) {\n      frappe.msgprint('Cannot save when \"Lock Sampling\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else  if (!frm.doc.lock_quality_inspection && (frm.doc.qc_details || frm.doc.grn)) {\n      frappe.msgprint('Cannot save when \"Lock Quality Inspection\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else  if (!frm.doc.lock_unload_details && frm.doc.unloading_person ) {\n      frappe.msgprint('Cannot save when \"Lock Unload Details\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else  if (!frm.doc.lock_weight_out_details && (frm.doc.weight_out || frm.doc.net_weight)) {\n      frappe.msgprint('Cannot save when \"Lock Weight Out Details\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n  }\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No Update Field",
  "enabled": 1,
  "modified": "2023-07-12 12:55:10.353430",
  "module": "Advantisquartz",
  "name": "Serial no child",
  "script": "frappe.ui.form.on('Serial No Update Field', {\n    on_submit: function(frm) {\n        frm.refresh();\n\n        $.each(frm.doc.serial_no_child || [], function(i, d) {\n            var serial = d.serial_no;\n            console.log(serial);\n            var gross = d.gross_weight;\n            console.log(gross);\n            var grade = d.grade;\n            console.log(grade);\n            \n            // Update fields in 'Serial No' document\n            frappe.db.set_value('Serial No', serial, {\n                '_serial_no_quality': grade,\n                'gross_weight': gross\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2023-07-19 12:31:38.951404",
  "module": "Advantisquartz",
  "name": "Serial No Interface",
  "script": "frappe.ui.form.on('Stock Entry', {\n  refresh: function(frm) {\n    frm.set_query('product_type', function() {\n      return {\n        options: 'Semi Finished Item\\nFinished Item'\n      };\n    });\n\n    // Triggered when the form is loaded\n    frm.add_custom_button(__('Update Serial No'), function() {\n      // Function to open the dialog box\n      showDialog(frm);\n    });\n  }\n});\n\nfunction showDialog(frm) {\n  // Create the dialog box\n  let d = new frappe.ui.Dialog({\n    title: __('Serial No'),\n    fields: [\n      {\n        fieldtype: 'Select',\n        fieldname: 'product_type',\n        label: __('Product Type'),\n        options: 'Semi Finished Item\\nFinished Item',\n        onchange: function() {\n          // Refresh the dialog to show/hide the table based on the selected value\n          d.refresh();\n        }\n      },\n      {\n        fieldname: 'items',\n        fieldtype: 'Table',\n        label: __('Serial No'),\n        depends_on: 'eval: doc.product_type == \"Semi Finished Item\"',\n        fields: [\n          {\n            fieldtype: 'Link',\n            options: 'Serial No',\n            fieldname: 'serial_no',\n            label: __('Serial No'),\n            in_list_view: 1\n          },\n          {\n            fieldtype: 'Data',\n            fieldname: 'batch_no',\n            label: __('Batch'),\n            in_list_view: 1\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'serial_auto',\n            label: __('Serial Type'),\n            in_list_view: 1,\n            options: 'Auto\\nManual'\n          }\n        ]\n      },\n       {\n        fieldname: 'finished_items',\n        fieldtype: 'Table',\n        label: __('Finished Item'),\n        depends_on: 'eval: doc.product_type == \"Finished Item\"',\n        fields: [\n          {\n            fieldtype: 'Link',\n            options: 'Item',\n            fieldname: 'item_code',\n            label: __('Item Code'),\n            in_list_view: 1\n          },\n          {\n            fieldtype: 'Data',\n            fieldname: 'Item Name',\n            label: __('Item Name'),\n            in_list_view: 1,\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'serial_auto',\n            label: __('Serial Type'),\n            in_list_view: 1,\n            options: 'Auto\\nManual'\n          }\n        ]\n      }\n    ],\n    primary_action: function() {\n      let values = d.get_values();\n      let items = values.items;\n      for (let i = 0; i < items.length; i++) {\n        let item = items[i];\n        frappe.msgprint('Serial Type: ' + item.serial_auto);\n         frappe.db.set_value('Serial No',item.serial_no, {\n                'serial_no_type': item.serial_auto,\n                'batch_no':item.batch_no\n            });\n      }\n\n      d.hide();\n    },\n    primary_action_label: __('Add')\n  });\n\n  d.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gate Entry",
  "enabled": 1,
  "modified": "2023-07-19 15:10:19.370518",
  "module": "Advantisquartz",
  "name": "To show Current TIme",
  "script": "frappe.ui.form.on('Gate Entry', {\n\tis_weight_in: function(frm) {\n\t\tfrm.set_value('weight_in_date', frappe.datetime.now_date());\n\t\tfrm.set_value('weight_in_time',frappe.datetime.now_time());\n\t},\n\tis_unloaded: function(frm){\n\t    frm.set_value('unloading_date', frappe.datetime.now_date());\n\t    frm.set_value('unloading_time', frappe.datetime.now_time());\n\t},\n\t\n\tis_weight_out: function(frm)\n\t{\n        frm.set_value('weight_out_date', frappe.datetime.now_date());\n        frm.set_value('weight_out_time', frappe.datetime.now_time());\n\t},\n\tis_gate_out: function(frm)\n\t{\n\t    frm.set_value('gate_out_date', frappe.datetime.now_date());\n        frm.set_value('gate_out_time', frappe.datetime.now_time());\n\t},\n\tsampling_done: function(frm)\n\t{\n\t    frm.set_value('sample_date', frappe.datetime.now_date());\n        frm.set_value('sample_time', frappe.datetime.now_time());\n\t},\n\tweight_out:function(frm){\n\t    var gross_weight= frm.doc.weight_in;\n\t    var tare_weight = frm.doc.weight_out;\n\t    console.log(gross_weight + \"\\n\\n\" + tare_weight);\n\t    frm.doc.net_weight = gross_weight-tare_weight;\n\t    frm.refresh_field('net_weight');\n\t},\n\tbefore_submit(frm){\n\t    var asset_repair = frm.doc.asset_repair_entry;\n\t    if(asset_repair){\n\t        frappe.db.set_value(\"Asset Repair\",asset_repair,'gate_out_entry',frm.doc.name);\n\t    }\n\t},\n\tbefore_cancel(frm){\n\t    if(frm.doc.purpose == \"Raw Material\"){\n\t        frm.clear_table('qc_details');\n\t    }\n\t    var asset_repair = frm.doc.asset_repair_entry;\n\t    if(asset_repair){\n\t        frappe.db.set_value(\"Asset Repair\",asset_repair,'gate_out_entry',' ');\n\t    }\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-07-24 13:50:43.428326",
  "module": "Advantisquartz",
  "name": "Default schedule date in Purchase Order",
  "script": "frappe.ui.form.on('Purchase Order', {\n    \n    onload :function(frm)\n    {\n        var a = cur_frm.doc.transaction_date;\n       \n        frm.set_value('schedule_date',frappe.datetime.add_days(a,7) );\n        console.log(a);\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Received\")\n\t}\n});\nfrappe.ui.form.on('Purchase Order', {\n\tafter_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Pending\")\n\t}\n});\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    after_save: function(frm) { \n        var a = [];\n        frm.doc.items.forEach(function(child) {\n            if (child.material_request) {\n                a.push(child.material_request);\n                } });\n                a = [...new Set(a)];\n                if (a.length > 0) {\n                    var material = a.join(', ');\n                    }\n                    if(a.length !== 0) {\n                        frappe.db.get_value('Material Request', {\n                            'name': material\n                            \n                        }, \n                        'remarks', function(response) {\n                            var material_remarks = response.remarks;\n                            console.log(material_remarks) \n                            frm.set_value(\"remarks\",material_remarks)\n                            });\n                            } \n    } });\n    \n    \n    \n  \n    \n    \n\nfrappe.ui.form.on('Purchase Order Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-06-23 15:12:56.516011",
  "module": "Advantisquartz",
  "name": "Quotation Sales Uom Calculation",
  "script": "\nfrappe.ui.form.on(\"Quotation Item\", \"qty\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"sales_qty_as_per_sales__uom\", d.qty * d.sales_uom_conversion_factor);\n    \n    cur_frm.refresh_field(\"Quotation Item\");\n});\n\n\nfrappe.ui.form.on(\"Quotation Item\", \"sales_uom_conversion_factor\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"sales_qty_as_per_sales__uom\", d.qty * d.sales_uom_conversion_factor);\n    cur_frm.refresh_field(\"Quotation Item\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-06-15 13:18:40.238552",
  "module": "Advantisquartz",
  "name": "sales order",
  "script": "frappe.ui.form.on('Sales Order Item', {\n\tsales_uom_conversion_factor:function(frm) {\n\t $.each(frm.doc.items || [], function (i, d)\n\t {\n\t     var sales_uom_cf = d.sales_uom_conversion_factor;\n\t     var sales_uom_multipy = sales_uom_cf * d.qty;\n\t  \n\t })\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2023-07-24 13:47:44.943700",
  "module": "Advantisquartz",
  "name": "status",
  "script": "frappe.ui.form.on('Request for Quotation', {\n  validate: function(frm) {\n    var a = [];\n    frm.doc.suppliers.forEach(function(child) {\n      if (child.quote_status) {\n        a.push(child.quote_status);\n      }\n    });\n  \n    if (a.includes(\"Received\")) {\n      frm.set_value(\"quotation_status\",\"Received\")\n    } else {\n      frm.set_value(\"quotation_status\",\"Pending\")\n    }\n  }\n});\nfrappe.ui.form.on('Request for Quotation', {\n  after_cancel: function(frm) {\n    var a = [];\n    frm.doc.suppliers.forEach(function(child) {\n      if (child.quote_status) {\n        a.push(child.quote_status);\n      }\n    });\n  \n    if (a.includes(\"Received\")) {\n      frm.set_value(\"quotation_status\",\"Pending\")\n    }\n  }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2023-07-24 13:49:31.950563",
  "module": "Advantisquartz",
  "name": "Status Changed",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Received\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n  validate: function(frm) {\n\n      frm.set_value(\"supplier_quotation_status\",\"Pending\")\n    \n  }\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_cancel: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Pending\")\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-07-21 19:08:29.627977",
  "module": "Advantisquartz",
  "name": "Gate Entry filter in material receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\tbill_no(frm) {\n\t\tfrm.set_query(\"gate_entry\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.bill_no,\n    \t            'invoice_date':cur_frm.doc.bill_date,\n    \t            'docstatus':0\n    \t        }\n    \t    };\n    \t});\n\t},\n// \tbefore_submit(frm){\n//         frappe.call({\n//             method: \"erpnext.buying.api.link_gate_entry\",\n//             args: {\n//                 pr_doc: frm.doc.name,\n//                 parent_doc : frm.doc.gate_entry\n//             },\n//             callback: function(r) {\n//                 console.log(\"Success\");\n//             }\n//         });\n//     }\n});\n\nfrappe.ui.form.on('Purchase Receipt Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n\tonload:function(frm) {\n\t     $.each(frm.doc.items || [], function (i, d) {\n\t    var purchase = d.purchase_order;\n\t    if(purchase){\n\t        \n\t   \n\tfrappe.call({\n        method:\"receive_qty\",\n        args:{\n            purchase:purchase\n        },\n        }).then(records =>{\n        \t var qty = records[\"receive\"];\n\t         var receive1 = qty.split(\",\");\n        \n        \t d.po_received_qty = receive1[i]\n        \t console.log(receive1)\n    \t        })\n\t    }\n\t     });\n\t     \n\t}\n\n});\nfrappe.ui.form.on('Purchase Receipt', {\n\tlocation: function(frm) {\n\t\t$.each(frm.doc.items || [], function(i, d) {\n\t\t\tfrm.doc.items[i].location = frm.doc.location;\n\t\t});\n\n\t\t// Refresh the table to update the values\n\t\tfrm.refresh_field('items');\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Repair",
  "enabled": 1,
  "modified": "2023-07-10 17:53:27.849877",
  "module": "Advantisquartz",
  "name": "Asset Repair Gate entry filter",
  "script": "frappe.ui.form.on('Asset Repair', {\n\tinvoice_no(frm) {\n\t\tfrm.set_query(\"gate_entry_no\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.invoice_no,\n    \t            'invoice_date':cur_frm.doc.invoice_date,\n    \t        }\n    \t    };\n    \t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Polish Serial No Update",
  "enabled": 1,
  "modified": "2023-07-19 12:32:12.209309",
  "module": "Advantisquartz",
  "name": "Polish Serial No Update",
  "script": "frappe.ui.form.on('Polish Serial No Update', {\n\ton_submit:function(frm) {\n\n\t        $.each(frm.doc.polish_item || [], function(i, d) {\n            var serial = d.slab_no;\n            var batch_no = d.batch;\n            var weight = d.weight;\n            var length = d.length;\n            var width = d.width;\n            var grade = d.grade;\n\t\t  frappe.db.set_value('Serial No',serial, {\n                'gross_weight': weight,\n                '_serial_no_quality':grade,\n                'custom_batch_no':batch_no,\n                'length':length,\n                'width':width\n\n            });\n\t    }); \n\t    \n\t}\n})\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"slab_no\", \"polish_item\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n        var itemcode = child.item_code;\n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"item_code\": itemcode  \n            }\n        };\n    });\n    \n};",
  "view": "Form"
 }
]