[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-08-02 12:28:24.788491",
  "module": "Advantisquartz",
  "name": "quality",
  "script": "\n\nfrappe.ui.form.on('Stock Entry',{\n    issue_location:function(frm){\n     frm.set_query(\"machine\",function(){\n\t    return{\n\t        filters:{\n\t            'location':cur_frm.doc.issue_location\n\t           \n\t        }\n\t        \n\t    };\n\t});\n\n    }\n})\nfrappe.ui.form.on('Stock Entry', {\n\tafter_cancel:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n\t     \n            var serial = d.serial_no;\n            if(serial){\n                  console.log(serial);\n               $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,'custom_status',\"Inactive\");\n                });\n            }\n          \n\t\t \n\t    }); \n\t}\n})\nfrappe.ui.form.on('Stock Entry', {\n\tonload:function(frm) {\n\t    if(cur_frm.doc.stock_entry_type == \"Manufacture\"){\n\t                 var work_order = cur_frm.doc.work_order;\n\t $.each(frm.doc.items || [], function(i, d) {\n            // var serial = d.serial_no;\n            // console.log(serial);\n            //   $.each(serial.split('\\n'), function(index, value) {\n                 \n            //      frappe.db.set_value('Serial No',value,'custom_status',\"Inactive\");\n            //     });\n            if(work_order !==null && d.is_finished_item == 1){\n                console.log(\"hello\")\n                 frappe.db.get_value('Work Order', {'name': work_order }, ['production_item','lot_no'],function(response) {\n            // 'response' will contain the fetched value\n            var b = response['production_item'];\n            var batch =response['lot_no']            // Split the fetched value into an array\n           \n           if(d.item_code == b){\n              d.lot_no = batch\n           }\n         \n          \n        });\n            }\n\t    });  \n\t    }\n  \n\t}\n})\nfrappe.ui.form.on('Stock Entry', {\n\ton_submit:function(frm) {\n\t    if(cur_frm.doc.stock_entry_type == \"Manufacture\"){\n\t        \t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            // console.log(serial);\n           \n            if(work_order !==null && d.is_finished_item == 1){\n             \n            \n              $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,{\n                     'custom_batch_no':d.lot_no,\n                     'custom_status':\"Active\"\n                     \n                 }\n                     );\n                });\n      \n            }\n\t    }); \n\t    }\n            var work_order = cur_frm.doc.work_order;\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gate Entry",
  "enabled": 1,
  "modified": "2023-07-26 10:35:32.383881",
  "module": "Advantisquartz",
  "name": "Gate Entry Asset Retrive",
  "script": "frappe.ui.form.on('Gate Entry Asset Repairing',\"asset_repair\", function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n        var row;\n        console.log(d.asset_repair);\n\t\tfrappe.db.get_list('Asset Repair Consumed Item', {\n                filters: {\n                    'parent': d.asset_repair,\n                    },\n                fields: ['item_code','status','consumed_quantity']\n        }).then(res => {\n            for (var i=0;i<res.length;i++){\n                row = frm.add_child(\"stock_item_tab\");\n                row.item = res[i].item_code;\n                row.qty = res[i].consumed_quantity;\n                row.status = res[i].status;\n                row.parent_doctype = \"Asset Repair\";\n                row.parentdoc = d.asset_repair;\n                frm.refresh_field(\"stock_item_tab\");\n            }\n        });\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No Update",
  "enabled": 1,
  "modified": "2023-08-02 12:03:04.463630",
  "module": "Advantisquartz",
  "name": "Serial No Update",
  "script": "frappe.ui.form.on('Serial No Update', {\n\ton_submit:function(frm) {\n\t\n\t        $.each(frm.doc.press_item || [], function(i, d) {\n            var serial = d.serial_no;\n         \n            var batch_no = d.batch_no;\n           \n            var select_type = d.select_type;\n            var length = d.length;\n            var width = d.width\n            \n\t\t  frappe.db.set_value('Serial No',serial, {\n                'serial_no_type': select_type,\n                'custom_batch_no':batch_no,\n                'length':length,\n                'width':width\n            });\n\t    }); \n\t    \n\t   \n\t  \n\t}\n})\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"serial_no\", \"press_item\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n       \n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"status\": \"Active\"  \n            }\n        };\n    });\n    \n};\n\n\n\nfrappe.ui.form.on('Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"press_item\"].grid.add_custom_button(__('Download'), function() {\n            // Fetch child table data\n            const childTableData = frm.doc.press_item;\n            \n            // Define a mapping of custom field names to child table field names\n            const fieldMapping = {\n              \n                \"serial_no\": \"serial_no\",\n                \"batch_no\":\"batch_no\",\n                \"select_type\":\"select_type\",\n                \"width\":\"width\",\n                \"length\":\"length\",\n                \"weight\":\"weight\"\n                \n                // Map \"qty\" to \"lot_no\" field in the child table\n            };\n\n            // Create a CSV string with custom field names as the first row\n            const csvContent = \"data:text/csv;charset=utf-8,\" \n                + Object.keys(fieldMapping).join(',') + '\\n'\n                + childTableData.map(row => Object.keys(fieldMapping).map(customField => row[fieldMapping[customField]] || \"\").join(',')).join('\\n');\n\n            // Create a temporary anchor element to trigger the download\n            const anchor = document.createElement('a');\n            anchor.href = encodeURI(csvContent);\n            anchor.target = '_blank';\n            anchor.download = 'child_table_data.csv';\n            anchor.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"press_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }\n});\n\nfrappe.ui.form.on('Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"press_item\"].grid.add_custom_button(__('Upload'), function() {\n            // Create a file input element dynamically\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.csv,.xlsx';\n            \n            // Trigger the file selection when the file input changes\n            fileInput.addEventListener('change', function(event) {\n                handleFileUpload(event.target.files[0]);\n            });\n\n            // Trigger the file input click event\n            fileInput.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"press_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }  \n});\nfunction handleFileUpload(file) {\n    if (!file) {\n        frappe.msgprint(__('No file selected.'));\n        return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = function(event) {\n        var csvData = event.target.result;\n        processData(csvData);\n    };\n    reader.readAsText(file);\n}\nfunction processData(csvData) {\n    var lines = csvData.split('\\n');\n    var fieldNames = lines[0].split(','); // Assuming the first row contains field names\n\n    // Remove the header line from the lines array\n    lines.splice(0, 1);\n\n    var pressItems = [];\n    for (var i = 0; i < lines.length; i++) {\n        var values = lines[i].split(',');\n\n        // Skip empty lines\n        if (values.length === 1 && values[0].trim() === '') {\n            continue;\n        }\n\n        var pressItem = {};\n        for (var j = 0; j < fieldNames.length; j++) {\n            // Trim any leading/trailing spaces from field names and values\n            var fieldName = fieldNames[j].trim();\n            var value = values[j].trim();\n\n            // Map the field name with its corresponding value\n            pressItem[fieldName] = value;\n        }\n\n        pressItems.push(pressItem);\n    }\n\n    // Get the current form instance\n    var frm = cur_frm;\n\n    // Clear existing child table rows\n    frm.clear_table('press_item');\n\n    // Add new child table rows based on the CSV data\n    for (var k = 0; k < pressItems.length; k++) {\n        var child = frm.add_child('press_item', pressItems[k]);\n    }\n\n    // Refresh the child table to display the newly added rows\n    frm.refresh_field('press_item');\n\n    frappe.msgprint(__('CSV data has been successfully loaded into the child table.'));\n}\n\nfrappe.ui.form.on('Serial No Update', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Get Serial No.'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Serial No\",\n                target: me.frm,\n                setters: {\n                    custom_status: \"Active\",\n                    item_code: null,\n                },\n                add_filters_group: 1,\n                columns: [\"status\"],\n                action(selections){\n                    console.log(selections);\n                    d.dialog.hide();\n\n                    var child_table = cur_frm.doc.press_item || [];\n                    frm.clear_table(\"press_item\");\n                    \n                    selections.forEach(function(d){\n                        \n                            frappe.call({\n                       method: \"serial\",\n                       args: {\n                           \"serial_name\": d\n                           \n                       }, \n                       callback: function(data)\n                       {\n                           \n                           var row = frm.add_child(\"press_item\");\n                            row.serial_no = d;\n                            row.batch_no=data.custom_batch_no;\n                          \n                            frm.refresh_field(\"press_item\");\n                       }\n                         })\n\n  \n                    })\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gate Entry",
  "enabled": 1,
  "modified": "2023-08-02 18:25:24.733061",
  "module": "Advantisquartz",
  "name": "Lock Field",
  "script": "function checkLock(frm) {\n  const allFields = ['naming_series', 'entry_type', 'purpose',\"supplier\", 'invoice_no', 'invoice_date', 'stock_item_tab', 'driver_name', 'driver_mobile_no', 'truck_no'];\n\n  const isLocked = frm.doc.lock_fields;\n  for (const field of allFields) {\n    frm.set_df_property(field, 'read_only', isLocked);\n  }\n\n  if (frm.doc.entry_type === 'Inward') {\n    frm.set_df_property('purpose', 'reqd', !isLocked);\n    frm.set_df_property('driver_name', 'reqd', !isLocked);\n    frm.set_df_property('driver_mobile_no', 'reqd', !isLocked);\n    frm.set_df_property('truck_no', 'reqd', !isLocked);\n    frm.set_df_property('supplier', 'reqd', !isLocked);\n    frm.set_df_property('invoice_no', 'reqd', !isLocked);\n    frm.set_df_property('invoice_date', 'reqd', !isLocked);\n  } else if (frm.doc.entry_type === 'Outward') {\n    frm.set_df_property('purpose', 'reqd', !isLocked);\n    frm.set_df_property('driver_name', 'reqd', !isLocked);\n    frm.set_df_property('driver_mobile_no', 'reqd', !isLocked);\n    frm.set_df_property('truck_no', 'reqd', !isLocked);\n    frm.set_df_property('invoice_no', 'reqd', false);\n    frm.set_df_property('invoice_date', 'reqd', false);\n  } else {\n    frm.set_df_property('entry_type', 'reqd', !isLocked);\n  }\n}\n\nfunction toggleWeightLock(frm) {\n  const isWeightInChecked = frm.doc.is_weight_in;\n  const isLockWeightChecked = frm.doc.lock_weight;\n\n  if (isWeightInChecked && isLockWeightChecked) {\n    frm.set_df_property('uom', 'read_only', true);\n    frm.set_df_property('weight_in', 'read_only', true);\n     frm.set_df_property('is_weight_in', 'read_only', true);\n  } else if (!isWeightInChecked && isLockWeightChecked) {\n    frm.set_df_property('uom', 'read_only', true);\n    frm.set_df_property('weight_in', 'read_only', false);\n     frm.set_df_property('is_weight_in', 'read_only', true);\n  } else {\n    frm.set_df_property('uom', 'read_only', false);\n    frm.set_df_property('weight_in', 'read_only', isLockWeightChecked);\n    frm.set_df_property('is_weight_in', 'read_only', isLockWeightChecked);\n  }\n}\n\nfunction toggleSamplingLock(frm) {\n  const isSamplingDoneChecked = frm.doc.sampling_done;\n  const isLockSamplingChecked = frm.doc.lock_sampling;\n  const isSamplingPersonNameReadOnly = isSamplingDoneChecked && isLockSamplingChecked;\n  frm.set_df_property('sampling_person_name', 'read_only', isSamplingPersonNameReadOnly);\n  frm.set_df_property('sampling_done', 'read_only', isSamplingPersonNameReadOnly);\n}\n\n\nfunction toggleQualityLock(frm) {\n  const isLockQualityInspectionChecked = frm.doc.lock_quality_inspection;\n  frm.set_df_property('qc_details', 'read_only', isLockQualityInspectionChecked);\n  frm.set_df_property('grn', 'read_only', isLockQualityInspectionChecked);\n}\n\n\nfunction toggleunloadLock(frm) {\n  const isUnloadedChecked = frm.doc.is_unloaded;\n  const isLockUnloadDetailsChecked = frm.doc.lock_unload_details;\n  const isUnloadingPersonReadOnly = isUnloadedChecked && isLockUnloadDetailsChecked;\n  frm.set_df_property('unloading_person', 'read_only', isUnloadingPersonReadOnly);\n  frm.set_df_property('is_unloaded', 'read_only', isUnloadingPersonReadOnly);\n}\n\nfunction toggleWeightOutLock(frm) {\n  const isWeightOutChecked = frm.doc.is_weight_out;\n  const isLockWeightOutDetailsChecked = frm.doc.lock_weight_out_details;\n  const isWeightOutReadOnly = isWeightOutChecked && isLockWeightOutDetailsChecked;\n  frm.set_df_property('weight_out', 'read_only', isWeightOutReadOnly);\n  frm.set_df_property('net_weight', 'read_only', isWeightOutReadOnly);\n  frm.set_df_property('is_weight_out', 'read_only', isWeightOutReadOnly);\n}\n\nfrappe.ui.form.on('Gate Entry', {\n  onload(frm) {\n    checkLock(frm);\n  },\n\n  lock_fields(frm) {\n    checkLock(frm);\n  },\n\n  entry_type(frm) {\n    checkLock(frm);\n  },\n\n  purpose(frm) {\n    checkLock(frm);\n  },\n\n  truck_no(frm) {\n    checkLock(frm);\n  },\n\n  is_weight_in(frm) {\n    toggleWeightLock(frm);\n\n    if (!frm.doc.is_weight_in) {\n      frm.set_value('lock_weight', false);\n    } else {\n      frm.set_value('lock_weight', false);\n    }\n  },\n\n  lock_weight(frm) {\n    toggleWeightLock(frm);\n  },\n  \n   refresh(frm) {\n    checkLock(frm);\n\n    if (!frm.is_new() && (!frappe.user.has_role('System Manager') || !frappe.user.has_role('Accounts Manager'))) {\n      frm.set_df_property('lock_fields', 'read_only', true);\n      frm.set_df_property('is_weight_in', 'read_only', true);\n      frm.set_df_property('lock_weight', 'read_only', true);\n      frm.set_df_property('sampling_done', 'read_only', true);\n      frm.set_df_property('lock_sampling', 'read_only', true);\n      frm.set_df_property('is_unloaded', 'read_only', true);\n      frm.set_df_property('lock_unload_details', 'read_only', true);\n      frm.set_df_property('is_weight_out', 'read_only', true);\n      frm.set_df_property('lock_weight_out_details', 'read_only', true);\n      frm.set_df_property('lock_quality_inspection', 'read_only', true);\n    }\n  },\n  \n  sampling_done(frm) {\n    toggleSamplingLock(frm);\n  },\n\n  lock_sampling(frm) {\n    toggleSamplingLock(frm);\n  },\n\n  is_unloaded(frm) {\n    toggleunloadLock(frm);\n  },\n\n  lock_unload_details(frm) {\n    toggleunloadLock(frm);\n  },\n  \n   lock_weight_out_details(frm) {\n    toggleWeightOutLock(frm);\n  },\n\n  is_unloaded(frm) {\n    toggleWeightOutLock(frm);\n  },\n  \n   lock_quality_inspection(frm) {\n    toggleQualityLock(frm);\n  },\n  \n  after_save(frm) {\n    if (frappe.user.has_role('System Manager') || frappe.user.has_role('Accounts Manager')) {\n     frm.set_df_property('lock_fields', 'read_only', false);\n      frm.set_df_property('lock_weight', 'read_only', false);\n      frm.set_df_property('lock_sampling', 'read_only', false);\n      frm.set_df_property('lock_unload_details', 'read_only', false);\n      frm.set_df_property('lock_weight_out_details', 'read_only', false);\n      frm.set_df_property('lock_quality_inspection', 'read_only', false);\n    } else {\n      frm.set_df_property('lock_fields', 'read_only', true);\n      frm.set_df_property('is_weight_in', 'read_only', true);\n      frm.set_df_property('lock_weight', 'read_only', true);\n      frm.set_df_property('sampling_done', 'read_only', true);\n      frm.set_df_property('lock_sampling', 'read_only', true);\n      frm.set_df_property('is_unloaded', 'read_only', true);\n      frm.set_df_property('lock_unload_details', 'read_only', true);\n      frm.set_df_property('is_weight_out', 'read_only', true);\n      frm.set_df_property('lock_weight_out_details', 'read_only', true);\n      frm.set_df_property('lock_quality_inspection', 'read_only', true);\n    }\n    \n  },\n\n  before_save(frm) {\n    if (frm.fields_dict.lock_fields && frm.fields_dict.lock_fields.$wrapper.is(':visible')) {\n      if (!frm.doc.lock_fields) {\n         if (!frappe.user.has_role('System Manager') || !frappe.user.has_role('Accounts Manager')) {\n        frappe.throw('Cannot save when \"Lock Fields\" is unchecked. Please select the checkbox.');\n          }\n      }\n    }\n    if (!frappe.user.has_role('System Manager') && !frappe.user.has_role('Accounts Manager')) {\n    if (!frm.doc.lock_weight && (frm.doc.uom || frm.doc.weight_in)) {\n      frappe.msgprint('Cannot save when \"Lock Weight\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else if (!frm.doc.lock_sampling && frm.doc.sampling_person_name ) {\n      frappe.msgprint('Cannot save when \"Lock Sampling\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else  if (!frm.doc.lock_quality_inspection && (frm.doc.qc_details || frm.doc.grn)) {\n      frappe.msgprint('Cannot save when \"Lock Quality Inspection\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else  if (!frm.doc.lock_unload_details && frm.doc.unloading_person ) {\n      frappe.msgprint('Cannot save when \"Lock Unload Details\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n    else  if (!frm.doc.lock_weight_out_details && (frm.doc.weight_out || frm.doc.net_weight)) {\n      frappe.msgprint('Cannot save when \"Lock Weight Out Details\" is unchecked. Please select the checkbox.');\n      frappe.validated = false; \n    }\n  }\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2023-07-19 12:31:38.951404",
  "module": "Advantisquartz",
  "name": "Serial No Interface",
  "script": "frappe.ui.form.on('Stock Entry', {\n  refresh: function(frm) {\n    frm.set_query('product_type', function() {\n      return {\n        options: 'Semi Finished Item\\nFinished Item'\n      };\n    });\n\n    // Triggered when the form is loaded\n    frm.add_custom_button(__('Update Serial No'), function() {\n      // Function to open the dialog box\n      showDialog(frm);\n    });\n  }\n});\n\nfunction showDialog(frm) {\n  // Create the dialog box\n  let d = new frappe.ui.Dialog({\n    title: __('Serial No'),\n    fields: [\n      {\n        fieldtype: 'Select',\n        fieldname: 'product_type',\n        label: __('Product Type'),\n        options: 'Semi Finished Item\\nFinished Item',\n        onchange: function() {\n          // Refresh the dialog to show/hide the table based on the selected value\n          d.refresh();\n        }\n      },\n      {\n        fieldname: 'items',\n        fieldtype: 'Table',\n        label: __('Serial No'),\n        depends_on: 'eval: doc.product_type == \"Semi Finished Item\"',\n        fields: [\n          {\n            fieldtype: 'Link',\n            options: 'Serial No',\n            fieldname: 'serial_no',\n            label: __('Serial No'),\n            in_list_view: 1\n          },\n          {\n            fieldtype: 'Data',\n            fieldname: 'batch_no',\n            label: __('Batch'),\n            in_list_view: 1\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'serial_auto',\n            label: __('Serial Type'),\n            in_list_view: 1,\n            options: 'Auto\\nManual'\n          }\n        ]\n      },\n       {\n        fieldname: 'finished_items',\n        fieldtype: 'Table',\n        label: __('Finished Item'),\n        depends_on: 'eval: doc.product_type == \"Finished Item\"',\n        fields: [\n          {\n            fieldtype: 'Link',\n            options: 'Item',\n            fieldname: 'item_code',\n            label: __('Item Code'),\n            in_list_view: 1\n          },\n          {\n            fieldtype: 'Data',\n            fieldname: 'Item Name',\n            label: __('Item Name'),\n            in_list_view: 1,\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'serial_auto',\n            label: __('Serial Type'),\n            in_list_view: 1,\n            options: 'Auto\\nManual'\n          }\n        ]\n      }\n    ],\n    primary_action: function() {\n      let values = d.get_values();\n      let items = values.items;\n      for (let i = 0; i < items.length; i++) {\n        let item = items[i];\n        frappe.msgprint('Serial Type: ' + item.serial_auto);\n         frappe.db.set_value('Serial No',item.serial_no, {\n                'serial_no_type': item.serial_auto,\n                'batch_no':item.batch_no\n            });\n      }\n\n      d.hide();\n    },\n    primary_action_label: __('Add')\n  });\n\n  d.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gate Entry",
  "enabled": 1,
  "modified": "2023-07-25 12:36:34.954291",
  "module": "Advantisquartz",
  "name": "To show Current TIme",
  "script": "frappe.ui.form.on('Gate Entry', {\n    validate: function(frm) {\n        if (frm.doc.invoice_date > get_today()) {\n            frappe.throw(__(\"Not Allowed To Select future dates\"));\n        }\n    },\n\tis_weight_in: function(frm) {\n\t\tfrm.set_value('weight_in_date', frappe.datetime.now_date());\n\t\tfrm.set_value('weight_in_time',frappe.datetime.now_time());\n\t},\n\tis_unloaded: function(frm){\n\t    frm.set_value('unloading_date', frappe.datetime.now_date());\n\t    frm.set_value('unloading_time', frappe.datetime.now_time());\n\t},\n\t\n\tis_weight_out: function(frm)\n\t{\n        frm.set_value('weight_out_date', frappe.datetime.now_date());\n        frm.set_value('weight_out_time', frappe.datetime.now_time());\n\t},\n\tis_gate_out: function(frm)\n\t{\n\t    frm.set_value('gate_out_date', frappe.datetime.now_date());\n        frm.set_value('gate_out_time', frappe.datetime.now_time());\n\t},\n\tsampling_done: function(frm)\n\t{\n\t    frm.set_value('sample_date', frappe.datetime.now_date());\n        frm.set_value('sample_time', frappe.datetime.now_time());\n\t},\n\tweight_out:function(frm){\n\t    var gross_weight= frm.doc.weight_in;\n\t    var tare_weight = frm.doc.weight_out;\n\t    console.log(gross_weight + \"\\n\\n\" + tare_weight);\n\t    frm.doc.net_weight = gross_weight-tare_weight;\n\t    frm.refresh_field('net_weight');\n\t},\n\tbefore_submit(frm){\n\t    var asset_repair = frm.doc.asset_repair_entry;\n\t    if(asset_repair){\n\t        frappe.db.set_value(\"Asset Repair\",asset_repair,'gate_out_entry',frm.doc.name);\n\t    }\n\t},\n\tbefore_cancel(frm){\n\t    if(frm.doc.purpose == \"Raw Material\"){\n\t        frm.clear_table('qc_details');\n\t    }\n\t    var asset_repair = frm.doc.asset_repair_entry;\n\t    if(asset_repair){\n\t        frappe.db.set_value(\"Asset Repair\",asset_repair,'gate_out_entry',' ');\n\t    }\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-08-02 19:32:34.918464",
  "module": "Advantisquartz",
  "name": "Default schedule date in Purchase Order",
  "script": "frappe.ui.form.on('Purchase Order', {\n    \n    after_save :function(frm)\n    {\n        var a = cur_frm.doc.transaction_date;\n       \n        frm.set_value('schedule_date',frappe.datetime.add_days(a,7) );\n        console.log(a);\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tif(output){\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Received\")\n\t\t}\n\t}\n});\nfrappe.ui.form.on('Purchase Order', {\n\tafter_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tif(output){\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Pending\")\n\t\t}\n\t}\n});\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    after_save: function(frm) { \n        var a = [];\n        frm.doc.items.forEach(function(child) {\n            if (child.material_request) {\n                a.push(child.material_request);\n                } });\n                a = [...new Set(a)];\n                if (a.length > 0) {\n                    var material = a.join(', ');\n                    }\n                    if(a.length !== 0) {\n                        frappe.db.get_value('Material Request', {\n                            'name': material\n                            \n                        }, \n                        'remarks', function(response) {\n                            var material_remarks = response.remarks;\n                            console.log(material_remarks) \n                            frm.set_value(\"remarks\",material_remarks)\n                            });\n                            } \n    } });\n    \n    \n    \n  \n    \n    \n\nfrappe.ui.form.on('Purchase Order Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\nfrappe.ui.form.on(\"Purchase Order\",{\n    onload:function(frm){\n        if (frm.is_new()) {\n            frm.doc.items.forEach(function(child) {\n                if(child.supplier_quotation){\n                    \n                frappe.call({\n                    method:\"purchase\",\n                    args:{\n                        supplier_quotation:child.supplier_quotation\n                    }\n                }).then(records=>{\n                    child.request_for_quotation = records.request\n                })\n                }\n            })\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-06-23 15:12:56.516011",
  "module": "Advantisquartz",
  "name": "Quotation Sales Uom Calculation",
  "script": "\nfrappe.ui.form.on(\"Quotation Item\", \"qty\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"sales_qty_as_per_sales__uom\", d.qty * d.sales_uom_conversion_factor);\n    \n    cur_frm.refresh_field(\"Quotation Item\");\n});\n\n\nfrappe.ui.form.on(\"Quotation Item\", \"sales_uom_conversion_factor\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"sales_qty_as_per_sales__uom\", d.qty * d.sales_uom_conversion_factor);\n    cur_frm.refresh_field(\"Quotation Item\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-06-15 13:18:40.238552",
  "module": "Advantisquartz",
  "name": "sales order",
  "script": "frappe.ui.form.on('Sales Order Item', {\n\tsales_uom_conversion_factor:function(frm) {\n\t $.each(frm.doc.items || [], function (i, d)\n\t {\n\t     var sales_uom_cf = d.sales_uom_conversion_factor;\n\t     var sales_uom_multipy = sales_uom_cf * d.qty;\n\t  \n\t })\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2023-07-24 13:47:44.943700",
  "module": "Advantisquartz",
  "name": "status",
  "script": "frappe.ui.form.on('Request for Quotation', {\n  validate: function(frm) {\n    var a = [];\n    frm.doc.suppliers.forEach(function(child) {\n      if (child.quote_status) {\n        a.push(child.quote_status);\n      }\n    });\n  \n    if (a.includes(\"Received\")) {\n      frm.set_value(\"quotation_status\",\"Received\")\n    } else {\n      frm.set_value(\"quotation_status\",\"Pending\")\n    }\n  }\n});\nfrappe.ui.form.on('Request for Quotation', {\n  after_cancel: function(frm) {\n    var a = [];\n    frm.doc.suppliers.forEach(function(child) {\n      if (child.quote_status) {\n        a.push(child.quote_status);\n      }\n    });\n  \n    if (a.includes(\"Received\")) {\n      frm.set_value(\"quotation_status\",\"Pending\")\n    }\n  }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2023-08-01 15:07:33.311952",
  "module": "Advantisquartz",
  "name": "Status Changed",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Received\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n  validate: function(frm) {\n\n      frm.set_value(\"supplier_quotation_status\",\"Pending\")\n    \n  }\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_cancel: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Pending\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_save: function(frm) {\n\t \n\t    frm.doc.items.forEach(function(child){\n\t        if(child.initial_rate){\n\t            if(child.initial_discount_){\n\t                var dis = child.initial_rate * child.qty;\n\t                var dis_amt = (dis * child.initial_discount_)/100\n\t                child.initial_amount=dis - dis_amt\n\t            }\n\t            else{\n\t                \n\t            var a = child.initial_rate * child.qty;\n\t            console.log(a)\n\t            child.initial_amount = a\n\t            \n\t            }\n\t        }\n\t       \n\t    })\n\t     var grand_total = 0;\n        $.each(frm.doc.items, function(i, d) {\n                grand_total += d.initial_amount;\n        });\n        console.log(grand_total)\n        frm.set_value(\"initial_total\",grand_total)\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-07-31 11:58:41.281177",
  "module": "Advantisquartz",
  "name": "Gate Entry filter in material receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\tbill_no(frm) {\n\t\tfrm.set_query(\"gate_entry\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.bill_no,\n    \t            'invoice_date':cur_frm.doc.bill_date,\n    \t            'docstatus':0\n    \t        }\n    \t    };\n    \t});\n\t},\n// \tbefore_submit(frm){\n//         frappe.call({\n//             method: \"erpnext.buying.api.link_gate_entry\",\n//             args: {\n//                 pr_doc: frm.doc.name,\n//                 parent_doc : frm.doc.gate_entry\n//             },\n//             callback: function(r) {\n//                 console.log(\"Success\");\n//             }\n//         });\n//     }\n});\n\nfrappe.ui.form.on('Purchase Receipt Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n\tafter_save:function(frm) {\n\t     $.each(frm.doc.items || [], function (i, d) {\n\t    var purchase = d.purchase_order;\n\t    var item_code = d.item_code;\n\t    if(purchase){\n\t        \n\t   \n\tfrappe.call({\n        method:\"receive_qty\",\n        args:{\n            purchase:purchase,\n            item_code : item_code\n        },\n        }).then(records =>{\n        \t var qty = records[\"receive\"];\n\t         var receive1 = qty.split(\",\");\n        \n        \t d.po_received_qty = receive1\n        \t console.log(receive1)\n    \t        })\n\t    }\n\t     });\n\t     \n\t}\n\n});\nfrappe.ui.form.on('Purchase Receipt', {\n\tlocation: function(frm) {\n\t\t$.each(frm.doc.items || [], function(i, d) {\n\t\t\tfrm.doc.items[i].location = frm.doc.location;\n\t\t});\n\n\t\t// Refresh the table to update the values\n\t\tfrm.refresh_field('items');\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Repair",
  "enabled": 1,
  "modified": "2023-07-10 17:53:27.849877",
  "module": "Advantisquartz",
  "name": "Asset Repair Gate entry filter",
  "script": "frappe.ui.form.on('Asset Repair', {\n\tinvoice_no(frm) {\n\t\tfrm.set_query(\"gate_entry_no\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.invoice_no,\n    \t            'invoice_date':cur_frm.doc.invoice_date,\n    \t        }\n    \t    };\n    \t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packing list",
  "enabled": 1,
  "modified": "2023-08-02 13:03:26.990766",
  "module": "Advantisquartz",
  "name": "packing",
  "script": "frappe.ui.form.on('Packing list', {\n\tafter_save:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            console.log(serial);\n            \n\t\t  frappe.db.set_value('Serial No',serial,'custom_status',\"Hold\");\n\t    }); \n\t}\n})\n\nfrappe.ui.form.on('Packing list', {\n\tstatus:function(frm) {\n    if(cur_frm.doc.status==\"Not Saved\"){\n        console.log(\"delete\")\n    }\n\t}\n})\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"serial_no\", \"items\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n        var itemcode = child.item_code;\n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"item_code\": itemcode,\n                \"status\":\"Active\"\n            }\n        };\n    });\n    \n};\nfrappe.ui.form.on('Packing list', {\n\tcontainer_no:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n          d.container_no = cur_frm.doc.container_no;\n\t    }); \n\t}\n});\n\n\nfrappe.ui.form.on('Packing list', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Get Serial No.'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Serial No\",\n                target: frm,\n                setters: {\n                    custom_status: \"Active\",\n                    item_code: null,\n                    quality:null\n                  \n                },\n                add_filters_group: 1,\n                action(selections) {\n                    console.log(selections);\n                    d.dialog.hide();\n\n                    var child_table = frm.doc.items || [];\n                    frm.clear_table(\"items\");\n\n                    selections.forEach(function(d) {\n                        frappe.call({\n                            method: \"serial\",\n                            args: {\n                                \"serial_name\": d\n                            }, \n                            callback: function(data) {\n                                var row = frm.add_child(\"items\");\n                                row.serial_no = d;\n                                row.item_code = data.item_code;\n                                row.production_weight = data.gross_weight;\n                                row.production_length = data.length;\n                                row.production_width = data.width;\n                                row.production_grade = data.quality; // Make sure 'quality' is set properly\n                                frm.refresh_field(\"items\"); // Refresh the data table to display the updated 'Quality' value\n                            }\n                        });\n                    });\n                }\n            });\n            \n        });\n        \n    }\n});\n\n\n\n\nfrappe.ui.form.on('Packing list', {\n    refresh(frm) {\n        frm.fields_dict[\"items\"].grid.add_custom_button(__('Download'), function() {\n            // Fetch child table data\n            const childTableData = frm.doc.items;\n            \n            // Define a mapping of custom field names to child table field names\n            const fieldMapping = {\n              \n                \"container_no\": \"container_no\",\n                \"item_code\":\"item_code\",\n                \"serial_no\":\"serial_no\",\n                \"production_weight\":\"production_weight\",\n                \"production_length\":\"production_length\",\n                \"production_width\":\"production_width\",\n                \"production_grade\":\"production_grade\",\n                \"sales_length\":\"sales_length\",\n                \"sales_grade\":\"sales_grade\",\n                \"sales_weight\":\"sales_weight\"\n                \n                // Map \"qty\" to \"lot_no\" field in the child table\n            };\n\n            // Create a CSV string with custom field names as the first row\n            const csvContent = \"data:text/csv;charset=utf-8,\" \n                + Object.keys(fieldMapping).join(',') + '\\n'\n                + childTableData.map(row => Object.keys(fieldMapping).map(customField => row[fieldMapping[customField]] || \"\").join(',')).join('\\n');\n\n            // Create a temporary anchor element to trigger the download\n            const anchor = document.createElement('a');\n            anchor.href = encodeURI(csvContent);\n            anchor.target = '_blank';\n            anchor.download = 'packing_list.csv';\n            anchor.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"items\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }\n});\n\nfrappe.ui.form.on('Packing list', {\n    refresh(frm) {\n        frm.fields_dict[\"items\"].grid.add_custom_button(__('Upload'), function() {\n            // Create a file input element dynamically\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.csv,.xlsx';\n            \n            // Trigger the file selection when the file input changes\n            fileInput.addEventListener('change', function(event) {\n                handleFileUpload(event.target.files[0]);\n            });\n\n            // Trigger the file input click event\n            fileInput.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"items\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }  \n});\nfunction handleFileUpload(file) {\n    if (!file) {\n        frappe.msgprint(__('No file selected.'));\n        return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = function(event) {\n        var csvData = event.target.result;\n        processData(csvData);\n    };\n    reader.readAsText(file);\n}\nfunction processData(csvData) {\n    var lines = csvData.split('\\n');\n    var fieldNames = lines[0].split(','); // Assuming the first row contains field names\n\n    // Remove the header line from the lines array\n    lines.splice(0, 1);\n\n    var pressItems = [];\n    for (var i = 0; i < lines.length; i++) {\n        var values = lines[i].split(',');\n\n        // Skip empty lines\n        if (values.length === 1 && values[0].trim() === '') {\n            continue;\n        }\n\n        var pressItem = {};\n        for (var j = 0; j < fieldNames.length; j++) {\n            // Trim any leading/trailing spaces from field names and values\n            var fieldName = fieldNames[j].trim();\n            var value = values[j].trim();\n\n            // Map the field name with its corresponding value\n            pressItem[fieldName] = value;\n        }\n\n        pressItems.push(pressItem);\n    }\n\n    // Get the current form instance\n    var frm = cur_frm;\n\n    // Clear existing child table rows\n    frm.clear_table('items');\n\n    // Add new child table rows based on the CSV data\n    for (var k = 0; k < pressItems.length; k++) {\n        var child = frm.add_child('items', pressItems[k]);\n    }\n\n    // Refresh the child table to display the newly added rows\n    frm.refresh_field('items');\n\n    frappe.msgprint(__('CSV data has been successfully loaded into the child table.'));\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No",
  "enabled": 1,
  "modified": "2023-08-01 17:39:03.952317",
  "module": "Advantisquartz",
  "name": "status color",
  "script": "frappe.listview_settings['Serial No'] = {\radd_fields: [ \"custom_status\"],\rget_indicator:function(doc){\rif (doc.custom_status === \"Hold\") {\r\t\t\treturn [__(\"Hold\"), \"red\", \"status,=,Hold\"];\r    }\rif (doc.custom_status === \"Delivered\") {\r\t\t\treturn [__(\"Delivered\"), \"green\", \"status,=,Delivered\"];\r    }\r    if (doc.custom_status === \"Active\") {\r\t\t\treturn [__(\"Active\"), \"green\", \"status,=,Active\"];\r    }\r    if (doc.custom_status === \"Inactive\") {\r\t\t\treturn [__(\"Inactive\"), \"gray\", \"status,=,Inactive\"];\r    }\r }\r}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-08-02 18:19:26.083310",
  "module": "Advantisquartz",
  "name": "Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note', {\n  packing_scanner: function (frm) {\n    var packing = cur_frm.doc.packing_scanner;\n    console.log(packing);\n\n    frappe.call({\n      method: \"packing\",\n      args: {\n        \"packing_list\": packing\n      },\n      callback: function (records) {\n        $.each(frm.doc.items || [], function (i, d) {\n          var sales_order_id = d.against_sales_order;\n          var item_code = records.item_code.split(\",\");\n          var serial_no = records.serial_no.split(\",\");\n          var item_code1 = records.item_code1.split(\",\")\n          var serial_count = records.serial_count.split(\",\")\n          var as = records.sales_length.split(\",\")\n          var item_code2 = records.item_code2.split(\",\")\n          var item_code3 = records.item_code3.split(\",\")\n          var weight = records.sales_weight.split(\",\")\n          var item_code4 = records.item_code4.split(\",\")\n          var grade = records.sales_grade.split(\",\")\n          console.log(as)\n          // Find the index of the current item_code in the records\n          var index = item_code.indexOf(d.item_code);\n          var index_z = item_code1.indexOf(d.item_code);\n          var index_length = item_code2.indexOf(d.item_code)\n          var index_weight = item_code3.indexOf(d.item_code)\n          var index_grade = item_code4.indexOf(d.item_code)\n          if (index !== -1 && d.against_sales_order === sales_order_id && index_z !== -1 && index_length !== -1 && index_weight !== -1  && index_grade !== -1 ) {\n            d.serial_no = serial_no[index];\n            d.qty = serial_count[index_z]\n            d.packing_length = as[index_length]\n            d.packing_weight = weight[index_weight]\n            d.packing_grade = grade[index_grade]\n            console.log(\"yes\");\n          } else {\n            console.log(\"no\");\n          }\n        });\n      }\n    });\n  }\n});\n\n                 \nfrappe.ui.form.on('Delivery Note', {\n\ton_submit:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            console.log(serial);\n               $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,'custom_status',\"Delivered\");\n                });\n\t\t \n\t    }); \n\t}\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Polish Serial No Update",
  "enabled": 1,
  "modified": "2023-08-02 12:07:22.792470",
  "module": "Advantisquartz",
  "name": "Polish Serial No Update",
  "script": "frappe.ui.form.on('Polish Serial No Update', {\n\ton_submit:function(frm) {\n\n\t        $.each(frm.doc.polish_item || [], function(i, d) {\n            var serial = d.slab_no;\n            var batch_no = d.batch;\n            var weight = d.weight;\n            var length = d.length;\n            var width = d.width;\n            var grade = d.grade;\n\t\t  frappe.db.set_value('Serial No',serial, {\n                'gross_weight': weight,\n                'quality':grade,\n                'custom_batch_no':batch_no,\n                'length':length,\n                'width':width\n\n            });\n\t    }); \n\t    \n\t}\n})\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"slab_no\", \"polish_item\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n        var itemcode = child.item_code;\n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"item_code\": itemcode,\n                \"custom_status\":\"Active\"\n            }\n        };\n    });\n    \n};\n\n\nfrappe.ui.form.on('Polish Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"polish_item\"].grid.add_custom_button(__('Download'), function() {\n            // Fetch child table data\n            const childTableData = frm.doc.polish_item;\n            \n            // Define a mapping of custom field names to child table field names\n            const fieldMapping = {\n              \n                \"item_code\": \"item_code\",\n                \"item_name\":\"item_name\",\n                \"slab_no\":\"slab_no\",\n                \"weight\":\"weight\",\n                \"length\":\"length\",\n                \"width\":\"width\",\n                \"batch\":\"batch\",\n                \"grade\":\"grade\"\n                \n                \n                // Map \"qty\" to \"lot_no\" field in the child table\n            };\n\n            // Create a CSV string with custom field names as the first row\n            const csvContent = \"data:text/csv;charset=utf-8,\" \n                + Object.keys(fieldMapping).join(',') + '\\n'\n                + childTableData.map(row => Object.keys(fieldMapping).map(customField => row[fieldMapping[customField]] || \"\").join(',')).join('\\n');\n\n            // Create a temporary anchor element to trigger the download\n            const anchor = document.createElement('a');\n            anchor.href = encodeURI(csvContent);\n            anchor.target = '_blank';\n            anchor.download = 'child_table_data.csv';\n            anchor.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"polish_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }\n});\n\nfrappe.ui.form.on('Polish Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"polish_item\"].grid.add_custom_button(__('Upload'), function() {\n            // Create a file input element dynamically\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.csv,.xlsx';\n            \n            // Trigger the file selection when the file input changes\n            fileInput.addEventListener('change', function(event) {\n                handleFileUpload(event.target.files[0]);\n            });\n\n            // Trigger the file input click event\n            fileInput.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"polish_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }  \n});\nfunction handleFileUpload(file) {\n    if (!file) {\n        frappe.msgprint(__('No file selected.'));\n        return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = function(event) {\n        var csvData = event.target.result;\n        processData(csvData);\n    };\n    reader.readAsText(file);\n}\nfunction processData(csvData) {\n    var lines = csvData.split('\\n');\n    var fieldNames = lines[0].split(','); // Assuming the first row contains field names\n\n    // Remove the header line from the lines array\n    lines.splice(0, 1);\n\n    var pressItems = [];\n    for (var i = 0; i < lines.length; i++) {\n        var values = lines[i].split(',');\n\n        // Skip empty lines\n        if (values.length === 1 && values[0].trim() === '') {\n            continue;\n        }\n\n        var pressItem = {};\n        for (var j = 0; j < fieldNames.length; j++) {\n            // Trim any leading/trailing spaces from field names and values\n            var fieldName = fieldNames[j].trim();\n            var value = values[j].trim();\n\n            // Map the field name with its corresponding value\n            pressItem[fieldName] = value;\n        }\n\n        pressItems.push(pressItem);\n    }\n\n    // Get the current form instance\n    var frm = cur_frm;\n\n    // Clear existing child table rows\n    frm.clear_table('polish_item');\n\n    // Add new child table rows based on the CSV data\n    for (var k = 0; k < pressItems.length; k++) {\n        var child = frm.add_child('polish_item', pressItems[k]);\n    }\n\n    // Refresh the child table to display the newly added rows\n    frm.refresh_field('polish_item');\n\n    frappe.msgprint(__('CSV data has been successfully loaded into the child table.'));\n}\n\nfrappe.ui.form.on('Polish Serial No Update', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Get Serial No.'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Serial No\",\n                target: me.frm,\n                setters: {\n                    custom_status: \"Active\",\n                    item_code: null,\n                },\n                add_filters_group: 1,\n                columns: [\"status\"],\n                action(selections){\n                    console.log(selections);\n                    d.dialog.hide();\n\n                    var child_table = cur_frm.doc.polish_item || [];\n                    frm.clear_table(\"polish_item\");\n                    \n                    selections.forEach(function(d){\n                        \n                            frappe.call({\n                       method: \"serial\",\n                       args: {\n                           \"serial_name\": d\n                           \n                       }, \n                       callback: function(data)\n                       {\n                           \n                           var row = frm.add_child(\"polish_item\");\n                            row.slab_no = d;\n                            row.item_code = data.item_code\n                            row.item_name = data.item_name\n                            row.batch=data.custom_batch_no\n                            row.weight=data.gross_weight\n                            row.length = data.length\n                            row.width=data.width\n                          \n frm.refresh_field(\"polish_item\");\n                       }\n                         })\n\n  \n                    })\n                }\n            });\n        });\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.504451",
  "module": "Advantisquartz",
  "name": "Get Appointment letter date",
  "script": "frappe.ui.form.on('Employee', {\n\tjob_applicant(frm) {\n\t    var employee = cur_frm.doc.employee;\n\t   // console.log(employee);\n        var job_applicant = frm.doc.job_applicant;\n        var appointmentDate;\n        // console.log(job_applicant);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Appointment Letter\",\n                filters: {\n                    job_applicant: job_applicant\n                },\n                fields: [\"job_applicant\", \"appointment_date\"]\n            },\n            callback: function (response) {\n                // console.log(response.message[0].appointment_date);\n                appointmentDate = response.message[0].appointment_date;\n                // console.log(appointmentDate);\n                var formattedDate = frappe.datetime.str_to_user(appointmentDate);\n                // console.log(formattedDate);\n                frm.set_value('appointment_letter_date', formattedDate);\n                frm.refresh_field('appointment_letter_date');\n            }\n        });\n        \n        // frappe.db.set_value('Employee', employee, 'appointment_letter_date', appointmentDate)\n        \n       }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.483831",
  "module": "Advantisquartz",
  "name": "Get months difference",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t    var probation_date = moment(cur_frm.doc.probation_date);\n\t\tvar date_of_joining = moment(cur_frm.doc.date_of_joining);\n\t\t\n\t\tvar diffInMonths = probation_date.diff(date_of_joining, 'months');\n\n\t\tconsole.log(diffInMonths);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.462308",
  "module": "Advantisquartz",
  "name": "Get probation period end date",
  "script": "frappe.ui.form.on('Employee', {\r    date_of_joining(frm) {\r        var probation_period = cur_frm.doc.probation_period;\r        var date_of_joining = cur_frm.doc.date_of_joining;\r        var a;\r        var b;\r        \r        var startDate = new Date(date_of_joining);\r\r        var probationEndDate = new Date(startDate);\r        probationEndDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        probationEndDate.setMonth((startDate.getMonth() + probation_period) % 12);\r        probationEndDate.setDate(probationEndDate.getDate() - 1);\r\r        var day = probationEndDate.getDate();\r        var month = probationEndDate.getMonth() + 1; \r        var year = probationEndDate.getFullYear();\r        a = `${day < 10 ? '0' : ''}${day}-${month1 < 10 ? '0' : ''}${month}-${year}`;\r\r        // console.log(a);\r\r        var employmentStartDate = new Date(startDate);\r        employmentStartDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        employmentStartDate.setMonth((startDate.getMonth() + probation_period) % 12);\r\r        var day1 = employmentStartDate.getDate();\r        var month1 = employmentStartDate.getMonth() + 1; \r        var year1 = employmentStartDate.getFullYear();\r        b = `${day1 < 10 ? '0' : ''}${day1}-${month1 < 10 ? '0' : ''}${month1}-${year1}`;\r\r        // console.log(b);\r        \r        frm.set_value('probation_period_end_date', a);\r        frm.refresh_field('probation_period_end_date');\r        frm.set_value('employment_start_date', b);\r        frm.refresh_field('employment_start_date');\r    },\r    probation_period(frm) {\r        var probation_period = cur_frm.doc.probation_period;\r        var date_of_joining = cur_frm.doc.date_of_joining;\r        var a;\r        var b;\r        \r        var startDate = new Date(date_of_joining);\r\r        var probationEndDate = new Date(startDate);\r        probationEndDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        probationEndDate.setMonth((startDate.getMonth() + probation_period) % 12);\r        probationEndDate.setDate(probationEndDate.getDate() - 1);\r\r        var day = probationEndDate.getDate();\r        var month = probationEndDate.getMonth() + 1; \r        var year = probationEndDate.getFullYear();\r        a = `${day < 10 ? '0' : ''}${day}-${month1 < 10 ? '0' : ''}${month}-${year}`;\r\r        // console.log(a);\r\r        var employmentStartDate = new Date(startDate);\r        employmentStartDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        employmentStartDate.setMonth((startDate.getMonth() + probation_period) % 12);\r\r        var day1 = employmentStartDate.getDate();\r        var month1 = employmentStartDate.getMonth() + 1; \r        var year1 = employmentStartDate.getFullYear();\r        b = `${day1 < 10 ? '0' : ''}${day1}-${month1 < 10 ? '0' : ''}${month1}-${year1}`;\r\r        // console.log(b);\r        \r        frm.set_value('probation_period_end_date', a);\r        frm.refresh_field('probation_period_end_date');\r        frm.set_value('employment_start_date', b);\r        frm.refresh_field('employment_start_date');\r    }\r})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.438947",
  "module": "Advantisquartz",
  "name": "Get check list",
  "script": "frappe.ui.form.on('Employee', {\n    setup(frm){\n        if(frm.is_new())\n            {\n            var ids = [\n                \"Copy of CV\",\n                \"Application Form\",\n                \"Academic testimonials (10th, 12th, Graduation, Post-Graduation)\",\n                \"Other Certifications (If Any)\",\n                \"Passport size colour Photographs \u2013 5 Nos.\",\n                \"Aadhar Card\",\n                \"PAN Card\",\n                \"Bank Account Detail\",\n                \"Last 2 months salary slips of previous organization\",\n                \"Clearance letter from the previous organization\"\n                ];\n            var row;\n            // frm.clear_table('cc');\n            for(var i=0;i<ids.length;i++){\n                row = frm.add_child(\"check_list_for_joining\");\n                row.documents = ids[i];\n                frm.refresh_field(\"documents\");\n            }\n        }\n    },\n});\n\n// frappe.ui.form.on('Employee', {\n//     setup(frm){\n//         if(frm.is_new())\n//             {\n//             var ids = [\n//                 \"Copy of CV\",\n//                 \"Application Form\",\n//                 \"Academic testimonials (10th, 12th, Graduation, Post-Graduation)\",\n//                 \"Other Certifications (If Any)\",\n//                 \"Passport size colour Photographs \u2013 5 Nos.\",\n//                 \"Aadhar Card\",\n//                 \"PAN Card\",\n//                 \"Bank Account Detail\",\n//                 \"Last 2 months salary slips of previous organization\",\n//                 \"Clearance letter from the previous organization\",\n//                 \"Previous organization\u2019s Experience certificates\",\n//                 \"Landline No and official email ID of last company\",\n//                 \"PF nomination & declaration form- Form.2\",\n//                 \"ESI Nomination and Declaration Form Form-1 (If Applicable)\",\n//                 \"Passport/Visa Details\",\n//                 \"Interview call Letter\",\n//                 \"Resignation letter\",\n//                 \"Conduct disciplinary & appeal rule\",\n//                 \"Joining formality kit\",\n//                 \"Medical Health check-up\"\n//                 ];\n//             var row;\n//             // frm.clear_table('cc');\n//             for(var i=0;i<ids.length;i++){\n//                 row = frm.add_child(\"check_list_for_joining\");\n//                 row.documents = ids[i];\n//                 frm.refresh_field(\"documents\");\n//             }\n//         }\n//     },\n// });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Increment",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.417746",
  "module": "Advantisquartz",
  "name": "Get Updated CTC",
  "script": "frappe.ui.form.on('Employee Increment', {\n\tincrement_amount(frm) {\n\t    \n\t\tvar ctc = cur_frm.doc.ctc;\n\t\tvar increment_amount = cur_frm.doc.increment_amount;\n\t\tvar current_ctc = ctc + increment_amount;\n\t\tvar a;\n\t\tfrm.set_value('current_ctc', current_ctc);\n        frm.refresh_field('current_ctc');\n        \n       \n\t},\n\ton_submit(frm) {\n\t    var inc = cur_frm.doc.current_ctc;\n\t    var employee = cur_frm.doc.employee;\n        frappe.db.set_value('Employee', employee, 'ctc', inc);\n        frappe.db.commit();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Interview Questionnaire",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.396481",
  "module": "Advantisquartz",
  "name": "Get interview question",
  "script": "frappe.ui.form.on('Exit Interview Questionnaire', {\n    onload(frm){\n        if(frm.is_new())\n            {\n            var ids = [\n                \"Job Profile\",\n                \"Working Environment\",\n                \"Attitude/ Behaviour of Senior\",\n                \"Compensation\",\n                \"Learning & Development\",\n                \"Policy & Practices\"\n                ];\n            var row;\n            // frm.clear_table('cc');\n            for(var i=0;i<ids.length;i++){\n                row = frm.add_child(\"details\");\n                row.details = ids[i];\n                frm.refresh_field(\"details\");\n            }\n        }\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Interview Questionnaire",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.374148",
  "module": "Advantisquartz",
  "name": "Make field reqd",
  "script": "\nfrappe.ui.form.on('Exit Interview Questionnaire', {\n    onload: function (frm) {\n        // frm.set_df_property('que2', 'reqd', 1);\n        // frm.set_df_property('que3', 'reqd', 1);\n        // frm.set_df_property('que6', 'reqd', 1);\n        // frm.set_df_property('que8', 'reqd', 1);\n        if (frm.doc.docstatus === 1) { // Check if the document is submitted (docstatus = 1)\n            frm.set_df_property('que2', 'read_only', 0); // Replace 'your_heading_field' with the actual name of your heading field\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2023-08-02 18:25:15.164617",
  "module": "Advantisquartz",
  "name": "Created By Name",
  "script": "frappe.ui.form.on('Material Request', {\n\tbefpre_submit: function(frm) {\n    \tvar createdByName =cur_frm.doc.modified_by;\n    \tfrappe.call({\n\t\t\tmethod: \"frappe.client.get\",\n\t\t\targs: {\n\t\t\t\tdoctype: \"User\",\n\t\t\t\tfilters: { name: createdByName },\n\t\t\t\tfields: [\"full_name\"]\n\t\t\t},\n\t\t\tcallback: function(response) {\n\t\t\t\tvar user = response.message;\n\t\t\t\n\t\t\t\t\t// Set the form fields with the user's first and last name\n\t\t\t\t\tfrm.set_value(\"created_name\", user.full_name);\n\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.353881",
  "module": "Advantisquartz",
  "name": "Get Competency",
  "script": "frappe.ui.form.on('Interview', {\n    onload(frm) {\n        if (frm.is_new()) {\n            var ids = [\n                \"Functional / Subject Knowledge\",\n                \"Vision & Strategy\",\n                \"Business Acumen\",\n                \"Teamwork & Collaboration\",\n                \"Develop Self & Team\",\n                \"Administrative/Managerial  quality\",\n                \"Customer Focus\",\n                \"Innovates & Improves\",\n                \"Get Results\",\n                \"Communicate to Influence & Engage\",\n                \"Safety & Environment awareness\"\n            ];\n            var ids1 = [\n                \"Drive to Achieve\",\n                \"Learning Agility\",\n                \"Intellectual Capability\",\n                \"Managing Ambiguity\",\n                \"Emotional Maturity\"\n            ];\n            var row;\n\n            for (var i = 0; i < ids.length; i++) {\n                row = frm.add_child(\"rating\");\n                row.competency = ids[i];\n                row.personal_characteristics = ids1[i];\n                frm.refresh_field(\"rating\");\n            }\n        }\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.330918",
  "module": "Advantisquartz",
  "name": "Get gross salary",
  "script": "frappe.ui.form.on('Interview', {\n    job_applicant(frm) {\n        var job_applicant = cur_frm.doc.job_applicant;\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Job Applicant',\n                'filters': {'name': job_applicant},\n                'fields': ['lower_range', 'upper_range'] \n            },\n            callback: function(response) {\n                var data = response.message[0];\n                var present_gross = data.lower_range;\n                var expected_gross = data.upper_range;\n                console.log(present_gross, expected_gross);\n                \n                frm.clear_table('salary');\n                var row;\n                \n                row = frm.add_child('salary');\n                row.present_gross_salary = present_gross;\n                row.expected_gross_salary = expected_gross;\n                \n                frm.refresh_field('salary');\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.307945",
  "module": "Advantisquartz",
  "name": "Hide columns of child tables",
  "script": "frappe.ui.form.on('Your Parent DocType', {\n    refresh: function(frm) {\n        frm.fields_dict['salary'].grid.get_field('offered_gross_salary').get_query = function(doc, cdt, cdn) {\n            var status = frm.doc.status;\n            var child = locals[cdt][cdn];\n            var hideColumn = false;\n            \n            // Replace 'status' with the actual fieldname representing the status in your child table\n            if (child.status === 'Pending') {\n                hideColumn = true;\n            }\n            \n            return {\n                hidden: hideColumn\n            };\n        };\n    }\n});\n\n\n\n// frappe.ui.form.on('Interview', {\n//     refresh(frm) {\n//         var a = frm.doc.status;\n//         console.log(a);\n//         if (a == 'Pending'){\n//             var df = frappe.meta.get_docfield(\"salary\", \"offered_gross_salary\", frm.doc.name);\n//             df.read_only = 1;\n//         } else {\n//             var df = frappe.meta.get_docfield(\"salary\", \"offered_gross_salary\", frm.doc.name);\n//             df.read_only = 0; // If status is not 'Pending', remove the read-only property\n//         }\n//     }\n// });\n\n\n\n// frappe.ui.form.on('Interview', {\n// \trefresh(frm) {\n//         var a = cur_frm.doc.status;\n//         console.log(a);\n//         if (a == 'Pending'){\n//             var df = frappe.meta.get_docfield(\"salary\",\"offered_gross_salary\", cur_frm.doc.name);\n//             df.read_only = 1\n//         }\n        \n// \t}\n// })",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Training Need Identification",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.253490",
  "module": "Advantisquartz",
  "name": "Get department wise employee",
  "script": "frappe.ui.form.on('Training Need Identification', {\n\tdepartment(frm) {\n\t\tvar department = cur_frm.doc.department;\n// \t\tconsole.log(department);\n\t\t\n\t\tfrappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Employee',\n                'filters': {'department': department},\n                'fields': ['name'] \n            },\n            callback: function(response) {\n                // console.log(response.message)\n                var emp_name = response.message;\n                \n                frm.clear_table('training_details');\n                var row;\n                \n                for(var i=0;i<emp_name.length;i++)\n                {\n                    row = frm.add_child('training_details');\n                    row.targeted_group_name_of_employee = emp_name[i].name;\n                }\n                \n                frm.refresh_field('training_details');\n                \n            }\n\t\t});\n\t\t\n\t}\n})",
  "view": "Form"
 }
]