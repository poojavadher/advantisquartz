[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-09-15 16:34:47.856666",
  "module": "Advantisquartz",
  "name": "custom button to Item-wise Purchase History",
  "script": "frappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t    if (frappe.user.has_role('Purchase Manager') || frappe.user.has_role('Purchase User')){\n    \t\tfrm.add_custom_button(__(\"Item-Wise Purchase History\"), function() {\n    \t\t\t\tfrappe.route_options = {\n    \t\t\t\t\t\"item_code\": frm.doc.name\n    \t\t\t\t};\n    \t\t\t\tfrappe.set_route(\"query-report\", \"Item-wise Purchase History\");\n    \t\t\t}, __(\"View\"));\n\t    }\n\t},\n\thas_serial_no(frm){\n\t    if(frm.doc.has_serial_no==1){\n\t        var series = String(frm.doc.name)+\"-.#####\";\n\t        cur_frm.set_value('serial_no_series',series);\n\t        frm.refresh_field(serial_no_series);\n\t    }\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2023-09-14 13:46:46.189095",
  "module": "Advantisquartz",
  "name": "Get mesh qc template to Quality Inspection",
  "script": "frappe.ui.form.on('Quality Inspection', {\n\tmesh_qc_template(frm) {\n\t    if (frm.doc.mesh_qc_template){\n\t       frappe.model.with_doc(\"Mesh QC Template\", frm.doc.mesh_qc_template, function() {\n                var tabletransfer= frappe.model.get_doc(\"Mesh QC Template\", frm.doc.mesh_qc_template);\n                $.each(tabletransfer.parameters, function(index, row){\n                    var d = frm.add_child(\"lab_sections_and_mesh_no\");\n                    d.lab_section = row.lab_section;\n                    d.mesh_no = row.mesh_no;\n                    frm.refresh_field(\"lab_sections_and_mesh_no\");\n                });\n            });\n\t    }\n\t    else{\n\t        frm.clear_table(\"lab_sections_and_mesh_no\");\n\t        frm.refresh_field(\"lab_sections_and_mesh_no\");\n\t    }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2023-08-24 18:38:47.282057",
  "module": "Advantisquartz",
  "name": "Gate Entry filter for Sales return",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"gate_entry\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.return_against,\n    \t            'docstatus': 0\n    \t        }\n    \t    };\n    \t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-08-11 12:26:59.182144",
  "module": "Advantisquartz",
  "name": "quality",
  "script": "\n\nfrappe.ui.form.on('Stock Entry',{\n    issue_location:function(frm){\n     frm.set_query(\"machine\",function(){\n\t    return{\n\t        filters:{\n\t            'location':cur_frm.doc.issue_location\n\t           \n\t        }\n\t        \n\t    };\n\t});\n\n    }\n})\nfrappe.ui.form.on('Stock Entry', {\n\tafter_cancel:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n\t     \n            var serial = d.serial_no;\n            if(serial){\n                  console.log(serial);\n               $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,'custom_status',\"Inactive\");\n                });\n            }\n          \n\t\t \n\t    }); \n\t}\n})\nfrappe.ui.form.on('Stock Entry', {\n\tonload:function(frm) {\n\t    if(cur_frm.doc.stock_entry_type == \"Manufacture\"){\n\t                 var work_order = cur_frm.doc.work_order;\n\t $.each(frm.doc.items || [], function(i, d) {\n            // var serial = d.serial_no;\n            // console.log(serial);\n            //   $.each(serial.split('\\n'), function(index, value) {\n                 \n            //      frappe.db.set_value('Serial No',value,'custom_status',\"Inactive\");\n            //     });\n            if(work_order !==null && d.is_finished_item == 1){\n                console.log(\"hello\")\n                 frappe.db.get_value('Work Order', {'name': work_order }, ['production_item','lot_no'],function(response) {\n            // 'response' will contain the fetched value\n            var b = response['production_item'];\n            var batch =response['lot_no']            // Split the fetched value into an array\n           \n           if(d.item_code == b){\n              d.lot_no = batch\n           }\n         \n          \n        });\n            }\n\t    });  \n\t    }\n  \n\t}\n})\nfrappe.ui.form.on('Stock Entry', {\n\ton_submit:function(frm) {\n\t    if(cur_frm.doc.stock_entry_type == \"Manufacture\"){\n\t        \t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            // console.log(serial);\n           \n            if(work_order !==null && d.is_finished_item == 1){\n             \n            \n              $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,{\n                     'custom_batch_no':d.lot_no,\n                     'custom_status':\"Active\",\n                     'serial_type':\"Press\"\n                     \n                 }\n                     );\n                });\n      \n            }\n\t    }); \n\t    }\n            var work_order = cur_frm.doc.work_order;\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No Update",
  "enabled": 1,
  "modified": "2023-08-11 13:04:57.060629",
  "module": "Advantisquartz",
  "name": "Serial No Update",
  "script": "frappe.ui.form.on('Serial No Update', {\n\ton_submit:function(frm) {\n\t\n\t        $.each(frm.doc.press_item || [], function(i, d) {\n            var serial = d.serial_no;\n         \n            var batch_no = d.batch_no;\n           \n            var select_type = d.select_type;\n            var length = d.length;\n            var width = d.width\n            \n\t\t  frappe.db.set_value('Serial No',serial, {\n                'serial_no_type': select_type,\n                'custom_batch_no':batch_no,\n                'length':length,\n                'width':width,\n                'serial_type':\"Polish\"\n            });\n\t    }); \n\t    \n\t   \n\t  \n\t}\n})\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"serial_no\", \"press_item\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n       \n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"status\": \"Active\"  \n            }\n        };\n    });\n    \n};\n\n\n\nfrappe.ui.form.on('Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"press_item\"].grid.add_custom_button(__('Download'), function() {\n            // Fetch child table data\n            const childTableData = frm.doc.press_item;\n            \n            // Define a mapping of custom field names to child table field names\n            const fieldMapping = {\n              \n                \"serial_no\": \"serial_no\",\n                \"batch_no\":\"batch_no\",\n                \"select_type\":\"select_type\",\n                \"width\":\"width\",\n                \"length\":\"length\",\n                \"weight\":\"weight\"\n                \n                // Map \"qty\" to \"lot_no\" field in the child table\n            };\n\n            // Create a CSV string with custom field names as the first row\n            const csvContent = \"data:text/csv;charset=utf-8,\" \n                + Object.keys(fieldMapping).join(',') + '\\n'\n                + childTableData.map(row => Object.keys(fieldMapping).map(customField => row[fieldMapping[customField]] || \"\").join(',')).join('\\n');\n\n            // Create a temporary anchor element to trigger the download\n            const anchor = document.createElement('a');\n            anchor.href = encodeURI(csvContent);\n            anchor.target = '_blank';\n            anchor.download = 'child_table_data.csv';\n            anchor.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"press_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }\n});\n\nfrappe.ui.form.on('Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"press_item\"].grid.add_custom_button(__('Upload'), function() {\n            // Create a file input element dynamically\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.csv,.xlsx';\n            \n            // Trigger the file selection when the file input changes\n            fileInput.addEventListener('change', function(event) {\n                handleFileUpload(event.target.files[0]);\n            });\n\n            // Trigger the file input click event\n            fileInput.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"press_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }  \n});\nfunction handleFileUpload(file) {\n    if (!file) {\n        frappe.msgprint(__('No file selected.'));\n        return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = function(event) {\n        var csvData = event.target.result;\n        processData(csvData);\n    };\n    reader.readAsText(file);\n}\nfunction processData(csvData) {\n    var lines = csvData.split('\\n');\n    var fieldNames = lines[0].split(','); // Assuming the first row contains field names\n\n    // Remove the header line from the lines array\n    lines.splice(0, 1);\n\n    var pressItems = [];\n    for (var i = 0; i < lines.length; i++) {\n        var values = lines[i].split(',');\n\n        // Skip empty lines\n        if (values.length === 1 && values[0].trim() === '') {\n            continue;\n        }\n\n        var pressItem = {};\n        for (var j = 0; j < fieldNames.length; j++) {\n            // Trim any leading/trailing spaces from field names and values\n            var fieldName = fieldNames[j].trim();\n            var value = values[j].trim();\n\n            // Map the field name with its corresponding value\n            pressItem[fieldName] = value;\n        }\n\n        pressItems.push(pressItem);\n    }\n\n    // Get the current form instance\n    var frm = cur_frm;\n\n    // Clear existing child table rows\n    frm.clear_table('press_item');\n\n    // Add new child table rows based on the CSV data\n    for (var k = 0; k < pressItems.length; k++) {\n        var child = frm.add_child('press_item', pressItems[k]);\n    }\n\n    // Refresh the child table to display the newly added rows\n    frm.refresh_field('press_item');\n\n    frappe.msgprint(__('CSV data has been successfully loaded into the child table.'));\n}\n\nfrappe.ui.form.on('Serial No Update', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Get Serial No.'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Serial No\",\n                target: me.frm,\n                setters: {\n                    custom_status: \"Active\",\n                    item_code: null,\n                    serial_type:\"Press\"\n                },\n                add_filters_group: 1,\n                columns: [\"status\"],\n                action(selections){\n                    console.log(selections);\n                    d.dialog.hide();\n\n                    var child_table = cur_frm.doc.press_item || [];\n                    frm.clear_table(\"press_item\");\n                    \n                    selections.forEach(function(d){\n                        \n                            frappe.call({\n                       method: \"serial\",\n                       args: {\n                           \"serial_name\": d\n                           \n                       }, \n                       callback: function(data)\n                       {\n                           \n                           var row = frm.add_child(\"press_item\");\n                            row.serial_no = d;\n                            row.batch_no=data.custom_batch_no;\n                          \n                            frm.refresh_field(\"press_item\");\n                       }\n                         })\n\n  \n                    })\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-08-10 13:25:08.591708",
  "module": "Advantisquartz",
  "name": "Default schedule date in Purchase Order",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n        if (frm.is_new()) {  // Check if the form is new\n            var a = frm.doc.transaction_date;\n            frm.set_value('schedule_date', frappe.datetime.add_days(a, 7));\n          \n        }\n    }\n});\nfrappe.ui.form.on('Purchase Order', {\n    schedule_date: function(frm) {\n      \tfrm.doc.items.forEach(function(child) {\n      \t    child.schedule_date = cur_frm.doc.schedule_date\n      \t})\n    }\n});\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tif(output){\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Received\")\n\t\t}\n\t}\n});\nfrappe.ui.form.on('Purchase Order', {\n\tafter_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tif(output){\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Pending\")\n\t\t}\n\t}\n});\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    after_save: function(frm) { \n        var a = [];\n        frm.doc.items.forEach(function(child) {\n            if (child.material_request) {\n                a.push(child.material_request);\n                } });\n                a = [...new Set(a)];\n                if (a.length > 0) {\n                    var material = a.join(', ');\n                    }\n                    if(a.length !== 0) {\n                        frappe.db.get_value('Material Request', {\n                            'name': material\n                            \n                        }, \n                        'remarks', function(response) {\n                            var material_remarks = response.remarks;\n                            console.log(material_remarks) \n                            frm.set_value(\"remarks\",material_remarks)\n                            });\n                            } \n    } });\n    \n    \n    \n  \n    \n    \n\nfrappe.ui.form.on('Purchase Order Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\nfrappe.ui.form.on('Purchase Order',{\n    after_save:function(frm){\n\n    frm.doc.items.forEach(function(child) {\n    if(child.item_tax_template){\n          frappe.call({\n        method:\"tax\",\n        args:{\n            no:child.item_tax_template\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      child.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n\n    }\n    })  \n\n    }\n    \n});\nfrappe.ui.form.on(\"Purchase Order\",{\n    onload:function(frm){\n        if (frm.is_new()) {\n            frm.doc.items.forEach(function(child) {\n                if(child.supplier_quotation){\n                    \n                frappe.call({\n                    method:\"purchase\",\n                    args:{\n                        supplier_quotation:child.supplier_quotation\n                    }\n                }).then(records=>{\n                    child.request_for_quotation = records.request\n                })\n                }\n            })\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-08-25 13:00:42.477294",
  "module": "Advantisquartz",
  "name": "Quotation Sales Uom Calculation",
  "script": "frappe.ui.form.on(\"Quotation Item\", \"uom_conversion_value\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"conversion_factor\", 1 / d.uom_conversion_value); \n    cur_frm.refresh_field(\"Quotation Item\");\n    });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-08-25 15:41:30.168909",
  "module": "Advantisquartz",
  "name": "sales order",
  "script": "frappe.ui.form.on(\"Sales Order Item\", \"uom_conversion_value\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"conversion_factor\", 1 / d.uom_conversion_value); \n    cur_frm.refresh_field(\"Sales Order Item\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2023-09-05 16:12:51.690156",
  "module": "Advantisquartz",
  "name": "Status Changed",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Received\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n  validate: function(frm) {\n\n      frm.set_value(\"supplier_quotation_status\",\"Pending\")\n    \n  }\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_cancel: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Pending\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_save: function(frm) {\n\t    frm.doc.items.forEach(function(child){\n\t       \n\t            if(child.initial_discount_){\n\t                var dis = child.initial_rate * child.qty;\n\t                \n\t                var dis_amt = (dis * child.initial_discount_)/100\n\t                child.initial_amount=dis - dis_amt\n\t            }\n\t            else{\n\t                \n\t            var a = child.initial_rate * child.qty;\n\t          \n\t            child.initial_amount = a\n\t            \n\t            }\n\t        \n\t       \n\t    })\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tonload: function(frm) {\n\t    if(frm.is_new){\n\t        \n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\tfrm.set_value(\"request_for_quotation\",child.request_for_quotation)\n\t\t\t}\n\t\t});\n\t    }\n\t\n\t\t\n\t\t\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_save: function(frm) {\n\t    if(frm.is_new){\n\t        \n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\tfrm.set_value(\"request_for_quotation\",child.request_for_quotation)\n\t\t\t}\n\t\t});\n\t    }\n\t\n\t\t\n\t\t\n\t}\n});\n\n\nfrappe.ui.form.on(\"Supplier Quotation Item\", \"initial_discount_\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"initial_amount\", ((d.initial_rate * d.qty) *  d.initial_discount_)/100); \n    cur_frm.refresh_field(\"Supplier Quotation Item\");\n});\n\nfrappe.ui.form.on(\"Supplier Quotation Item\", \"initial_rate\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"initial_amount\", ((d.initial_rate * d.qty) *  d.initial_discount_)/100); \n    cur_frm.refresh_field(\"Supplier Quotation Item\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-09-18 18:36:06.165807",
  "module": "Advantisquartz",
  "name": "Gate Entry filter in material receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\tbill_no(frm) {\n\t\tfrm.set_query(\"gate_entry\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.bill_no,\n    \t            'invoice_date':cur_frm.doc.bill_date,\n    \t            'docstatus': 0\n    \t        }\n    \t    };\n    \t});\n\t},\n// \tbefore_submit(frm){\n//         frappe.call({\n//             method: \"erpnext.buying.api.link_gate_entry\",\n//             args: {\n//                 pr_doc: frm.doc.name,\n//                 parent_doc : frm.doc.gate_entry\n//             },\n//             callback: function(r) {\n//                 console.log(\"Success\");\n//             }\n//         });\n//     }\n});\n\nfrappe.ui.form.on('Purchase Receipt Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n\tlocation: function(frm) {\n\t\t$.each(frm.doc.items || [], function(i, d) {\n\t\t\tfrm.doc.items[i].location = frm.doc.location;\n\t\t});\n\n\t\t// Refresh the table to update the values\n\t\tfrm.refresh_field('items');\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Repair",
  "enabled": 1,
  "modified": "2023-07-10 17:53:27.849877",
  "module": "Advantisquartz",
  "name": "Asset Repair Gate entry filter",
  "script": "frappe.ui.form.on('Asset Repair', {\n\tinvoice_no(frm) {\n\t\tfrm.set_query(\"gate_entry_no\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.invoice_no,\n    \t            'invoice_date':cur_frm.doc.invoice_date,\n    \t        }\n    \t    };\n    \t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packing list",
  "enabled": 1,
  "modified": "2023-09-05 16:35:01.517947",
  "module": "Advantisquartz",
  "name": "packing",
  "script": "frappe.ui.form.on('Packing list', {\n\tafter_save:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            console.log(serial);\n            \n\t\t  frappe.db.set_value('Serial No',serial,{\n\t\t      'custom_status':\"Hold\",\n\t\t      \"serial_type\":\"\"\n\t\t  });\n\t    }); \n\t}, \n\t\n    \titems: function(frm) {\n\t    console.log(`Hello`)\n// \t\tvar removedSerials = [];\n\n// \t\t// Find serial numbers that were removed or entire rows that were deleted\n// \t\t$.each(frm.doc.items || [], function(i, d) {\n// \t\t\tif (d.__islocal) {\n// \t\t\t\t// Entire row was deleted\n// \t\t\t\tremovedSerials.push(d.serial_no);\n// \t\t\t}\n// \t\t});\n\n// \t\t// Change status to \"Active\" for removed serial numbers\n// \t\t$.each(removedSerials, function(i, serial) {\n// \t\t\tfrappe.db.set_value('Serial No', serial, {\n// \t\t\t\t'custom_status': 'Active',\n// \t\t\t\t'serial_type': ''\n// \t\t\t});\n// \t\t});\n\t}\n})\n\n\n\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"serial_no\", \"items\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n        var itemcode = child.item_code;\n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"item_code\": itemcode,\n                \"status\":\"Active\",\n                \"serial_type\":\"Finish\"\n            }\n        };\n    });\n    \n};\nfrappe.ui.form.on('Packing list', {\n\tcontainer_no:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n          d.container_no = cur_frm.doc.container_no;\n\t    }); \n\t}\n});\n\n\nfrappe.ui.form.on('Packing list', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Get Serial No.'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Serial No\",\n                target: frm,\n                setters: {\n                    custom_status: \"Active\",\n                    serial_type:\"Finish\",\n                    item_code: null,\n                    quality:null\n                  \n                },\n                add_filters_group: 1,\n                action(selections) {\n                    console.log(selections);\n                    d.dialog.hide();\n\n                    var child_table = frm.doc.items || [];\n                    frm.clear_table(\"items\");\n\n                    selections.forEach(function(d) {\n                        frappe.call({\n                            method: \"serial\",\n                            args: {\n                                \"serial_name\": d\n                            }, \n                            callback: function(data) {\n                                var row = frm.add_child(\"items\");\n                                row.serial_no = d;\n                                row.item_code = data.item_code;\n                                row.production_weight = data.gross_weight;\n                                row.production_length = data.length;\n                                row.production_width = data.width;\n                                row.production_grade = data.quality; // Make sure 'quality' is set properly\n                                frm.refresh_field(\"items\"); // Refresh the data table to display the updated 'Quality' value\n                            }\n                        });\n                    });\n                }\n            });\n            \n        });\n        \n    }\n});\n\n\n\n\nfrappe.ui.form.on('Packing list', {\n    refresh(frm) {\n        frm.fields_dict[\"items\"].grid.add_custom_button(__('Download'), function() {\n            // Fetch child table data\n            const childTableData = frm.doc.items;\n            \n            // Define a mapping of custom field names to child table field names\n            const fieldMapping = {\n              \n                \"container_no\": \"container_no\",\n                \"item_code\":\"item_code\",\n                \"serial_no\":\"serial_no\",\n                \"production_weight\":\"production_weight\",\n                \"production_length\":\"production_length\",\n                \"production_width\":\"production_width\",\n                \"production_grade\":\"production_grade\",\n                \"sales_length\":\"sales_length\",\n                \"sales_grade\":\"sales_grade\",\n                \"sales_weight\":\"sales_weight\"\n                \n                // Map \"qty\" to \"lot_no\" field in the child table\n            };\n\n            // Create a CSV string with custom field names as the first row\n            const csvContent = \"data:text/csv;charset=utf-8,\" \n                + Object.keys(fieldMapping).join(',') + '\\n'\n                + childTableData.map(row => Object.keys(fieldMapping).map(customField => row[fieldMapping[customField]] || \"\").join(',')).join('\\n');\n\n            // Create a temporary anchor element to trigger the download\n            const anchor = document.createElement('a');\n            anchor.href = encodeURI(csvContent);\n            anchor.target = '_blank';\n            anchor.download = 'packing_list.csv';\n            anchor.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"items\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }\n});\n\nfrappe.ui.form.on('Packing list', {\n    refresh(frm) {\n        frm.fields_dict[\"items\"].grid.add_custom_button(__('Upload'), function() {\n            // Create a file input element dynamically\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.csv,.xlsx';\n            \n            // Trigger the file selection when the file input changes\n            fileInput.addEventListener('change', function(event) {\n                handleFileUpload(event.target.files[0]);\n            });\n\n            // Trigger the file input click event\n            fileInput.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"items\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }  \n});\nfunction handleFileUpload(file) {\n    if (!file) {\n        frappe.msgprint(__('No file selected.'));\n        return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = function(event) {\n        var csvData = event.target.result;\n        processData(csvData);\n    };\n    reader.readAsText(file);\n}\nfunction processData(csvData) {\n    var lines = csvData.split('\\n');\n    var fieldNames = lines[0].split(','); // Assuming the first row contains field names\n\n    // Remove the header line from the lines array\n    lines.splice(0, 1);\n\n    var pressItems = [];\n    for (var i = 0; i < lines.length; i++) {\n        var values = lines[i].split(',');\n\n        // Skip empty lines\n        if (values.length === 1 && values[0].trim() === '') {\n            continue;\n        }\n\n        var pressItem = {};\n        for (var j = 0; j < fieldNames.length; j++) {\n            // Trim any leading/trailing spaces from field names and values\n            var fieldName = fieldNames[j].trim();\n            var value = values[j].trim();\n\n            // Map the field name with its corresponding value\n            pressItem[fieldName] = value;\n        }\n\n        pressItems.push(pressItem);\n    }\n\n    // Get the current form instance\n    var frm = cur_frm;\n\n    // Clear existing child table rows\n    frm.clear_table('items');\n\n    // Add new child table rows based on the CSV data\n    for (var k = 0; k < pressItems.length; k++) {\n        var child = frm.add_child('items', pressItems[k]);\n    }\n\n    // Refresh the child table to display the newly added rows\n    frm.refresh_field('items');\n\n    frappe.msgprint(__('CSV data has been successfully loaded into the child table.'));\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No",
  "enabled": 1,
  "modified": "2023-08-01 17:39:03.952317",
  "module": "Advantisquartz",
  "name": "status color",
  "script": "frappe.listview_settings['Serial No'] = {\radd_fields: [ \"custom_status\"],\rget_indicator:function(doc){\rif (doc.custom_status === \"Hold\") {\r\t\t\treturn [__(\"Hold\"), \"red\", \"status,=,Hold\"];\r    }\rif (doc.custom_status === \"Delivered\") {\r\t\t\treturn [__(\"Delivered\"), \"green\", \"status,=,Delivered\"];\r    }\r    if (doc.custom_status === \"Active\") {\r\t\t\treturn [__(\"Active\"), \"green\", \"status,=,Active\"];\r    }\r    if (doc.custom_status === \"Inactive\") {\r\t\t\treturn [__(\"Inactive\"), \"gray\", \"status,=,Inactive\"];\r    }\r }\r}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-09-05 16:39:43.161482",
  "module": "Advantisquartz",
  "name": "Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note', {\n  packing_scanner: function (frm) {\n    var packing = cur_frm.doc.packing_scanner;\n    console.log(packing);\n\n    frappe.call({\n      method: \"packing\",\n      args: {\n        \"packing_list\": packing\n      },\n      callback: function (records) {\n        $.each(frm.doc.items || [], function (i, d) {\n          var sales_order_id = d.against_sales_order;\n          var item_code = records.item_code.split(\",\");\n          var serial_no = records.serial_no.split(\",\");\n          var item_code1 = records.item_code1.split(\",\")\n          var serial_count = records.serial_count.split(\",\")\n          var as = records.sales_length.split(\",\")\n          var item_code2 = records.item_code2.split(\",\")\n          var item_code3 = records.item_code3.split(\",\")\n          var weight = records.sales_weight.split(\",\")\n          var item_code4 = records.item_code4.split(\",\")\n          var grade = records.sales_grade.split(\",\")\n          var item_code5 = records.item_code5.split(\",\")\n          var item_container = records.container.split(\",\")\n          \n          \n          var index = item_code.indexOf(d.item_code);\n          var index_z = item_code1.indexOf(d.item_code);\n          var index_length = item_code2.indexOf(d.item_code)\n          var index_weight = item_code3.indexOf(d.item_code)\n          var index_grade = item_code4.indexOf(d.item_code)\n          var index_container = item_code5.indexOf(d.item_code)\n          if (index !== -1 && d.against_sales_order === sales_order_id && index_z !== -1 && index_length !== -1 && index_weight !== -1  && index_grade !== -1 && index_container !== -1) {\n            d.serial_no = serial_no[index] ;\n            d.qty = serial_count[index_z]\n            d.packing_length = as[index_length]\n            d.packing_weight = weight[index_weight]\n            d.packing_grade = grade[index_grade]\n            d.container_no = item_container[index_container]\n            console.log(\"yes\");\n          } else {\n            console.log(\"no\");\n          }\n        });\n      }\n    });\n  }\n});\n\n                 \nfrappe.ui.form.on('Delivery Note', {\n\ton_submit:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            console.log(serial);\n               $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,'custom_status',\"Delivered\");\n                });\n\t\t \n\t    }); \n\t}\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Polish Serial No Update",
  "enabled": 1,
  "modified": "2023-08-11 13:12:50.550348",
  "module": "Advantisquartz",
  "name": "Polish Serial No Update",
  "script": "frappe.ui.form.on('Polish Serial No Update', {\n\ton_submit:function(frm) {\n\n\t        $.each(frm.doc.polish_item || [], function(i, d) {\n            var serial = d.slab_no;\n            var batch_no = d.batch;\n            var weight = d.weight;\n            var length = d.length;\n            var width = d.width;\n            var grade = d.grade;\n\t\t  frappe.db.set_value('Serial No',serial, {\n                'gross_weight': weight,\n                'quality':grade,\n                'custom_batch_no':batch_no,\n                'length':length,\n                'width':width,\n                'serial_type':\"Finish\"\n\n            });\n\t    }); \n\t    \n\t}\n})\ncur_frm.cscript.onload = function(frm) {\n    \n\n   \n    cur_frm.set_query(\"slab_no\", \"polish_item\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        \n        var itemcode = child.item_code;\n      \n\n        return {\n            \"filters\": {\n               \n                \n                \"item_code\": itemcode,\n                \"custom_status\":\"Active\"\n            }\n        };\n    });\n    \n};\n\n\nfrappe.ui.form.on('Polish Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"polish_item\"].grid.add_custom_button(__('Download'), function() {\n            // Fetch child table data\n            const childTableData = frm.doc.polish_item;\n            \n            // Define a mapping of custom field names to child table field names\n            const fieldMapping = {\n              \n                \"item_code\": \"item_code\",\n                \"item_name\":\"item_name\",\n                \"slab_no\":\"slab_no\",\n                \"weight\":\"weight\",\n                \"length\":\"length\",\n                \"width\":\"width\",\n                \"batch\":\"batch\",\n                \"grade\":\"grade\"\n                \n                \n                // Map \"qty\" to \"lot_no\" field in the child table\n            };\n\n            // Create a CSV string with custom field names as the first row\n            const csvContent = \"data:text/csv;charset=utf-8,\" \n                + Object.keys(fieldMapping).join(',') + '\\n'\n                + childTableData.map(row => Object.keys(fieldMapping).map(customField => row[fieldMapping[customField]] || \"\").join(',')).join('\\n');\n\n            // Create a temporary anchor element to trigger the download\n            const anchor = document.createElement('a');\n            anchor.href = encodeURI(csvContent);\n            anchor.target = '_blank';\n            anchor.download = 'child_table_data.csv';\n            anchor.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"polish_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }\n});\n\nfrappe.ui.form.on('Polish Serial No Update', {\n    refresh(frm) {\n        frm.fields_dict[\"polish_item\"].grid.add_custom_button(__('Upload'), function() {\n            // Create a file input element dynamically\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.csv,.xlsx';\n            \n            // Trigger the file selection when the file input changes\n            fileInput.addEventListener('change', function(event) {\n                handleFileUpload(event.target.files[0]);\n            });\n\n            // Trigger the file input click event\n            fileInput.click();\n        });\n\n        // Change button style to match the primary color\n        frm.fields_dict[\"polish_item\"].grid.grid_buttons.find('.btn-custom').removeClass('btn-default').addClass('btn-primary');\n    }  \n});\nfunction handleFileUpload(file) {\n    if (!file) {\n        frappe.msgprint(__('No file selected.'));\n        return;\n    }\n\n    var reader = new FileReader();\n    reader.onload = function(event) {\n        var csvData = event.target.result;\n        processData(csvData);\n    };\n    reader.readAsText(file);\n}\nfunction processData(csvData) {\n    var lines = csvData.split('\\n');\n    var fieldNames = lines[0].split(','); // Assuming the first row contains field names\n\n    // Remove the header line from the lines array\n    lines.splice(0, 1);\n\n    var pressItems = [];\n    for (var i = 0; i < lines.length; i++) {\n        var values = lines[i].split(',');\n\n        // Skip empty lines\n        if (values.length === 1 && values[0].trim() === '') {\n            continue;\n        }\n\n        var pressItem = {};\n        for (var j = 0; j < fieldNames.length; j++) {\n            // Trim any leading/trailing spaces from field names and values\n            var fieldName = fieldNames[j].trim();\n            var value = values[j].trim();\n\n            // Map the field name with its corresponding value\n            pressItem[fieldName] = value;\n        }\n\n        pressItems.push(pressItem);\n    }\n\n    // Get the current form instance\n    var frm = cur_frm;\n\n    // Clear existing child table rows\n    frm.clear_table('polish_item');\n\n    // Add new child table rows based on the CSV data\n    for (var k = 0; k < pressItems.length; k++) {\n        var child = frm.add_child('polish_item', pressItems[k]);\n    }\n\n    // Refresh the child table to display the newly added rows\n    frm.refresh_field('polish_item');\n\n    frappe.msgprint(__('CSV data has been successfully loaded into the child table.'));\n}\n\nfrappe.ui.form.on('Polish Serial No Update', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Get Serial No.'), function() {\n            var d = new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Serial No\",\n                target: me.frm,\n                setters: {\n                    custom_status: \"Active\",\n                    serial_type:\"Polish\",\n                    item_code: null,\n                },\n                add_filters_group: 1,\n                columns: [\"status\"],\n                action(selections){\n                    console.log(selections);\n                    d.dialog.hide();\n\n                    var child_table = cur_frm.doc.polish_item || [];\n                    frm.clear_table(\"polish_item\");\n                    \n                    selections.forEach(function(d){\n                        \n                            frappe.call({\n                       method: \"serial\",\n                       args: {\n                           \"serial_name\": d\n                           \n                       }, \n                       callback: function(data)\n                       {\n                           \n                           var row = frm.add_child(\"polish_item\");\n                            row.slab_no = d;\n                            row.item_code = data.item_code\n                            row.item_name = data.item_name\n                            row.batch=data.custom_batch_no\n                            row.weight=data.gross_weight\n                            row.length = data.length\n                            row.width=data.width\n                          \n frm.refresh_field(\"polish_item\");\n                       }\n                         })\n\n  \n                    })\n                }\n            });\n        });\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.504451",
  "module": "Advantisquartz",
  "name": "Get Appointment letter date",
  "script": "frappe.ui.form.on('Employee', {\n\tjob_applicant(frm) {\n\t    var employee = cur_frm.doc.employee;\n\t   // console.log(employee);\n        var job_applicant = frm.doc.job_applicant;\n        var appointmentDate;\n        // console.log(job_applicant);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Appointment Letter\",\n                filters: {\n                    job_applicant: job_applicant\n                },\n                fields: [\"job_applicant\", \"appointment_date\"]\n            },\n            callback: function (response) {\n                // console.log(response.message[0].appointment_date);\n                appointmentDate = response.message[0].appointment_date;\n                // console.log(appointmentDate);\n                var formattedDate = frappe.datetime.str_to_user(appointmentDate);\n                // console.log(formattedDate);\n                frm.set_value('appointment_letter_date', formattedDate);\n                frm.refresh_field('appointment_letter_date');\n            }\n        });\n        \n        // frappe.db.set_value('Employee', employee, 'appointment_letter_date', appointmentDate)\n        \n       }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.462308",
  "module": "Advantisquartz",
  "name": "Get probation period end date",
  "script": "frappe.ui.form.on('Employee', {\r    date_of_joining(frm) {\r        var probation_period = cur_frm.doc.probation_period;\r        var date_of_joining = cur_frm.doc.date_of_joining;\r        var a;\r        var b;\r        \r        var startDate = new Date(date_of_joining);\r\r        var probationEndDate = new Date(startDate);\r        probationEndDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        probationEndDate.setMonth((startDate.getMonth() + probation_period) % 12);\r        probationEndDate.setDate(probationEndDate.getDate() - 1);\r\r        var day = probationEndDate.getDate();\r        var month = probationEndDate.getMonth() + 1; \r        var year = probationEndDate.getFullYear();\r        a = `${day < 10 ? '0' : ''}${day}-${month1 < 10 ? '0' : ''}${month}-${year}`;\r\r        // console.log(a);\r\r        var employmentStartDate = new Date(startDate);\r        employmentStartDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        employmentStartDate.setMonth((startDate.getMonth() + probation_period) % 12);\r\r        var day1 = employmentStartDate.getDate();\r        var month1 = employmentStartDate.getMonth() + 1; \r        var year1 = employmentStartDate.getFullYear();\r        b = `${day1 < 10 ? '0' : ''}${day1}-${month1 < 10 ? '0' : ''}${month1}-${year1}`;\r\r        // console.log(b);\r        \r        frm.set_value('probation_period_end_date', a);\r        frm.refresh_field('probation_period_end_date');\r        frm.set_value('employment_start_date', b);\r        frm.refresh_field('employment_start_date');\r    },\r    probation_period(frm) {\r        var probation_period = cur_frm.doc.probation_period;\r        var date_of_joining = cur_frm.doc.date_of_joining;\r        var a;\r        var b;\r        \r        var startDate = new Date(date_of_joining);\r\r        var probationEndDate = new Date(startDate);\r        probationEndDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        probationEndDate.setMonth((startDate.getMonth() + probation_period) % 12);\r        probationEndDate.setDate(probationEndDate.getDate() - 1);\r\r        var day = probationEndDate.getDate();\r        var month = probationEndDate.getMonth() + 1; \r        var year = probationEndDate.getFullYear();\r        a = `${day < 10 ? '0' : ''}${day}-${month1 < 10 ? '0' : ''}${month}-${year}`;\r\r        // console.log(a);\r\r        var employmentStartDate = new Date(startDate);\r        employmentStartDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        employmentStartDate.setMonth((startDate.getMonth() + probation_period) % 12);\r\r        var day1 = employmentStartDate.getDate();\r        var month1 = employmentStartDate.getMonth() + 1; \r        var year1 = employmentStartDate.getFullYear();\r        b = `${day1 < 10 ? '0' : ''}${day1}-${month1 < 10 ? '0' : ''}${month1}-${year1}`;\r\r        // console.log(b);\r        \r        frm.set_value('probation_period_end_date', a);\r        frm.refresh_field('probation_period_end_date');\r        frm.set_value('employment_start_date', b);\r        frm.refresh_field('employment_start_date');\r    }\r})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.438947",
  "module": "Advantisquartz",
  "name": "Get check list",
  "script": "frappe.ui.form.on('Employee', {\n    setup(frm){\n        if(frm.is_new())\n            {\n            var ids = [\n                \"Copy of CV\",\n                \"Application Form\",\n                \"Academic testimonials (10th, 12th, Graduation, Post-Graduation)\",\n                \"Other Certifications (If Any)\",\n                \"Passport size colour Photographs \u2013 5 Nos.\",\n                \"Aadhar Card\",\n                \"PAN Card\",\n                \"Bank Account Detail\",\n                \"Last 2 months salary slips of previous organization\",\n                \"Clearance letter from the previous organization\"\n                ];\n            var row;\n            // frm.clear_table('cc');\n            for(var i=0;i<ids.length;i++){\n                row = frm.add_child(\"check_list_for_joining\");\n                row.documents = ids[i];\n                frm.refresh_field(\"documents\");\n            }\n        }\n    },\n});\n\n// frappe.ui.form.on('Employee', {\n//     setup(frm){\n//         if(frm.is_new())\n//             {\n//             var ids = [\n//                 \"Copy of CV\",\n//                 \"Application Form\",\n//                 \"Academic testimonials (10th, 12th, Graduation, Post-Graduation)\",\n//                 \"Other Certifications (If Any)\",\n//                 \"Passport size colour Photographs \u2013 5 Nos.\",\n//                 \"Aadhar Card\",\n//                 \"PAN Card\",\n//                 \"Bank Account Detail\",\n//                 \"Last 2 months salary slips of previous organization\",\n//                 \"Clearance letter from the previous organization\",\n//                 \"Previous organization\u2019s Experience certificates\",\n//                 \"Landline No and official email ID of last company\",\n//                 \"PF nomination & declaration form- Form.2\",\n//                 \"ESI Nomination and Declaration Form Form-1 (If Applicable)\",\n//                 \"Passport/Visa Details\",\n//                 \"Interview call Letter\",\n//                 \"Resignation letter\",\n//                 \"Conduct disciplinary & appeal rule\",\n//                 \"Joining formality kit\",\n//                 \"Medical Health check-up\"\n//                 ];\n//             var row;\n//             // frm.clear_table('cc');\n//             for(var i=0;i<ids.length;i++){\n//                 row = frm.add_child(\"check_list_for_joining\");\n//                 row.documents = ids[i];\n//                 frm.refresh_field(\"documents\");\n//             }\n//         }\n//     },\n// });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Increment",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.417746",
  "module": "Advantisquartz",
  "name": "Get Updated CTC",
  "script": "frappe.ui.form.on('Employee Increment', {\n\tincrement_amount(frm) {\n\t    \n\t\tvar ctc = cur_frm.doc.ctc;\n\t\tvar increment_amount = cur_frm.doc.increment_amount;\n\t\tvar current_ctc = ctc + increment_amount;\n\t\tvar a;\n\t\tfrm.set_value('current_ctc', current_ctc);\n        frm.refresh_field('current_ctc');\n        \n       \n\t},\n\ton_submit(frm) {\n\t    var inc = cur_frm.doc.current_ctc;\n\t    var employee = cur_frm.doc.employee;\n        frappe.db.set_value('Employee', employee, 'ctc', inc);\n        frappe.db.commit();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Interview Questionnaire",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.396481",
  "module": "Advantisquartz",
  "name": "Get interview question",
  "script": "frappe.ui.form.on('Exit Interview Questionnaire', {\n    onload(frm){\n        if(frm.is_new())\n            {\n            var ids = [\n                \"Job Profile\",\n                \"Working Environment\",\n                \"Attitude/ Behaviour of Senior\",\n                \"Compensation\",\n                \"Learning & Development\",\n                \"Policy & Practices\"\n                ];\n            var row;\n            // frm.clear_table('cc');\n            for(var i=0;i<ids.length;i++){\n                row = frm.add_child(\"details\");\n                row.details = ids[i];\n                frm.refresh_field(\"details\");\n            }\n        }\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Interview Questionnaire",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.374148",
  "module": "Advantisquartz",
  "name": "Make field reqd",
  "script": "\nfrappe.ui.form.on('Exit Interview Questionnaire', {\n    onload: function (frm) {\n        // frm.set_df_property('que2', 'reqd', 1);\n        // frm.set_df_property('que3', 'reqd', 1);\n        // frm.set_df_property('que6', 'reqd', 1);\n        // frm.set_df_property('que8', 'reqd', 1);\n        if (frm.doc.docstatus === 1) { // Check if the document is submitted (docstatus = 1)\n            frm.set_df_property('que2', 'read_only', 0); // Replace 'your_heading_field' with the actual name of your heading field\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2023-08-31 18:36:19.389793",
  "module": "Advantisquartz",
  "name": "Created By Name",
  "script": "frappe.ui.form.on('Material Request', {\n    onload: function(frm) {\n        if (frm.is_new()) {  // Check if the form is new\n            var a = frm.doc.transaction_date;\n            frm.set_value('schedule_date', frappe.datetime.add_days(a, 7));\n        }\n    }\n});\nfrappe.ui.form.on('Material Request', {\n    schedule_date: function(frm) {\n      \tfrm.doc.items.forEach(function(child) {\n      \t    child.schedule_date = cur_frm.doc.schedule_date\n      \t})\n    }\n});\n\nfrappe.ui.form.on('Material Request', {\n    refresh: function(frm) {\n        if (frappe.user_roles.includes(\"MR Creator\")) {\n             frm.fields_dict['items'].grid.toggle_display('rate');\n\n        }\n        else{\n            console.log(\"all\")\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.353881",
  "module": "Advantisquartz",
  "name": "Get Competency",
  "script": "frappe.ui.form.on('Interview', {\n    onload(frm) {\n        if (frm.is_new()) {\n            var ids = [\n                \"Functional / Subject Knowledge\",\n                \"Vision & Strategy\",\n                \"Business Acumen\",\n                \"Teamwork & Collaboration\",\n                \"Develop Self & Team\",\n                \"Administrative/Managerial  quality\",\n                \"Customer Focus\",\n                \"Innovates & Improves\",\n                \"Get Results\",\n                \"Communicate to Influence & Engage\",\n                \"Safety & Environment awareness\"\n            ];\n            var ids1 = [\n                \"Drive to Achieve\",\n                \"Learning Agility\",\n                \"Intellectual Capability\",\n                \"Managing Ambiguity\",\n                \"Emotional Maturity\"\n            ];\n            var row;\n\n            for (var i = 0; i < ids.length; i++) {\n                row = frm.add_child(\"rating\");\n                row.competency = ids[i];\n                row.personal_characteristics = ids1[i];\n                frm.refresh_field(\"rating\");\n            }\n        }\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.330918",
  "module": "Advantisquartz",
  "name": "Get gross salary",
  "script": "frappe.ui.form.on('Interview', {\n    job_applicant(frm) {\n        var job_applicant = cur_frm.doc.job_applicant;\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Job Applicant',\n                'filters': {'name': job_applicant},\n                'fields': ['lower_range', 'upper_range'] \n            },\n            callback: function(response) {\n                var data = response.message[0];\n                var present_gross = data.lower_range;\n                var expected_gross = data.upper_range;\n                console.log(present_gross, expected_gross);\n                \n                frm.clear_table('salary');\n                var row;\n                \n                row = frm.add_child('salary');\n                row.present_gross_salary = present_gross;\n                row.expected_gross_salary = expected_gross;\n                \n                frm.refresh_field('salary');\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 0,
  "modified": "2023-08-02 18:25:03.307945",
  "module": "Advantisquartz",
  "name": "Hide columns of child tables",
  "script": "frappe.ui.form.on('Your Parent DocType', {\n    refresh: function(frm) {\n        frm.fields_dict['salary'].grid.get_field('offered_gross_salary').get_query = function(doc, cdt, cdn) {\n            var status = frm.doc.status;\n            var child = locals[cdt][cdn];\n            var hideColumn = false;\n            \n            // Replace 'status' with the actual fieldname representing the status in your child table\n            if (child.status === 'Pending') {\n                hideColumn = true;\n            }\n            \n            return {\n                hidden: hideColumn\n            };\n        };\n    }\n});\n\n\n\n// frappe.ui.form.on('Interview', {\n//     refresh(frm) {\n//         var a = frm.doc.status;\n//         console.log(a);\n//         if (a == 'Pending'){\n//             var df = frappe.meta.get_docfield(\"salary\", \"offered_gross_salary\", frm.doc.name);\n//             df.read_only = 1;\n//         } else {\n//             var df = frappe.meta.get_docfield(\"salary\", \"offered_gross_salary\", frm.doc.name);\n//             df.read_only = 0; // If status is not 'Pending', remove the read-only property\n//         }\n//     }\n// });\n\n\n\n// frappe.ui.form.on('Interview', {\n// \trefresh(frm) {\n//         var a = cur_frm.doc.status;\n//         console.log(a);\n//         if (a == 'Pending'){\n//             var df = frappe.meta.get_docfield(\"salary\",\"offered_gross_salary\", cur_frm.doc.name);\n//             df.read_only = 1\n//         }\n        \n// \t}\n// })",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Training Need Identification",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.253490",
  "module": "Advantisquartz",
  "name": "Get department wise employee",
  "script": "frappe.ui.form.on('Training Need Identification', {\n\tdepartment(frm) {\n\t\tvar department = cur_frm.doc.department;\n// \t\tconsole.log(department);\n\t\t\n\t\tfrappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Employee',\n                'filters': {'department': department},\n                'fields': ['name'] \n            },\n            callback: function(response) {\n                // console.log(response.message)\n                var emp_name = response.message;\n                \n                frm.clear_table('training_details');\n                var row;\n                \n                for(var i=0;i<emp_name.length;i++)\n                {\n                    row = frm.add_child('training_details');\n                    row.targeted_group_name_of_employee = emp_name[i].name;\n                }\n                \n                frm.refresh_field('training_details');\n                \n            }\n\t\t});\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-08-11 15:07:25.367019",
  "module": "Advantisquartz",
  "name": "Unlink Gate Entry if purchase receipt",
  "script": "// Unlink Gate Entry if purchase return\n\nfrappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\tif(frm.is_new() && frm.doc.is_return == 1){\n\t\t    frm.doc.gate_entry = null;\n\t\t    frm.doc.bill_no = null;\n\t\t    frm.doc.bill_date = null;\n\t\t    frm.refesh_field('gate_entry','bill_no','bill_date');\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Type",
  "enabled": 1,
  "modified": "2023-08-14 12:52:59.848527",
  "module": "Advantisquartz",
  "name": "Get total leave",
  "script": "frappe.ui.form.on('Leave Type', {\n\tis_privilege_leave(frm) {\n\t    \n\t    var is_privilege_leave = cur_frm.doc.is_privilege_leave;\n\t   // console.log(is_privilege_leave);\n\t    if(is_privilege_leave == 1){\n\t     \n\t       // console.log(is_privilege_leave);\n\t       // var total_leaves = cur_frm.doc.total_leaves;\n\t       // var max_leaves_allowed = cur_frm.doc.max_leaves_allowed;\n\t     \n\t        // var calculation = total_leaves * 3;\n\t        // console.log(calculation);\n\t        frm.set_value('max_leaves_allowed', \"1000\");\n            frm.refresh_field('max_leaves_allowed');\n            // frm.set_df_property('max_leaves_allowed', 'hidden', 1);\n\t    } else {\n\t        frm.set_value('max_leaves_allowed', \"0\");\n            frm.refresh_field('max_leaves_allowed');\n\t    }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2023-08-14 14:47:57.258022",
  "module": "Advantisquartz",
  "name": "Get date after 20 days",
  "script": "frappe.ui.form.on('Leave Allocation', {\n    from_date(frm) {\n        var leave_type = cur_frm.doc.leave_type;\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Leave Type\",\n                filters: {\n                    name: leave_type\n                },\n                fields: [\"is_privilege_leave\"]\n            },\n            callback: function(response) {\n                var result = response.message[0];\n                console.log(result);\n\n                if (result && result.is_privilege_leave === 1) {\n                    var from_date = cur_frm.doc.from_date;\n                    console.log(from_date);\n                    var fromDateObj = new Date(from_date);\n                    fromDateObj.setDate(fromDateObj.getDate() + 19);\n                    var resultDate = fromDateObj.toISOString().split('T')[0];\n                    console.log(resultDate);\n                    frm.set_value('to_date', resultDate);\n                    frm.refresh_field('to_date');\n                }\n            }\n        });\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Slip",
  "enabled": 0,
  "modified": "2023-08-28 11:29:14.707231",
  "module": "Advantisquartz",
  "name": "PF_ECR",
  "script": "frappe.listview_settings['Salary Slip'] = {\n    onload: function (listview) {\n        listview.page.add_inner_button('PF-ECR', function () {\n            let d = new frappe.ui.Dialog({\n                title: 'Select Date for PF-ECR',\n                fields: [\n                    {\n                        label: 'Date',\n                        fieldname: 'date',\n                        fieldtype: 'Date',\n                        reqd: 1\n                    },\n                    // {\n                    //     label: 'File Type',\n                    //     fieldname: 'file_type',\n                    //     fieldtype: 'Select',\n                    //     options: [\n                    //         \"\",\n                    //         \"Text File\",\n                    //         \"Excel File\"\n                    //     ],\n                    //     reqd: 1\n                    // }\n                ],\n                size: 'small',\n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    // console.log(values);\n                    // console.log(\"Callback executed with values:\", values);\n                    // if (values.file_type === \"Text file\") {\n                    frappe.call({\n                        method: 'advantisquartz.advantisquartz.doctype.api.generate_txt',\n                        args: {\n                            selected_date: values.date,\n                            // file_type: values.file_type\n                        },\n                        callback: function (response) {\n                            console.log(response);\n                            if (response.message) {\n                                var link = document.createElement('a');\n                                link.href = '/files/' + response.message;\n                                link.download = 'PF_ECR.txt';\n                                link.click();\n                            }\n                        }\n                    });\n                    // }\n                    d.hide();\n                }\n            });\n\n            d.show();\n        });\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2023-09-13 12:00:37.845411",
  "module": "Advantisquartz",
  "name": "Create rows according to bag no in QC",
  "script": "frappe.ui.form.on('Quality Inspection', {\n\tbags_or_drums(frm) {\n\t    var bags =  parseInt(frm.doc.bags_or_drums);\n        var row;\n        frm.clear_table(\"mesh_qc\");\n        for (var i = 0; i < bags; i++) {\n            row = frm.add_child(\"mesh_qc\");\n            row.description = \"\";\n            frm.refresh_field(\"mesh_qc\");\n        }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-09-11 17:09:06.042043",
  "module": "Advantisquartz",
  "name": "Link machine maintenance with purchase receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    supplier(frm) {\n        var supplier = cur_frm.doc.supplier;\n        console.log(supplier);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Machine Maintenance\",\n                filters: {\n                    supplier: supplier,\n                },\n                fields: [\"name\"],\n            },\n            callback: function (response) {\n                console.log(response);\n                var machineMaintenanceOptions = response.message.map(function (item) {\n                    return item.name;\n                });\n                console.log(machineMaintenanceOptions);\n                frm.fields_dict.machine_maintenance.get_query = function () {\n                    return {\n                        filters: [\n                            ['Machine Maintenance', 'name', 'in', machineMaintenanceOptions]\n                        ]\n                    };\n                };\n                frm.refresh_field('machine_maintenance');\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2023-09-11 17:25:52.915271",
  "module": "Advantisquartz",
  "name": "Link machine maintenance with purchase inv",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    supplier(frm) {\n        var supplier = cur_frm.doc.supplier;\n        console.log(supplier);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Machine Maintenance\",\n                filters: {\n                    supplier: supplier,\n                },\n                fields: [\"name\"],\n            },\n            callback: function (response) {\n                console.log(response);\n                var machineMaintenanceOptions = response.message.map(function (item) {\n                    return item.name;\n                });\n                console.log(machineMaintenanceOptions);\n                frm.fields_dict.machine_maintenance.get_query = function () {\n                    return {\n                        filters: [\n                            ['Machine Maintenance', 'name', 'in', machineMaintenanceOptions]\n                        ]\n                    };\n                };\n                frm.refresh_field('machine_maintenance');\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Retention Bonus",
  "enabled": 1,
  "modified": "2023-09-18 11:17:13.733263",
  "module": "Advantisquartz",
  "name": "Get Bonus",
  "script": "frappe.ui.form.on('Retention Bonus', {\n    get_salary_slip(frm) {\n        var monthly_bonus = cur_frm.doc.monthly_bonus;\n        var emp = cur_frm.doc.employee;\n        var from_date = cur_frm.doc.from_date;\n        var to_date = cur_frm.doc.to_date;\n\n        if (monthly_bonus === 1 && emp && from_date && to_date) {\n            frappe.call({\n                method: \"advantisquartz.advantisquartz.doctype.api.get_employee_bonus\",\n                args: {\n                    employee: emp,\n                    from_date: from_date,\n                    to_date: to_date\n                },\n                async: false,\n                callback: function (response) {\n                    console.log(response.message);\n\n                    frm.clear_table(\"employee_bonus\");\n\n                    var salary_slips = response.message[0];\n                    var get_salary_data = response.message[1];\n                    var totalBonus = 0;\n\n                    for (var i = 0; i < salary_slips.length; i++) {\n                        var row = frm.add_child(\"employee_bonus\");\n                        row.salary_slip = salary_slips[i].name;\n                        row.basic_salary = get_salary_data[i].amount;\n                        \n                        var amount = get_salary_data[i].amount;\n                        if (amount <= 7000) {\n                            row.bonus = amount * 0.0833; \n                        } else if (amount <= 21000) {\n                            row.bonus = 7000 * 0.20; \n                        } else {\n                            row.bonus = 0;\n                        }\n                        totalBonus += row.bonus;\n                    }\n\n                    frm.refresh_field(\"employee_bonus\");\n                    frm.set_value(\"salary_component\", \"Bonus\");\n                    totalBonus = parseFloat(totalBonus.toFixed(0));\n                    frm.set_value(\"bonus_amount\", totalBonus);\n                }\n            });\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gratuity",
  "enabled": 1,
  "modified": "2023-09-19 10:48:10.142732",
  "module": "Advantisquartz",
  "name": "Get gratuity",
  "script": "frappe.ui.form.on('Gratuity', {\n\tget_gratuity(frm) {\n        var get_gratuity = cur_frm.doc.get_gratuity;\n        var emp = cur_frm.doc.employee;\n        if (get_gratuity === 1){\n            frappe.call({\n                method: \"advantisquartz.advantisquartz.doctype.api.get_gratuity\",\n                args: {\n                    employee: emp\n                },\n                async: false,\n                callback: function (response) {\n                    // console.log(response.message);\n                    frm.set_value(\"salary_component\", \"Gratuity\");\n                }\n            });\n        }\n\t},\n\tafter_save(frm){\n\t    var get_gratuity = cur_frm.doc.get_gratuity;\n        var emp = cur_frm.doc.employee;\n        var current_work_experience = cur_frm.doc.current_work_experience;\n        if (get_gratuity === 1){\n            frappe.call({\n                method: \"advantisquartz.advantisquartz.doctype.api.get_gratuity\",\n                args: {\n                    employee: emp\n                },\n                async: false,\n                callback: function (response) {\n                    // console.log(response.message);\n                    var basic = response.message.amount;\n                    // var gratuity = basic * current_work_experience * (15/26);\n                    var gratuity = basic * current_work_experience * (15/26);\n                    // console.log(basic);\n                    // console.log(current_work_experience);\n                    // console.log(gratuity);\n                    // gratuity = gratuity.toFixed(2);\n                    // frappe.db.set_value('Gratuity', frm.doc.name, 'amount', gratuity);\n                    frm.doc.amount = Math.round(gratuity);\n                    frm.doc.paid_amount = Math.round(gratuity);\n                    frm.save();\n                    // frm.refresh_field('amount');\n                    // frm.save('Submit');\n                    // frm.save();\n                    \n\n                }\n            });\n            \n           \n        }\n        \n\t},\n// \ton_submit(frm) {\n//         var name = cur_frm.doc.name;\n//         var amount = cur_frm.doc.amount;\n//         // console.log(name, amount);\n//         frappe.call({\n//             method: \"frappe.client.get_list\",\n//             args: {\n//                 'doctype': 'Additional Salary',\n//                 'filters': {\n//                     'ref_docname': name\n//                 },\n//                 'fields': ['name', 'amount'] \n//             },\n//             async: false,\n//             callback: function (response) {\n//                 // console.log(response.message);\n//                 var additional_salary_name = response.message[0].name;\n//                 var additional_salary_amount = response.message[0].amount;\n//                 console.log(additional_salary_name, additional_salary_amount);\n//                 frappe.db.set_value('Additional Salary', additional_salary_name, 'amount', additional_salary_amount);\n//                 // frappe.db.commit();\n//             }\n//         });\n//     }\n\t\n})\n\n\n",
  "view": "Form"
 }
]