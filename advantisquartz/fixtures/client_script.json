[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Sample",
  "enabled": 1,
  "modified": "2023-12-01 10:26:13.460387",
  "module": "Advantisquartz",
  "name": "Sample Quality Inspection Auto Sample Code",
  "script": "frappe.ui.form.on('Lab Sample', {\n    onload: function (frm) {\n        // This function will be called when the form is loaded\n\n        // Check if the form is being duplicated\n        if (frm.doc.__unsaved) {\n            // Set the sample_code field to null\n            frm.set_value('sample_code', null);\n            frm.set_value('material_type', null);\n        }\n    },\n\n    material_type: function (frm) {\n        if (frm.is_new()) {\n            // Get the selected material_type\n            var materialType = frm.doc.material_type;\n    \n            // Set the sample_code based on material_type\n            if (materialType === 'Raw Material') {\n                // Initialize the maximum numeric value to the smallest possible value\n                var maxNumericValue = -Infinity;\n    \n                // Make a server call to fetch all Raw Material sample codes\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Lab Sample',\n                        fields: ['sample_code'],\n                        limit_page_length: 0,\n                        filters: {\n                            'material_type': 'Raw Material'\n                        },\n                    },\n                    callback: function(r) {\n                        if (r.message && r.message.length > 0) {\n                            // Log all numeric values of the Raw Material sample codes to the console\n                            \n                            r.message.forEach(function(record) {\n                                var numericPart = record.sample_code.match(/\\d+/);\n                                if (numericPart) {\n                                    var numericValue = parseInt(numericPart[0]);\n                                    \n    \n                                    // Update the maximum numeric value\n                                    if (numericValue > maxNumericValue) {\n                                        maxNumericValue = numericValue;\n                                    }\n                                }\n                            });\n    \n    \n                            // Set the sample_code field to the next sequential number\n                            var prefix = 'RMTS-';\n                            frm.set_value('sample_code', prefix + (maxNumericValue + 1).toString());\n                        } else {\n                            // If no existing sample codes, set the initial sample code\n                            frm.set_value('sample_code', 'RMTS-1');\n                        }\n                    }\n                });\n            } else if (materialType === 'Finish Good') {\n                // frm.set_value('sample_code', 'Welcome');\n                var maxNumericValue = -Infinity;\n    \n                // Make a server call to fetch all Raw Material sample codes\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Lab Sample',\n                        fields: ['sample_code'],\n                        limit_page_length: 0,\n                        filters: {\n                            'material_type': 'Finish Good'\n                        },\n                    },\n                    callback: function(r) {\n                        if (r.message && r.message.length > 0) {\n                            // Log all numeric values of the Raw Material sample codes to the console\n                            \n                            r.message.forEach(function(record) {\n                                var numericPart = record.sample_code.match(/\\d+/);\n                                if (numericPart) {\n                                    var numericValue = parseInt(numericPart[0]);\n                                    \n    \n                                    // Update the maximum numeric value\n                                    if (numericValue > maxNumericValue) {\n                                        maxNumericValue = numericValue;\n                                    }\n                                }\n                            });\n    \n                            // Set the sample_code field to the next sequential number\n                            var prefix = 'TC-';\n                            frm.set_value('sample_code', prefix + (maxNumericValue + 1).toString());\n                        } else {\n                                // If no existing sample codes, set the initial sample code\n                                frm.set_value('sample_code', 'TC-1');\n                            }\n                        }\n                    });\n            }\n        }\n        \n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-10-02 12:42:44.590790",
  "module": "Advantisquartz",
  "name": "Remove Taxes In quotation if not INR",
  "script": "frappe.ui.form.on('Quotation', {\n// \tcustomer_name(frm) {\n// \t\tif(frm.doc.currency !== 'INR'){\n// \t\t    cur_frm.set_value(\"taxes_and_charges\", \"\");\n// \t\t    cur_frm.clear_table(\"taxes\");\n//             cur_frm.refresh_fields();\n// \t\t}\n// \t}\n\trefresh(frm) {\n\t    if(frm.doc.currency !== 'INR'){\n\t        cur_frm.set_value(\"taxes_and_charges\", \"\");\n\t\t    cur_frm.clear_table(\"taxes\");\n            cur_frm.refresh_field('taxes_and_charges');\n            cur_frm.refresh_field('taxes');\n\t    }\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-10-30 11:45:32.466348",
  "module": "Advantisquartz",
  "name": "Get Items from Machine Maintanance to PR",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    // machine_maintenance: function(frm) {\n    //     if(frm.doc.machine_maintenance){\n    //         frappe.db.get_value('Machine Maintenance', frm.doc.machine_maintenance, 'warehouse')\n    //         .then(r => {\n    //             cur_frm.set_value('set_warehouse',r.message.warehouse);\n\t\t  //      frm.refresh_field('set_warehouse');\n    //         });\n    //     }\n    // },\n    refresh: function(frm) {\n        if(frm.doc.docstatus === 0){\n                frm.add_custom_button(__('Machine Maintenance'), function() {\n                    if(!frm.doc.machine_maintenance){\n                        frappe.msgprint({\n                            title: __('Required'),\n                            indicator: 'red',\n                            message: __('Machine Maintenance document required')\n                        });\n                    }\n                    else{\n                        var d = new frappe.ui.form.MultiSelectDialog({\n                            doctype: \"Machine Maintenance\",\n                            target: cur_frm,\n                            setters: {\n                                // name : 'MT-3' ,\n                            },\n                            add_filters_group: 1,\n                            allow_child_item_selection: 1,\n                            child_fieldname: \"item\", // child table fieldname, whose records will be shown & can be filtered\n                            child_columns: [\"description_of_goods\",\"item_name\",\"qty\", \"status\"], // child item columns to be displayed\n                            get_query() {\n                                return {\n                                    filters: { docstatus: 1 }\n                                };\n                            },\n                            action(selections, args) {\n                                console.log(args.filtered_children);\n                                var mach = frm.doc.machine_maintenance;\n                                frm.clear_table(\"items\");\n                                var row;\n                                frappe.call({\n                                    method: \"get_mm_child\",\n                                    args: {\n                                        'mach': mach,\n                                    },\n                                    callback: function(records) {\n                                        console.log(records);\n                                        for(let i=0; i<records.result.length; i++){\n                                            if (args.filtered_children.includes(records.result[i].name)){\n                                                // console.log(records[i].name);\n                                                row = frm.add_child(\"items\");\n                                                row.item_code = records.result[i].description_of_goods;\n                                                row.item_name = records.result[i].item_name;\n                                                row.qty = records.result[i].qty;\n                                                row.rate = records.result[i].rate;\n                                                row.uom = records.result[i].unit;\n                                                row.base_rate = records.result[i].rate;\n                                                row.amount = records.result[i].total;\n                                                row.description = records.result[i].item_name;\n                                                row.mm_id = records.result[i].name;\n                                            }\n                                        }\n                                        frm.refresh_field(\"items\");\n                                    }\n                                });\n                                d.dialog.hide();\n                    }\n                });\n                    }\n            }, __(\"Get Items From\"));\n        }\n    },\n    before_submit(frm) {\n        if (frm.doc.machine_maintenance) {\n            $.each(frm.doc.items || [], function (i, d) {\n                if (d.mm_id) {\n                    frappe.db.set_value(\"Machine Maintenance Item\", d.mm_id, 'returned', 1, { parent: frm.docname });\n                }\n            });\n        }\n    }\n});\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-09-27 14:40:03.610311",
  "module": "Advantisquartz",
  "name": "Hide Some fields for mr creator from stock entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload: function(frm) {\n        toggleFieldsVisibility(frm);\n    }\n});\n\nfrappe.ui.form.on('Stock Entry', {\n    refresh: function(frm) {\n        toggleFieldsVisibility(frm);\n    }\n});\n\nfunction toggleFieldsVisibility(frm) {\n    if (frappe.user_roles.includes(\"MR Creator\")) {\n        frm.fields_dict['items'].get_query = function() {\n            return {\n                filters: [\n                    // Set in_list_view to 0\n                    ['Stock Entry Detail', 'in_list_view', '=', 0]\n                ]\n            };\n        };\n        frm.fields_dict['items'].grid.toggle_display('basic_rate', false);\n        frm.fields_dict['items'].grid.toggle_display('basic_amount', false);\n        frm.fields_dict['items'].grid.toggle_display('valuation_rate', false);\n        frm.fields_dict['items'].grid.toggle_display('amount', false);\n    } else if (frappe.user_roles.includes(\"Stock User\") || frappe.user_roles.includes(\"Stock Manager\") || frappe.session.user == \"Administrator\"){\n        frm.fields_dict['items'].grid.toggle_display('basic_rate', true);\n        frm.fields_dict['items'].grid.toggle_display('basic_amount', true);\n        frm.fields_dict['items'].grid.toggle_display('valuation_rate', true);\n        frm.fields_dict['items'].grid.toggle_display('amount', true);\n    }\n}\n\n\n\n\n// frappe.ui.form.on('Stock Entry', {\n//     refresh: function(frm) {\n//         if (frappe.user_roles.includes(\"MR Creator\")) {\n//             frm.fields_dict['items'].grid.toggle_display('basic_rate', false);\n//             frm.fields_dict['items'].grid.toggle_display('basic_amount', false);\n//             frm.fields_dict['items'].grid.toggle_display('valuation_rate', false);\n//             frm.fields_dict['items'].grid.toggle_display('amount', false);\n//         } else {\n//             frm.fields_dict['items'].grid.toggle_display('basic_rate', true);\n//             frm.fields_dict['items'].grid.toggle_display('basic_amount', true);\n//             frm.fields_dict['items'].grid.toggle_display('valuation_rate', true);\n//             frm.fields_dict['items'].grid.toggle_display('amount', true);\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-09-20 15:56:31.419470",
  "module": "Advantisquartz",
  "name": "custom button to Item-wise Purchase History",
  "script": "frappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t    if (frappe.user.has_role('Purchase Manager') || frappe.user.has_role('Purchase User')){\n    \t\tfrm.add_custom_button(__(\"Item-Wise Purchase History\"), function() {\n    \t\t\t\tfrappe.route_options = {\n    \t\t\t\t\t\"item_code\": frm.doc.name\n    \t\t\t\t};\n    \t\t\t\tfrappe.set_route(\"query-report\", \"Item-wise Purchase History\");\n    \t\t\t}, __(\"View\"));\n\t    }\n\t},\n\thas_serial_no(frm){\n\t    if(!frm.is_new() && frm.doc.has_serial_no==1){\n\t        var series = String(frm.doc.name)+\"-.#####\";\n\t        cur_frm.set_value('serial_no_series',series);\n\t        frm.refresh_field(serial_no_series);\n\t    }\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2023-09-14 13:46:46.189095",
  "module": "Advantisquartz",
  "name": "Get mesh qc template to Quality Inspection",
  "script": "frappe.ui.form.on('Quality Inspection', {\n\tmesh_qc_template(frm) {\n\t    if (frm.doc.mesh_qc_template){\n\t       frappe.model.with_doc(\"Mesh QC Template\", frm.doc.mesh_qc_template, function() {\n                var tabletransfer= frappe.model.get_doc(\"Mesh QC Template\", frm.doc.mesh_qc_template);\n                $.each(tabletransfer.parameters, function(index, row){\n                    var d = frm.add_child(\"lab_sections_and_mesh_no\");\n                    d.lab_section = row.lab_section;\n                    d.mesh_no = row.mesh_no;\n                    frm.refresh_field(\"lab_sections_and_mesh_no\");\n                });\n            });\n\t    }\n\t    else{\n\t        frm.clear_table(\"lab_sections_and_mesh_no\");\n\t        frm.refresh_field(\"lab_sections_and_mesh_no\");\n\t    }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2023-08-24 18:38:47.282057",
  "module": "Advantisquartz",
  "name": "Gate Entry filter for Sales return",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"gate_entry\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.return_against,\n    \t            'docstatus': 0\n    \t        }\n    \t    };\n    \t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-01-10 12:44:02.326218",
  "module": "Advantisquartz",
  "name": "quality",
  "script": "\n\nfrappe.ui.form.on('Stock Entry',{\n    issue_location:function(frm){\n     frm.set_query(\"machine\",function(){\n\t    return{\n\t        filters:{\n\t            'location':cur_frm.doc.issue_location\n\t           \n\t        }\n\t        \n\t    };\n\t});\n\n    }\n})\nfrappe.ui.form.on('Stock Entry', {\n\tafter_cancel:function(frm) {\n\t $.each(frm.doc.items || [], function(i, d) {\n\t     \n            var serial = d.serial_no;\n            if(serial){\n                  console.log(serial);\n               $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,'custom_status',\"Inactive\");\n                });\n            }\n          \n\t\t \n\t    }); \n\t}\n})\nfrappe.ui.form.on('Stock Entry', {\n\tonload:function(frm) {\n\t    if(cur_frm.doc.stock_entry_type == \"Manufacture\"){\n\t                 var work_order = cur_frm.doc.work_order;\n\t $.each(frm.doc.items || [], function(i, d) {\n            // var serial = d.serial_no;\n            // console.log(serial);\n            //   $.each(serial.split('\\n'), function(index, value) {\n                 \n            //      frappe.db.set_value('Serial No',value,'custom_status',\"Inactive\");\n            //     });\n            if(work_order !==null && d.is_finished_item == 1){\n                console.log(\"hello\")\n                 frappe.db.get_value('Work Order', {'name': work_order }, ['production_item','lot_no','sales_order'],function(response) {\n            // 'response' will contain the fetched value\n            var b = response['production_item'];\n            var batch =response['lot_no']      \n            var sales_order = response['sales_order']// Split the fetched value into an array\n            console.log(sales_order)\n           if(d.item_code == b){\n            \n              d.sales_order = sales_order\n           }\n         \n          \n        });\n            }\n\t    });  \n\t    }\n  \n\t}\n})\nfrappe.ui.form.on('Stock Entry', {\n\ton_submit:function(frm) {\n\t    if(cur_frm.doc.stock_entry_type == \"Manufacture\"){\n\t        \t $.each(frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            // console.log(serial);\n           \n            if(work_order !==null && d.is_finished_item == 1){\n             \n            \n              $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,{\n                     'custom_batch_no':d.lot_no,\n                     'custom_status':\"Active\",\n                     'serial_type':\"Press\",\n                     'sales_order':d.sales_order\n\n                     \n                 }\n                     );\n                });\n      \n            }\n\t    }); \n\t    }\n            var work_order = cur_frm.doc.work_order;\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-10-11 14:05:30.224984",
  "module": "Advantisquartz",
  "name": "Default schedule date in Purchase Order",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n        if (frm.is_new()) {  // Check if the form is new\n            var a = frm.doc.transaction_date;\n            frm.set_value('schedule_date', frappe.datetime.add_days(a, 7));\n          \n        }\n    }\n});\nfrappe.ui.form.on('Purchase Order', {\n    schedule_date: function(frm) {\n      \tfrm.doc.items.forEach(function(child) {\n      \t    child.schedule_date = cur_frm.doc.schedule_date\n      \t})\n    }\n});\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tif(output){\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Received\")\n\t\t}\n\t}\n});\nfrappe.ui.form.on('Purchase Order', {\n\tafter_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.supplier_quotation) {\n\t\t\t\ta.push(child.supplier_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tif(output){\n\t\tfrappe.db.set_value('Supplier Quotation',output, 'supplier_quotation_status',\"Pending\")\n\t\t}\n\t}\n});\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    after_save: function(frm) { \n        var a = [];\n        frm.doc.items.forEach(function(child) {\n            if (child.material_request) {\n                a.push(child.material_request);\n                } });\n                a = [...new Set(a)];\n                if (a.length > 0) {\n                    var material = a.join(', ');\n                    }\n                    if(a.length !== 0) {\n                        frappe.db.get_value('Material Request', {\n                            'name': material\n                            \n                        }, \n                        'remarks', function(response) {\n                            var material_remarks = response.remarks;\n                            console.log(material_remarks) \n                            frm.set_value(\"remarks\",material_remarks)\n                            });\n                            } \n    } });\n    \n    \n    \n  \n    \n    \n\nfrappe.ui.form.on('Purchase Order Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\nfrappe.ui.form.on('Purchase Order',{\n    after_save:function(frm){\n\n    frm.doc.items.forEach(function(child) {\n    if(child.item_tax_template){\n          frappe.call({\n        method:\"tax\",\n        args:{\n            no:child.item_tax_template\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      child.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n\n    }\n    })  \n\n    }\n    \n});\nfrappe.ui.form.on(\"Purchase Order\",{\n    onload:function(frm){\n        if (frm.is_new()) {\n            frm.doc.items.forEach(function(child) {\n                if(child.supplier_quotation){\n                    \n                frappe.call({\n                    method:\"purchase\",\n                    args:{\n                        supplier_quotation:child.supplier_quotation\n                    }\n                }).then(records=>{\n                    child.request_for_quotation = records.request\n                })\n                }\n            })\n        }\n    }\n})\n\n\nfrappe.ui.form.on(\"Purchase Order Item\",{\n    rate:function(frm){\n        \n        frm.doc.items.forEach(function(child) {\n\t\tif(child.discount_percentage === 0){\n\t\t    \n\t\t\t\tchild.price_list_rate = child.rate\n\t\t}\n\t\t\n\t\t});\n    }\n});\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-08-25 13:00:42.477294",
  "module": "Advantisquartz",
  "name": "Quotation Sales Uom Calculation",
  "script": "frappe.ui.form.on(\"Quotation Item\", \"uom_conversion_value\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"conversion_factor\", 1 / d.uom_conversion_value); \n    cur_frm.refresh_field(\"Quotation Item\");\n    });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-10-26 18:47:18.664424",
  "module": "Advantisquartz",
  "name": "sales order",
  "script": "frappe.ui.form.on(\"Sales Order Item\", \"uom_conversion_value\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    // const result = 1 / d.uom_conversion_value;\n    // const formattedResult = result.toFixed(9);\n    // const finalResult = parseFloat(formattedResult);\n    frappe.model.set_value(cdt, cdn, \"conversion_factor\", 1 / d.uom_conversion_value); \n    // frappe.model.set_value(cdt, cdn, \"stock_qty\",d.qty*finalResult)\n    cur_frm.refresh_field(\"Sales Order Item\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2023-09-05 16:12:51.690156",
  "module": "Advantisquartz",
  "name": "Status Changed",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n\tbefore_submit: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Received\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n  validate: function(frm) {\n\n      frm.set_value(\"supplier_quotation_status\",\"Pending\")\n    \n  }\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_cancel: function(frm) {\n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\t\t\t}\n\t\t});\n\t\ta = [...new Set(a)];\n\n\t\tif (a.length > 0) {\n\t\t\tvar output = a.join(', '); \n\t\t\n\t\t}\n\t\tfrappe.db.set_value('Request for Quotation',output, 'quotation_status',\"Pending\")\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_save: function(frm) {\n\t    frm.doc.items.forEach(function(child){\n\t       \n\t            if(child.initial_discount_){\n\t                var dis = child.initial_rate * child.qty;\n\t                \n\t                var dis_amt = (dis * child.initial_discount_)/100\n\t                child.initial_amount=dis - dis_amt\n\t            }\n\t            else{\n\t                \n\t            var a = child.initial_rate * child.qty;\n\t          \n\t            child.initial_amount = a\n\t            \n\t            }\n\t        \n\t       \n\t    })\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tonload: function(frm) {\n\t    if(frm.is_new){\n\t        \n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\tfrm.set_value(\"request_for_quotation\",child.request_for_quotation)\n\t\t\t}\n\t\t});\n\t    }\n\t\n\t\t\n\t\t\n\t}\n});\nfrappe.ui.form.on('Supplier Quotation', {\n\tafter_save: function(frm) {\n\t    if(frm.is_new){\n\t        \n\t\tvar a = [];\n\t\tfrm.doc.items.forEach(function(child) {\n\t\t\tif (child.request_for_quotation) {\n\t\t\t\ta.push(child.request_for_quotation);\n\tfrm.set_value(\"request_for_quotation\",child.request_for_quotation)\n\t\t\t}\n\t\t});\n\t    }\n\t\n\t\t\n\t\t\n\t}\n});\n\n\nfrappe.ui.form.on(\"Supplier Quotation Item\", \"initial_discount_\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"initial_amount\", ((d.initial_rate * d.qty) *  d.initial_discount_)/100); \n    cur_frm.refresh_field(\"Supplier Quotation Item\");\n});\n\nfrappe.ui.form.on(\"Supplier Quotation Item\", \"initial_rate\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, \"initial_amount\", ((d.initial_rate * d.qty) *  d.initial_discount_)/100); \n    cur_frm.refresh_field(\"Supplier Quotation Item\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-01-11 17:06:07.306571",
  "module": "Advantisquartz",
  "name": "Gate Entry filter in material receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\tbill_no(frm) {\n\t\tfrm.set_query(\"gate_entry\",function(){\n    \t    return{\n    \t        filters:{\n    \t            'invoice_no':cur_frm.doc.bill_no,\n    \t            'invoice_date':cur_frm.doc.bill_date,\n    \t            'docstatus': 0\n    \t        }\n    \t    };\n    \t});\n\t},\n// \tbefore_submit(frm){\n//         frappe.call({\n//             method: \"erpnext.buying.api.link_gate_entry\",\n//             args: {\n//                 pr_doc: frm.doc.name,\n//                 parent_doc : frm.doc.gate_entry\n//             },\n//             callback: function(r) {\n//                 console.log(\"Success\");\n//             }\n//         });\n//     }\n    onload(frm){\n        if(frm.doc.is_subcontracted == 1){\n            frm.set_df_property('gate_entry',  'depends_on', null);\n            frm.set_query(\"gate_entry\",function(){\n        \t    return{\n        \t        filters:{\n        \t            'supplier':cur_frm.doc.supplier,\n        \t            'docstatus': 0\n        \t        }\n        \t    };\n    \t    });   \n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt Item', \"item_tax_template\",function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    var tax = d.item_tax_template;\n    \n    frappe.call({\n        method:\"tax\",\n        args:{\n            no:tax\n        },\n        }).then(records =>{\n        \t      \n        \t      console.log(records.total)\n        \t      d.item_taxe_rate = records.total\n        \t      \n    \t        frm.refresh_field(\"items\");\n    \t        })\n    \n});\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n\tlocation: function(frm) {\n\t\t$.each(frm.doc.items || [], function(i, d) {\n\t\t\tfrm.doc.items[i].location = frm.doc.location;\n\t\t});\n\n\t\t// Refresh the table to update the values\n\t\tfrm.refresh_field('items');\n\t}\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n\tgate_entry: function(frm) {\n\t\n        cur_frm.add_fetch('gate_entry','truck_no','lr_no')\n\t    cur_frm.add_fetch('gate_entry','driver_name','transporter_name')\n\t    cur_frm.add_fetch('gate_entry','lr_no','lr_req')\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Serial No",
  "enabled": 1,
  "modified": "2023-12-18 13:38:43.702126",
  "module": "Advantisquartz",
  "name": "status color",
  "script": "// frappe.listview_settings['Serial No'] = {\r// add_fields: [ \"custom_status\"],\r// get_indicator:function(doc){\r// if (doc.custom_status === \"Hold\") {\r// \t\t\treturn [__(\"Hold\"), \"red\", \"status,=,Hold\"];\r//     }\r// if (doc.custom_status === \"Delivered\") {\r// \t\t\treturn [__(\"Delivered\"), \"green\", \"status,=,Delivered\"];\r//     }\r//     if (doc.custom_status === \"Active\") {\r// \t\t\treturn [__(\"Active\"), \"green\", \"status,=,Active\"];\r//     }\r//     if (doc.custom_status === \"Inactive\") {\r// \t\t\treturn [__(\"Inactive\"), \"gray\", \"status,=,Inactive\"];\r//     }\r//  }\r// }\r\rfrappe.listview_settings['Serial No'] = {\r\tadd_fields: [\"item_code\", \"warehouse\", \"warranty_expiry_date\", \"delivery_document_type\"],\r\tget_indicator: (doc) => {\r\t\tif (doc.delivery_document_type) {\r\t\t\treturn [__(\"Delivered\"), \"green\", \"delivery_document_type,is,set\"];\r\t\t} else if (doc.warranty_expiry_date && frappe.datetime.get_diff(doc.warranty_expiry_date, frappe.datetime.nowdate()) <= 0) {\r\t\t\treturn [__(\"Expired\"), \"red\", \"warranty_expiry_date,not in,|warranty_expiry_date,<=,Today|delivery_document_type,is,not set\"];\r\t\t} else if (!doc.warehouse) {\r\t\t\treturn [__(\"Inactive\"), \"grey\", \"warehouse,is,not set\"];\r\t\t} else if (doc.status === \"Hold\") {\r\t\t\treturn [__(\"Hold\"), \"red\", \"packing_list,is,set\"];\r\t\t} else {\r\t\t\treturn [__(\"Active\"), \"green\", \"delivery_document_type,is,not set\"];\r\t\t}\r\t}\r};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2024-01-11 10:27:59.499293",
  "module": "Advantisquartz",
  "name": "Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note', {\n  packing_scanner: function (frm) {\n    var packing = cur_frm.doc.packing_scanner;\n    // console.log(packing);\n    if(packing){\n        frappe.call({\n      method: \"packing\",\n      args: {\n        \"packing_list\": packing\n      },\n      callback: function (records) {\n        console.log(records.sales_mes_list[0][0]);\n        $.each(frm.doc.items || [], function (i, d) {\n          var sales_order_id = d.against_sales_order;\n          var item_code = records.item_code.split(\",\");\n          var serial_no = records.serial_no.split(\",\");\n          var item_code1 = records.item_code1.split(\",\");\n          var serial_count = records.serial_count.split(\",\");\n          var as = records.sales_length.split(\",\");\n          var item_code2 = records.item_code2.split(\",\");\n          var item_code3 = records.item_code3.split(\",\");\n          var weight = records.sales_weight.split(\",\");\n          var item_code4 = records.item_code4.split(\",\");\n          var grade = records.sales_grade.split(\",\");\n          var item_code5 = records.item_code5.split(\",\");\n          var item_container = records.container.split(\",\");\n          \n          \n          var index = item_code.indexOf(d.item_code);\n          var index_z = item_code1.indexOf(d.item_code);\n          var index_length = item_code2.indexOf(d.item_code);\n          var index_weight = item_code3.indexOf(d.item_code);\n          var index_grade = item_code4.indexOf(d.item_code);\n          var index_container = item_code5.indexOf(d.item_code);\n          var inx_sales_measure = records.sales_mes_list[0][0].indexOf(d.item_code)\n          if (index !== -1 && d.against_sales_order === sales_order_id && index_z !== -1 && index_length !== -1 && index_weight !== -1  && index_grade !== -1 && index_container !== -1 && inx_sales_measure !== -1) {\n            d.serial_no = serial_no[index] ;\n            d.stock_qty = serial_count[index_z];\n            d.saleable_measurement = records.sales_mes_list[0][1];\n            d.qty=serial_count[index_z]/d.conversion_factor\n            d.packing_length = as[index_length];\n            d.packing_weight = weight[index_weight];\n            d.packing_grade = grade[index_grade];\n            d.container_no = item_container[index_container];\n           \n            // console.log(\"yes\");\n          } else {\n            // console.log(\"no\");\n          }\n        });\n      }\n        \n    });\n    \n    frm.refresh_field(\"items\");\n    }\n  }\n});\n\n                 \nfrappe.ui.form.on('Delivery Note', {\n\tafter_submit:function(frm) {\n\t $.each(cur_frm.doc.items || [], function(i, d) {\n            var serial = d.serial_no;\n            // console.log(serial);\n               $.each(serial.split('\\n'), function(index, value) {\n                 \n                 frappe.db.set_value('Serial No',value,'status',\"Delivered\");\n                });\n                frappe.db.set_value('Packing list',cur_frm.doc.packing_scanner,'delivered',1);\n\t\t \n\t    }); \n\t}\n});\n\n// frappe.ui.form.on('Delivery Note', {\n// \tafter_cancel:function(frm) {\n// \t $.each(frm.doc.items || [], function(i, d) {\n//             var serial = d.serial_no;\n//             // console.log(serial);\n//               $.each(serial.split('\\n'), function(index, value) {\n//                  console.log(value)\n//                  frappe.db.set_value('Serial No',value,'status',\"Hold\");\n//                 });\n//                 frappe.db.set_value('Packing list',cur_frm.doc.packing_scanner,'delivered',0);\n\t\t \n// \t    }); \n// \t}\n// });\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.504451",
  "module": "Advantisquartz",
  "name": "Get Appointment letter date",
  "script": "frappe.ui.form.on('Employee', {\n\tjob_applicant(frm) {\n\t    var employee = cur_frm.doc.employee;\n\t   // console.log(employee);\n        var job_applicant = frm.doc.job_applicant;\n        var appointmentDate;\n        // console.log(job_applicant);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Appointment Letter\",\n                filters: {\n                    job_applicant: job_applicant\n                },\n                fields: [\"job_applicant\", \"appointment_date\"]\n            },\n            callback: function (response) {\n                // console.log(response.message[0].appointment_date);\n                appointmentDate = response.message[0].appointment_date;\n                // console.log(appointmentDate);\n                var formattedDate = frappe.datetime.str_to_user(appointmentDate);\n                // console.log(formattedDate);\n                frm.set_value('appointment_letter_date', formattedDate);\n                frm.refresh_field('appointment_letter_date');\n            }\n        });\n        \n        // frappe.db.set_value('Employee', employee, 'appointment_letter_date', appointmentDate)\n        \n       }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.462308",
  "module": "Advantisquartz",
  "name": "Get probation period end date",
  "script": "frappe.ui.form.on('Employee', {\r    date_of_joining(frm) {\r        var probation_period = cur_frm.doc.probation_period;\r        var date_of_joining = cur_frm.doc.date_of_joining;\r        var a;\r        var b;\r        \r        var startDate = new Date(date_of_joining);\r\r        var probationEndDate = new Date(startDate);\r        probationEndDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        probationEndDate.setMonth((startDate.getMonth() + probation_period) % 12);\r        probationEndDate.setDate(probationEndDate.getDate() - 1);\r\r        var day = probationEndDate.getDate();\r        var month = probationEndDate.getMonth() + 1; \r        var year = probationEndDate.getFullYear();\r        a = `${day < 10 ? '0' : ''}${day}-${month1 < 10 ? '0' : ''}${month}-${year}`;\r\r        // console.log(a);\r\r        var employmentStartDate = new Date(startDate);\r        employmentStartDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        employmentStartDate.setMonth((startDate.getMonth() + probation_period) % 12);\r\r        var day1 = employmentStartDate.getDate();\r        var month1 = employmentStartDate.getMonth() + 1; \r        var year1 = employmentStartDate.getFullYear();\r        b = `${day1 < 10 ? '0' : ''}${day1}-${month1 < 10 ? '0' : ''}${month1}-${year1}`;\r\r        // console.log(b);\r        \r        frm.set_value('probation_period_end_date', a);\r        frm.refresh_field('probation_period_end_date');\r        frm.set_value('employment_start_date', b);\r        frm.refresh_field('employment_start_date');\r    },\r    probation_period(frm) {\r        var probation_period = cur_frm.doc.probation_period;\r        var date_of_joining = cur_frm.doc.date_of_joining;\r        var a;\r        var b;\r        \r        var startDate = new Date(date_of_joining);\r\r        var probationEndDate = new Date(startDate);\r        probationEndDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        probationEndDate.setMonth((startDate.getMonth() + probation_period) % 12);\r        probationEndDate.setDate(probationEndDate.getDate() - 1);\r\r        var day = probationEndDate.getDate();\r        var month = probationEndDate.getMonth() + 1; \r        var year = probationEndDate.getFullYear();\r        a = `${day < 10 ? '0' : ''}${day}-${month1 < 10 ? '0' : ''}${month}-${year}`;\r\r        // console.log(a);\r\r        var employmentStartDate = new Date(startDate);\r        employmentStartDate.setFullYear(startDate.getFullYear() + Math.floor((startDate.getMonth() + probation_period) / 12));\r        employmentStartDate.setMonth((startDate.getMonth() + probation_period) % 12);\r\r        var day1 = employmentStartDate.getDate();\r        var month1 = employmentStartDate.getMonth() + 1; \r        var year1 = employmentStartDate.getFullYear();\r        b = `${day1 < 10 ? '0' : ''}${day1}-${month1 < 10 ? '0' : ''}${month1}-${year1}`;\r\r        // console.log(b);\r        \r        frm.set_value('probation_period_end_date', a);\r        frm.refresh_field('probation_period_end_date');\r        frm.set_value('employment_start_date', b);\r        frm.refresh_field('employment_start_date');\r    }\r})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Increment",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.417746",
  "module": "Advantisquartz",
  "name": "Get Updated CTC",
  "script": "frappe.ui.form.on('Employee Increment', {\n\tincrement_amount(frm) {\n\t    \n\t\tvar ctc = cur_frm.doc.ctc;\n\t\tvar increment_amount = cur_frm.doc.increment_amount;\n\t\tvar current_ctc = ctc + increment_amount;\n\t\tvar a;\n\t\tfrm.set_value('current_ctc', current_ctc);\n        frm.refresh_field('current_ctc');\n        \n       \n\t},\n\ton_submit(frm) {\n\t    var inc = cur_frm.doc.current_ctc;\n\t    var employee = cur_frm.doc.employee;\n        frappe.db.set_value('Employee', employee, 'ctc', inc);\n        frappe.db.commit();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Exit Interview Questionnaire",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.396481",
  "module": "Advantisquartz",
  "name": "Get interview question",
  "script": "frappe.ui.form.on('Exit Interview Questionnaire', {\n    onload(frm){\n        if(frm.is_new())\n            {\n            var ids = [\n                \"Job Profile\",\n                \"Working Environment\",\n                \"Attitude/ Behaviour of Senior\",\n                \"Compensation\",\n                \"Learning & Development\",\n                \"Policy & Practices\"\n                ];\n            var row;\n            // frm.clear_table('cc');\n            for(var i=0;i<ids.length;i++){\n                row = frm.add_child(\"details\");\n                row.details = ids[i];\n                frm.refresh_field(\"details\");\n            }\n        }\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2023-09-19 15:41:01.068843",
  "module": "Advantisquartz",
  "name": "Created By Name",
  "script": "frappe.ui.form.on('Material Request', {\n    onload: function(frm) {\n        if (frm.is_new()) {  // Check if the form is new\n            var a = frm.doc.transaction_date;\n            frm.set_value('schedule_date', frappe.datetime.add_days(a, 7));\n        }\n    }\n});\nfrappe.ui.form.on('Material Request', {\n    schedule_date: function(frm) {\n      \tfrm.doc.items.forEach(function(child) {\n      \t    child.schedule_date = cur_frm.doc.schedule_date\n      \t})\n    }\n});\n\nfrappe.ui.form.on('Material Request', {\n    refresh: function(frm) {\n        if (frappe.user_roles.includes(\"MR Creator\")) {\n             frm.fields_dict['items'].grid.toggle_display('rate');\n\n        }\n        else{\n            console.log(\"all\")\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.353881",
  "module": "Advantisquartz",
  "name": "Get Competency",
  "script": "frappe.ui.form.on('Interview', {\n    onload(frm) {\n        if (frm.is_new()) {\n            var ids = [\n                \"Functional / Subject Knowledge\",\n                \"Vision & Strategy\",\n                \"Business Acumen\",\n                \"Teamwork & Collaboration\",\n                \"Develop Self & Team\",\n                \"Administrative/Managerial  quality\",\n                \"Customer Focus\",\n                \"Innovates & Improves\",\n                \"Get Results\",\n                \"Communicate to Influence & Engage\",\n                \"Safety & Environment awareness\"\n            ];\n            var ids1 = [\n                \"Drive to Achieve\",\n                \"Learning Agility\",\n                \"Intellectual Capability\",\n                \"Managing Ambiguity\",\n                \"Emotional Maturity\"\n            ];\n            var row;\n\n            for (var i = 0; i < ids.length; i++) {\n                row = frm.add_child(\"rating\");\n                row.competency = ids[i];\n                row.personal_characteristics = ids1[i];\n                frm.refresh_field(\"rating\");\n            }\n        }\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Interview",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.330918",
  "module": "Advantisquartz",
  "name": "Get gross salary",
  "script": "frappe.ui.form.on('Interview', {\n    job_applicant(frm) {\n        var job_applicant = cur_frm.doc.job_applicant;\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Job Applicant',\n                'filters': {'name': job_applicant},\n                'fields': ['lower_range', 'upper_range'] \n            },\n            callback: function(response) {\n                var data = response.message[0];\n                var present_gross = data.lower_range;\n                var expected_gross = data.upper_range;\n                console.log(present_gross, expected_gross);\n                \n                frm.clear_table('salary');\n                var row;\n                \n                row = frm.add_child('salary');\n                row.present_gross_salary = present_gross;\n                row.expected_gross_salary = expected_gross;\n                \n                frm.refresh_field('salary');\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Training Need Identification",
  "enabled": 1,
  "modified": "2023-08-02 18:25:03.253490",
  "module": "Advantisquartz",
  "name": "Get department wise employee",
  "script": "frappe.ui.form.on('Training Need Identification', {\n\tdepartment(frm) {\n\t\tvar department = cur_frm.doc.department;\n// \t\tconsole.log(department);\n\t\t\n\t\tfrappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Employee',\n                'filters': {'department': department},\n                'fields': ['name'] \n            },\n            callback: function(response) {\n                // console.log(response.message)\n                var emp_name = response.message;\n                \n                frm.clear_table('training_details');\n                var row;\n                \n                for(var i=0;i<emp_name.length;i++)\n                {\n                    row = frm.add_child('training_details');\n                    row.targeted_group_name_of_employee = emp_name[i].name;\n                }\n                \n                frm.refresh_field('training_details');\n                \n            }\n\t\t});\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-10-30 11:45:32.307906",
  "module": "Advantisquartz",
  "name": "Unlink Gate Entry if purchase receipt",
  "script": "// Unlink Gate Entry if purchase return\n\nfrappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\tif(frm.is_new() && frm.doc.is_return == 1){\n\t\t    frm.doc.gate_entry = null;\n\t\t    frm.refesh_field('gate_entry');\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Type",
  "enabled": 1,
  "modified": "2023-08-14 12:52:59.848527",
  "module": "Advantisquartz",
  "name": "Get total leave",
  "script": "frappe.ui.form.on('Leave Type', {\n\tis_privilege_leave(frm) {\n\t    \n\t    var is_privilege_leave = cur_frm.doc.is_privilege_leave;\n\t   // console.log(is_privilege_leave);\n\t    if(is_privilege_leave == 1){\n\t     \n\t       // console.log(is_privilege_leave);\n\t       // var total_leaves = cur_frm.doc.total_leaves;\n\t       // var max_leaves_allowed = cur_frm.doc.max_leaves_allowed;\n\t     \n\t        // var calculation = total_leaves * 3;\n\t        // console.log(calculation);\n\t        frm.set_value('max_leaves_allowed', \"1000\");\n            frm.refresh_field('max_leaves_allowed');\n            // frm.set_df_property('max_leaves_allowed', 'hidden', 1);\n\t    } else {\n\t        frm.set_value('max_leaves_allowed', \"0\");\n            frm.refresh_field('max_leaves_allowed');\n\t    }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2023-08-14 14:47:57.258022",
  "module": "Advantisquartz",
  "name": "Get date after 20 days",
  "script": "frappe.ui.form.on('Leave Allocation', {\n    from_date(frm) {\n        var leave_type = cur_frm.doc.leave_type;\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Leave Type\",\n                filters: {\n                    name: leave_type\n                },\n                fields: [\"is_privilege_leave\"]\n            },\n            callback: function(response) {\n                var result = response.message[0];\n                console.log(result);\n\n                if (result && result.is_privilege_leave === 1) {\n                    var from_date = cur_frm.doc.from_date;\n                    console.log(from_date);\n                    var fromDateObj = new Date(from_date);\n                    fromDateObj.setDate(fromDateObj.getDate() + 19);\n                    var resultDate = fromDateObj.toISOString().split('T')[0];\n                    console.log(resultDate);\n                    frm.set_value('to_date', resultDate);\n                    frm.refresh_field('to_date');\n                }\n            }\n        });\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2023-09-13 12:00:37.845411",
  "module": "Advantisquartz",
  "name": "Create rows according to bag no in QC",
  "script": "frappe.ui.form.on('Quality Inspection', {\n\tbags_or_drums(frm) {\n\t    var bags =  parseInt(frm.doc.bags_or_drums);\n        var row;\n        frm.clear_table(\"mesh_qc\");\n        for (var i = 0; i < bags; i++) {\n            row = frm.add_child(\"mesh_qc\");\n            row.description = \"\";\n            frm.refresh_field(\"mesh_qc\");\n        }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-10-30 11:45:32.443546",
  "module": "Advantisquartz",
  "name": "Link machine maintenance with purchase receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    supplier(frm) {\n        var supplier = cur_frm.doc.supplier;\n        console.log(supplier);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Machine Maintenance\",\n                filters: {\n                    supplier: supplier,\n                    docstatus: 1,\n                },\n                fields: [\"name\"],\n            },\n            callback: function (response) {\n                // console.log(response);\n                var machineMaintenanceOptions = response.message.map(function (item) {\n                    return item.name;\n                });\n                // console.log(machineMaintenanceOptions);\n                frm.fields_dict.machine_maintenance.get_query = function () {\n                    return {\n                        filters: [\n                            ['Machine Maintenance', 'name', 'in', machineMaintenanceOptions]\n                        ]\n                    };\n                };\n                frm.refresh_field('machine_maintenance');\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2023-09-11 17:25:52.915271",
  "module": "Advantisquartz",
  "name": "Link machine maintenance with purchase inv",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    supplier(frm) {\n        var supplier = cur_frm.doc.supplier;\n        console.log(supplier);\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Machine Maintenance\",\n                filters: {\n                    supplier: supplier,\n                },\n                fields: [\"name\"],\n            },\n            callback: function (response) {\n                console.log(response);\n                var machineMaintenanceOptions = response.message.map(function (item) {\n                    return item.name;\n                });\n                console.log(machineMaintenanceOptions);\n                frm.fields_dict.machine_maintenance.get_query = function () {\n                    return {\n                        filters: [\n                            ['Machine Maintenance', 'name', 'in', machineMaintenanceOptions]\n                        ]\n                    };\n                };\n                frm.refresh_field('machine_maintenance');\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Retention Bonus",
  "enabled": 1,
  "modified": "2023-09-18 11:17:13.733263",
  "module": "Advantisquartz",
  "name": "Get Bonus",
  "script": "frappe.ui.form.on('Retention Bonus', {\n    get_salary_slip(frm) {\n        var monthly_bonus = cur_frm.doc.monthly_bonus;\n        var emp = cur_frm.doc.employee;\n        var from_date = cur_frm.doc.from_date;\n        var to_date = cur_frm.doc.to_date;\n\n        if (monthly_bonus === 1 && emp && from_date && to_date) {\n            frappe.call({\n                method: \"advantisquartz.advantisquartz.doctype.api.get_employee_bonus\",\n                args: {\n                    employee: emp,\n                    from_date: from_date,\n                    to_date: to_date\n                },\n                async: false,\n                callback: function (response) {\n                    console.log(response.message);\n\n                    frm.clear_table(\"employee_bonus\");\n\n                    var salary_slips = response.message[0];\n                    var get_salary_data = response.message[1];\n                    var totalBonus = 0;\n\n                    for (var i = 0; i < salary_slips.length; i++) {\n                        var row = frm.add_child(\"employee_bonus\");\n                        row.salary_slip = salary_slips[i].name;\n                        row.basic_salary = get_salary_data[i].amount;\n                        \n                        var amount = get_salary_data[i].amount;\n                        if (amount <= 7000) {\n                            row.bonus = amount * 0.0833; \n                        } else if (amount <= 21000) {\n                            row.bonus = 7000 * 0.20; \n                        } else {\n                            row.bonus = 0;\n                        }\n                        totalBonus += row.bonus;\n                    }\n\n                    frm.refresh_field(\"employee_bonus\");\n                    frm.set_value(\"salary_component\", \"Bonus\");\n                    totalBonus = parseFloat(totalBonus.toFixed(0));\n                    frm.set_value(\"bonus_amount\", totalBonus);\n                }\n            });\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gratuity",
  "enabled": 1,
  "modified": "2023-09-19 10:48:10.142732",
  "module": "Advantisquartz",
  "name": "Get gratuity",
  "script": "frappe.ui.form.on('Gratuity', {\n\tget_gratuity(frm) {\n        var get_gratuity = cur_frm.doc.get_gratuity;\n        var emp = cur_frm.doc.employee;\n        if (get_gratuity === 1){\n            frappe.call({\n                method: \"advantisquartz.advantisquartz.doctype.api.get_gratuity\",\n                args: {\n                    employee: emp\n                },\n                async: false,\n                callback: function (response) {\n                    // console.log(response.message);\n                    frm.set_value(\"salary_component\", \"Gratuity\");\n                }\n            });\n        }\n\t},\n\tafter_save(frm){\n\t    var get_gratuity = cur_frm.doc.get_gratuity;\n        var emp = cur_frm.doc.employee;\n        var current_work_experience = cur_frm.doc.current_work_experience;\n        if (get_gratuity === 1){\n            frappe.call({\n                method: \"advantisquartz.advantisquartz.doctype.api.get_gratuity\",\n                args: {\n                    employee: emp\n                },\n                async: false,\n                callback: function (response) {\n                    // console.log(response.message);\n                    var basic = response.message.amount;\n                    // var gratuity = basic * current_work_experience * (15/26);\n                    var gratuity = basic * current_work_experience * (15/26);\n                    // console.log(basic);\n                    // console.log(current_work_experience);\n                    // console.log(gratuity);\n                    // gratuity = gratuity.toFixed(2);\n                    // frappe.db.set_value('Gratuity', frm.doc.name, 'amount', gratuity);\n                    frm.doc.amount = Math.round(gratuity);\n                    frm.doc.paid_amount = Math.round(gratuity);\n                    frm.save();\n                    // frm.refresh_field('amount');\n                    // frm.save('Submit');\n                    // frm.save();\n                    \n\n                }\n            });\n            \n           \n        }\n        \n\t},\n// \ton_submit(frm) {\n//         var name = cur_frm.doc.name;\n//         var amount = cur_frm.doc.amount;\n//         // console.log(name, amount);\n//         frappe.call({\n//             method: \"frappe.client.get_list\",\n//             args: {\n//                 'doctype': 'Additional Salary',\n//                 'filters': {\n//                     'ref_docname': name\n//                 },\n//                 'fields': ['name', 'amount'] \n//             },\n//             async: false,\n//             callback: function (response) {\n//                 // console.log(response.message);\n//                 var additional_salary_name = response.message[0].name;\n//                 var additional_salary_amount = response.message[0].amount;\n//                 console.log(additional_salary_name, additional_salary_amount);\n//                 frappe.db.set_value('Additional Salary', additional_salary_name, 'amount', additional_salary_amount);\n//                 // frappe.db.commit();\n//             }\n//         });\n//     }\n\t\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-09-20 16:51:52.153473",
  "module": "Advantisquartz",
  "name": "Set employee number",
  "script": "frappe.ui.form.on('Employee', {\n\temployee(frm) {\n\t    var emp = frm.doc.employee;\n\t    frm.set_value('employee_number', emp);\n\t    frm.refresh_field('employee_number');\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Grievance",
  "enabled": 1,
  "modified": "2024-01-10 17:03:14.857907",
  "module": "Advantisquartz",
  "name": "Fetch Emp name",
  "script": "frappe.ui.form.on('Employee Grievance', {\n\tgrievance_against(frm) {\n\t\tif(frm.doc.grievance_against_party==\"Employee\"){\n\t\t    frappe.db.get_value('Employee', frm.doc.grievance_against, 'employee_name')\n            .then(r => {\n                console.log(r.message.employee_name);\n                cur_frm.set_value('emp_name',r.message.employee_name);\n\t\t        frm.refresh_field('emp_name');\n            });\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2023-10-11 14:03:41.247653",
  "module": "Advantisquartz",
  "name": "Status ListView",
  "script": "frappe.listview_settings['Purchase Order'] = {\nget_indicator:function(doc){\nif (doc.status === \"Partially Close\") {\n\t\t\treturn [__(\"Partially Close\"), \"green\", \"status,=,Partially Close\"];\n    }\nif (doc.status === \"Draft\") {\n\t\t\treturn [__(\"Draft\"), \"red\", \"status,=,Draft\"];\n    }\nif (doc.status === \"On Hold\") {\n\t\t\treturn [__(\"On Hold\"), \"red\", \"status,=,On Hold\"];\n    }\nif (doc.status === \"To Receive and Bill\") {\n\t\t\treturn [__(\"To Receive and Bill\"), \"orange\", \"status,=,To Receive and Bill\"];\n    }\nif (doc.status === \"To Bill\") {\n\t\t\treturn [__(\"To Bill\"), \"orange\", \"status,=,To Bill\"];\n    }\nif (doc.status === \"To Receive\") {\n\t\t\treturn [__(\"To Receive\"), \"orange\", \"status,=,To Receive\"];\n    }\nif(doc.status === \"Completed\"){\n    return [__(\"Completed\"),\"green\",\"status = ,Completed\"]\n}\nif(doc.status === \"Cancelled\"){\n    return [__(\"Cancelled\"),\"red\",\"status = ,Cancelled\"]\n}\nif(doc.status === \"Closed\"){\n    return [__(\"Closed\"),\"green\",\"status = ,Closed\"]\n}\nif(doc.status === \"Delivered\"){\n    return [__(\"Delivered\"),\"green\",\"status =,Delivered\"]\n}\n }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2023-12-06 15:31:28.689774",
  "module": "Advantisquartz",
  "name": "ESI based on CTC",
  "script": "frappe.ui.form.on('Employee', {\n    ctc(frm) {\n        var ctc = cur_frm.doc.ctc;\n        if (ctc >= 21000) {\n            cur_frm.toggle_display('esi_number', false);\n            cur_frm.toggle_reqd('esi_number', false);\n        } else {\n            console.log(\"Less than 21000\");\n            cur_frm.toggle_display('esi_number', true);\n            cur_frm.toggle_reqd('esi_number', true);\n        }\n    }\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-12-06 15:31:07.163920",
  "module": "Advantisquartz",
  "name": "Set current address",
  "script": "frappe.ui.form.on('Employee', {\n\tcustom_is_current_address(frm) {\n        var custom_is_current_address = cur_frm.doc.custom_is_current_address;\n        console.log(custom_is_current_address);\n        \n        if(custom_is_current_address == 1){\n            var res_no = cur_frm.doc.custom_res_no;\n            var res_name = cur_frm.doc.custom_res_name;\n            var road_street = cur_frm.doc.custom_road_street;\n            var locality_area = cur_frm.doc.custom_locality_area;\n            var city = cur_frm.doc.custom_city;\n            var state = cur_frm.doc.custom_state;\n            var country = cur_frm.doc.custom_country;\n            frm.set_value('custom_res_no_p', res_no);\n            frm.set_value('custom_res_name_p', res_name);\n            frm.set_value('custom_road_street_p', road_street);\n            frm.set_value('custom_locality_area_p', locality_area);\n            frm.set_value('custom_city_p', city);\n            frm.set_value('custom_state_p', state);\n            frm.set_value('custom_country_p', country);\n            \n        } else {\n            frm.set_value('custom_res_no_p', '');\n            frm.set_value('custom_res_name_p', '');\n            frm.set_value('custom_road_street_p', '');\n            frm.set_value('custom_locality_area_p', '');\n            frm.set_value('custom_city_p', '');\n            frm.set_value('custom_state_p', '');\n            frm.set_value('custom_country_p', '');\n        }\n        \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2023-12-26 15:10:50.358304",
  "module": "Advantisquartz",
  "name": "Get filter wise Component",
  "script": "cur_frm.cscript.onload = function(frm) {\n    cur_frm.set_query(\"salary_component\", \"custom_employee_salary_breakup\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        return {\n            \"filters\": {\n                \"type\": \"Earning\"\n            }\n        };\n    });\n    cur_frm.set_query(\"salary_component\", \"custom_deduction\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        return {\n            \"filters\": {\n                \"type\": \"Deduction\"\n            }\n        };\n    });\n    cur_frm.set_query(\"salary_component\", \"custom_employer_contribution\", function(doc, cdt, cdn) {\n        var child = locals[cdt][cdn]; \n\n        return {\n            \"filters\": {\n                \"custom_employer_contribution\": 1\n            }\n        };\n    });\n    \n};\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2023-12-26 15:10:50.336450",
  "module": "Advantisquartz",
  "name": "Get total",
  "script": "frappe.ui.form.on('Employee Salary Breakup', {\n    custom_employee_salary_breakup_add: function(frm, cdt, cdn) {\n        frappe.ui.form.on(cdt, {\n            amount: function(frm, cdt, cdn) {\n                updateTotalEarnings(frm);\n            }\n        });\n        updateTotalEarnings(frm);\n    },\n    custom_employee_salary_breakup_remove: function(frm, cdt, cdn) {\n        updateTotalEarnings(frm);\n    }\n});\n\n\nfrappe.ui.form.on('Employee Salary Breakup', {\n    custom_deduction_add: function(frm, cdt, cdn) {\n        frappe.ui.form.on(cdt, {\n            amount: function(frm, cdt, cdn) {\n                updateTotalDeduction(frm);\n            }\n        });\n        updateTotalDeduction(frm);\n    },\n    custom_deductionp_remove: function(frm, cdt, cdn) {\n        updateTotalDeduction(frm);\n    }\n});\n\n\nfrappe.ui.form.on('Employee Salary Breakup', {\n    custom_employer_contribution_add: function(frm, cdt, cdn) {\n        frappe.ui.form.on(cdt, {\n            amount: function(frm, cdt, cdn) {\n                updateTotalEmployerContribution(frm);\n            }\n        });\n        updateTotalEmployerContribution(frm);\n    },\n    custom_employer_contribution_remove: function(frm, cdt, cdn) {\n        updateTotalEmployerContribution(frm);\n    }\n});\n\n\n\n// frappe.ui.form.on('Salary Breakup Detail', {\n//     amount: function(frm, cdt, cdn) {\n//         updateTotalEarnings(frm);\n//     }\n// });\n\nfunction updateTotalEarnings(frm) {\n    var custom_employee_salary_breakup = frm.doc.custom_employee_salary_breakup;\n    var earnings = 0;\n    for (var i = 0; i < custom_employee_salary_breakup.length; i++) {\n        earnings += parseFloat(custom_employee_salary_breakup[i].amount) || 0;\n    }\n    frm.set_value(\"custom_total_earning\", earnings);\n}\n\nfunction updateTotalDeduction(frm) {\n        var custom_deduction = frm.doc.custom_deduction;\n        var deduction = 0;\n        for (var j = 0; j < custom_deduction.length; j++) {\n            deduction += parseFloat(custom_deduction[j].amount) || 0;\n        }\n        frm.set_value(\"custom_total_deduction\", deduction);\n}\n\nfunction updateTotalEmployerContribution(frm) {\n        var custom_employer_contribution = frm.doc.custom_employer_contribution;\n        var employer_contribution = 0;\n        for (var k = 0; k < custom_employer_contribution.length; k++) {\n            employer_contribution += parseFloat(custom_employer_contribution[k].amount) || 0;\n        }\n        frm.set_value(\"custom_total_employer_contibution\", employer_contribution);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2023-12-26 15:10:50.176468",
  "module": "Advantisquartz",
  "name": "Get Net Salary and CTC",
  "script": "frappe.ui.form.on('Job Offer', {\n\tafter_save(frm) {\n\t\tvar custom_total_earning = cur_frm.doc.custom_total_earning;\n\t\tvar custom_total_deduction = cur_frm.doc.custom_total_deduction;\n\t\tvar net_salary = custom_total_earning - custom_total_deduction;\n\t\t\n\t\tvar custom_net_salary_ = cur_frm.doc.custom_net_salary_;\n\t    var custom_total_employer_contibution = cur_frm.doc.custom_total_employer_contibution;\n\t    var ctc = parseFloat(custom_net_salary_) + parseFloat(custom_total_employer_contibution);\n\t\n\t    frm.set_value('custom_net_salary_', net_salary);\n\t    frm.set_value('custom_cost_to_company', ctc);\n\t    frm.save();\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-01-02 12:30:08.126805",
  "module": "Advantisquartz",
  "name": "Merge address",
  "script": "frappe.ui.form.on('Employee', {\n\tafter_save(frm) {\n\t\t\n\t\tvar custom_res_no = cur_frm.doc.custom_res_no;\n\t\tvar custom_res_name = cur_frm.doc.custom_res_name;\n\t\tvar custom_road_street = cur_frm.doc.custom_road_street;\n\t\tvar custom_locality_area = cur_frm.doc.custom_locality_area;\n\t\tvar custom_city = cur_frm.doc.custom_city;\n\t\tvar custom_state = cur_frm.doc.custom_state;\n\t\tvar custom_country = cur_frm.doc.custom_country;\n\t\tvar present_address = custom_res_no + ' ' + custom_res_name + ' ' + custom_road_street + ' ' + custom_locality_area + ' ' + custom_city + ' ' + custom_state + ' ' + custom_country + '.';\n\t\tconsole.log(present_address);\n\t\tfrm.set_value('current_address',present_address);\n\t\t\n\t\t\n\t    var custom_is_current_address = cur_frm.doc.custom_is_current_address;\n\t    var custom_res_no_p = cur_frm.doc.custom_res_no_p;\n\t    var custom_res_name_p = cur_frm.doc.custom_res_name_p;\n\t    var custom_road_street_p = cur_frm.doc.custom_road_street_p;\n\t    var custom_locality_area_p = cur_frm.doc.custom_locality_area_p;\n\t    var custom_city_p = cur_frm.doc.custom_city_p;\n\t    var custom_state_p = cur_frm.doc.custom_state_p;\n\t    var custom_country_p = cur_frm.doc.custom_country_p;\n\t    var permenant_address = custom_res_no_p + ' '+ custom_res_name_p + ' ' + custom_road_street_p + ' ' + custom_locality_area_p + ' ' + custom_city_p + ' ' + custom_state_p + ' ' + custom_country_p + '.';\n\t    console.log(permenant_address);\n\t    frm.set_value('permanent_address',permenant_address);\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-01-17 11:17:54.130649",
  "module": "Advantisquartz",
  "name": "Serial Number Work Order",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload: function (frm) {\n        // Your existing code for onload\n        // ...\n    },\n    after_save: function (frm) {\n        // Iterate through each row in the items table\n        frm.doc.items.forEach(function (item, index) {\n            // Fetch additional information from the Item Master\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Item',\n                    filters: { name: item.item_code },\n                    fieldname: ['finish_good_id', 'serial_no_series']\n                },\n                callback: function (response) {\n                    if (response.message && response.message.finish_good_id) {\n                        console.log('Serial No Series for Item ' + item.item_code + ':', response.message.serial_no_series);\n                        \n                        // Set the serial_no_series based on the batch_no\n                        // var new_serial_no_series = item.item_code + '-' + item.batch_no + '-';\n                        var new_serial_no_series = item.item_code + '-' + item.batch_no + '-' + '.####';\n                        frm.doc.items[index].serial_no_series = new_serial_no_series;\n\n                        // Update the serial_no_series using frappe.db.set_value\n                        frappe.db.set_value('Item', item.item_code, 'serial_no_series', new_serial_no_series);\n                    }\n                }\n            });\n        });\n    },\n    refresh:function(frm){\n        frm.set_query(\"custom_machine_maintenance_log\",function(){\n            return{\n                filters:{\n               'maintenance_status':\"Planned\"\n            }\n            }\n            \n        })\n    }\n});\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-01-09 15:48:06.747530",
  "module": "Advantisquartz",
  "name": "Calculate Shifthours",
  "script": "frappe.ui.form.on('Shift Type', {\nstart_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.custom_shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\n        \n       frappe.model.set_value(cdt,cdn,\"custom_shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"custom_shift_hours\");\n    }\n},\nend_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.custom_shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\t\n      frappe.model.set_value(cdt,cdn,\"custom_shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"custom_shift_hours\");\n    }\n}\n\n\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packing list",
  "enabled": 1,
  "modified": "2024-01-16 17:52:33.367591",
  "module": "Advantisquartz",
  "name": "Packing List on Update Sales Order",
  "script": "frappe.ui.form.on('Packing list', {\n    refresh: function (frm) {\n        // Add a custom button to the form\n        frm.add_custom_button(__('Open Sales Order'), function () {\n            // Get the Sales Order reference from the current document\n            const salesOrder = frm.doc.sales_order;\n\n            // Check if a Sales Order is selected\n            if (salesOrder) {\n                // Open the Sales Order form\n                frappe.set_route('Form', 'Sales Order', salesOrder);\n            } else {\n                frappe.msgprint(__('Please select a Sales Order.'));\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "ToDo",
  "enabled": 1,
  "modified": "2024-01-19 10:54:17.152523",
  "module": "Advantisquartz",
  "name": "Machine Maintenance Log change status",
  "script": "frappe.ui.form.on('ToDo', {\n    onload: function(frm) {\n        if (!frm.doc.__islocal && frm.doc.status !== \"Closed\") {\n            frm.add_custom_button(\n                __(\"Close\"),\n                function () {\n                    frm.set_value(\"status\", \"Closed\");\n\n                    var referenceName = frm.doc.reference_name;\n                    var referenceType = frm.doc.reference_type;\n                    if(referenceType === 'Machine Maintenance Schedule')\n                    {\n                        frm.save(null, function () {\n                            frappe.call({\n                                method: 'frappe.client.get_list',\n                                args: {\n                                    doctype: 'Machine Maintenance Log',\n                                    filters: {\n                                        machine_maintenance_schedule: referenceName,\n                                        maintenance_status: 'Planned'\n                                    },\n                                    fields: ['*']\n                                },\n                                callback: function(response) {\n                                    var plannedMaintenanceLogs = response.message;\n    \n                                    console.log(plannedMaintenanceLogs)\n                                     plannedMaintenanceLogs.forEach(function(log) {\n                                         frappe.call({\n                                            method: 'set_submit',\n                                            args: {\n                                                reference_name: referenceName\n                                            },\n                                            callback: function(response) {\n                                                //console.log(response.reference_name)\n                                            }\n                                        });\n    \n                                    });\n                                }\n                            });\n                        });\n                    }\n                }\n            );\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packing list",
  "enabled": 1,
  "modified": "2024-01-31 14:10:55.849970",
  "module": "Advantisquartz",
  "name": "Total Saleable Measurement",
  "script": "frappe.ui.form.on('Packing list', {\n    after_save: function(frm) {\n\n        // Fetch data from child table 'Packing List Item'\n        var childTableData = frm.doc.items || [];\n\n        // Calculate the total saleable_measurement\n        var totalSaleableMeasurement = childTableData.reduce(function(total, item) {\n            return total + (item.saleable_measurement || 0);\n        }, 0);\n\n        // Calculate the total gross_measurement\n        var totalGrossMeasurement = childTableData.reduce(function(total, item) {\n            return total + (item.gross_measurement || 0);\n        }, 0);\n\n        // Set the total_saleable_measurement and total_gross_measurement fields in the form\n        frappe.model.set_value(frm.doctype, frm.docname, 'total_saleable_measurement', totalSaleableMeasurement);\n        frappe.model.set_value(frm.doctype, frm.docname, 'total_gross_measurement', totalGrossMeasurement);\n    }\n});\n",
  "view": "Form"
 }
]